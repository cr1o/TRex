
TRex.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000000c0  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000073f0  080000c0  080000c0  000100c0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000090  080074b0  080074b0  000174b0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .init_array   00000004  08007540  08007540  00017540  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  4 .fini_array   00000004  08007544  08007544  00017544  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .data         0000005c  20000000  08007548  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .bss          00000e50  2000005c  080075a4  0002005c  2**2
                  ALLOC
  7 ._user_heap_stack 00000080  20000eac  080075a4  00020eac  2**0
                  ALLOC
  8 .ARM.attributes 00000028  00000000  00000000  0002005c  2**0
                  CONTENTS, READONLY
  9 .debug_info   0000a92c  00000000  00000000  00020084  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_abbrev 00001d1e  00000000  00000000  0002a9b0  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_aranges 00000240  00000000  00000000  0002c6d0  2**3
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_line   00003852  00000000  00000000  0002c910  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_str    00002f7c  00000000  00000000  00030162  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .comment      0000007c  00000000  00000000  000330de  2**0
                  CONTENTS, READONLY
 15 .debug_frame  00001db0  00000000  00000000  0003315c  2**2
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_ranges 00000020  00000000  00000000  00034f10  2**3
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

080000c0 <__do_global_dtors_aux>:
 80000c0:	b510      	push	{r4, lr}
 80000c2:	4c06      	ldr	r4, [pc, #24]	; (80000dc <__do_global_dtors_aux+0x1c>)
 80000c4:	7823      	ldrb	r3, [r4, #0]
 80000c6:	2b00      	cmp	r3, #0
 80000c8:	d107      	bne.n	80000da <__do_global_dtors_aux+0x1a>
 80000ca:	4b05      	ldr	r3, [pc, #20]	; (80000e0 <__do_global_dtors_aux+0x20>)
 80000cc:	2b00      	cmp	r3, #0
 80000ce:	d002      	beq.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d0:	4804      	ldr	r0, [pc, #16]	; (80000e4 <__do_global_dtors_aux+0x24>)
 80000d2:	e000      	b.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d4:	bf00      	nop
 80000d6:	2301      	movs	r3, #1
 80000d8:	7023      	strb	r3, [r4, #0]
 80000da:	bd10      	pop	{r4, pc}
 80000dc:	2000005c 	.word	0x2000005c
 80000e0:	00000000 	.word	0x00000000
 80000e4:	08007494 	.word	0x08007494

080000e8 <frame_dummy>:
 80000e8:	4b04      	ldr	r3, [pc, #16]	; (80000fc <frame_dummy+0x14>)
 80000ea:	b510      	push	{r4, lr}
 80000ec:	2b00      	cmp	r3, #0
 80000ee:	d003      	beq.n	80000f8 <frame_dummy+0x10>
 80000f0:	4903      	ldr	r1, [pc, #12]	; (8000100 <frame_dummy+0x18>)
 80000f2:	4804      	ldr	r0, [pc, #16]	; (8000104 <frame_dummy+0x1c>)
 80000f4:	e000      	b.n	80000f8 <frame_dummy+0x10>
 80000f6:	bf00      	nop
 80000f8:	bd10      	pop	{r4, pc}
 80000fa:	46c0      	nop			; (mov r8, r8)
 80000fc:	00000000 	.word	0x00000000
 8000100:	20000060 	.word	0x20000060
 8000104:	08007494 	.word	0x08007494

08000108 <ADC_Init>:
#include "stm32f0xx.h"
#include "ADC.h"

void ADC_Init (void) {
 8000108:	b580      	push	{r7, lr}
 800010a:	af00      	add	r7, sp, #0
		
		//RCC->APB2ENR |= RCC_APB2ENR_ADC1EN;  //enable timing on ADC
		//RCC->APB2ENR |=RCC_APB2ENR_IOPAEN; //fds
		RCC->APB2ENR |= RCC_APB2ENR_ADCEN;   //enable timing on ADC
 800010c:	4b2b      	ldr	r3, [pc, #172]	; (80001bc <ADC_Init+0xb4>)
 800010e:	4a2b      	ldr	r2, [pc, #172]	; (80001bc <ADC_Init+0xb4>)
 8000110:	6992      	ldr	r2, [r2, #24]
 8000112:	2180      	movs	r1, #128	; 0x80
 8000114:	0089      	lsls	r1, r1, #2
 8000116:	430a      	orrs	r2, r1
 8000118:	619a      	str	r2, [r3, #24]
		RCC->AHBENR |=RCC_AHBENR_GPIOAEN;    //enable timing on GPIOA
 800011a:	4b28      	ldr	r3, [pc, #160]	; (80001bc <ADC_Init+0xb4>)
 800011c:	4a27      	ldr	r2, [pc, #156]	; (80001bc <ADC_Init+0xb4>)
 800011e:	6952      	ldr	r2, [r2, #20]
 8000120:	2180      	movs	r1, #128	; 0x80
 8000122:	0289      	lsls	r1, r1, #10
 8000124:	430a      	orrs	r2, r1
 8000126:	615a      	str	r2, [r3, #20]
		
		
		GPIOA->MODER &= ~GPIO_MODER_MODER0_Msk; //PA0 - Reset function
 8000128:	2390      	movs	r3, #144	; 0x90
 800012a:	05db      	lsls	r3, r3, #23
 800012c:	2290      	movs	r2, #144	; 0x90
 800012e:	05d2      	lsls	r2, r2, #23
 8000130:	6812      	ldr	r2, [r2, #0]
 8000132:	2103      	movs	r1, #3
 8000134:	438a      	bics	r2, r1
 8000136:	601a      	str	r2, [r3, #0]
		GPIOA->MODER|= GPIO_MODER_MODER0_1; //PA0 - Alternative funtion		
 8000138:	2390      	movs	r3, #144	; 0x90
 800013a:	05db      	lsls	r3, r3, #23
 800013c:	2290      	movs	r2, #144	; 0x90
 800013e:	05d2      	lsls	r2, r2, #23
 8000140:	6812      	ldr	r2, [r2, #0]
 8000142:	2102      	movs	r1, #2
 8000144:	430a      	orrs	r2, r1
 8000146:	601a      	str	r2, [r3, #0]

		RCC->CFGR2 |= RCC_CFGR_ADCPRE_DIV4; //Prescaller SystemCoreClock /4   48Mhz/4 = 12Mhz	
 8000148:	4b1c      	ldr	r3, [pc, #112]	; (80001bc <ADC_Init+0xb4>)
 800014a:	4a1c      	ldr	r2, [pc, #112]	; (80001bc <ADC_Init+0xb4>)
 800014c:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 800014e:	2180      	movs	r1, #128	; 0x80
 8000150:	01c9      	lsls	r1, r1, #7
 8000152:	430a      	orrs	r2, r1
 8000154:	62da      	str	r2, [r3, #44]	; 0x2c
		
		ADC1->CR |= ADC_CR_ADCAL; 								//Start calibration
 8000156:	4b1a      	ldr	r3, [pc, #104]	; (80001c0 <ADC_Init+0xb8>)
 8000158:	4a19      	ldr	r2, [pc, #100]	; (80001c0 <ADC_Init+0xb8>)
 800015a:	6892      	ldr	r2, [r2, #8]
 800015c:	2180      	movs	r1, #128	; 0x80
 800015e:	0609      	lsls	r1, r1, #24
 8000160:	430a      	orrs	r2, r1
 8000162:	609a      	str	r2, [r3, #8]
		
		while ((ADC1->CR & ADC_CR_ADCAL) != 0) 		//Waiting calibration
 8000164:	46c0      	nop			; (mov r8, r8)
 8000166:	4b16      	ldr	r3, [pc, #88]	; (80001c0 <ADC_Init+0xb8>)
 8000168:	689b      	ldr	r3, [r3, #8]
 800016a:	2b00      	cmp	r3, #0
 800016c:	dbfb      	blt.n	8000166 <ADC_Init+0x5e>
		{
			/* For robust implementation, add here time-out management */
		}	
	
		ADC1->CHSELR |= ADC_CHSELR_CHSEL0;	//Input Channel-x is selected for conversion
 800016e:	4b14      	ldr	r3, [pc, #80]	; (80001c0 <ADC_Init+0xb8>)
 8000170:	4a13      	ldr	r2, [pc, #76]	; (80001c0 <ADC_Init+0xb8>)
 8000172:	6a92      	ldr	r2, [r2, #40]	; 0x28
 8000174:	2101      	movs	r1, #1
 8000176:	430a      	orrs	r2, r1
 8000178:	629a      	str	r2, [r3, #40]	; 0x28
						
		ADC1->CR |= ADC_CR_ADEN; 									//ADC enable
 800017a:	4b11      	ldr	r3, [pc, #68]	; (80001c0 <ADC_Init+0xb8>)
 800017c:	4a10      	ldr	r2, [pc, #64]	; (80001c0 <ADC_Init+0xb8>)
 800017e:	6892      	ldr	r2, [r2, #8]
 8000180:	2101      	movs	r1, #1
 8000182:	430a      	orrs	r2, r1
 8000184:	609a      	str	r2, [r3, #8]
		while ((ADC1->ISR & ADC_ISR_ADRDY) == 0) //waiting until ADC will be ready
 8000186:	46c0      	nop			; (mov r8, r8)
 8000188:	4b0d      	ldr	r3, [pc, #52]	; (80001c0 <ADC_Init+0xb8>)
 800018a:	681b      	ldr	r3, [r3, #0]
 800018c:	2201      	movs	r2, #1
 800018e:	4013      	ands	r3, r2
 8000190:	d0fa      	beq.n	8000188 <ADC_Init+0x80>
		{
			/* For robust implementation, add here time-out management */
		}
	
		ADC1->CFGR1 &= ~ADC_CFGR1_CONT; 		//0-single conversation; 1-Continuous conv.
 8000192:	4b0b      	ldr	r3, [pc, #44]	; (80001c0 <ADC_Init+0xb8>)
 8000194:	4a0a      	ldr	r2, [pc, #40]	; (80001c0 <ADC_Init+0xb8>)
 8000196:	68d2      	ldr	r2, [r2, #12]
 8000198:	490a      	ldr	r1, [pc, #40]	; (80001c4 <ADC_Init+0xbc>)
 800019a:	400a      	ands	r2, r1
 800019c:	60da      	str	r2, [r3, #12]
		ADC1->CFGR1 &= ~ADC_CFGR1_EXTEN; 		//EFGR1->EXTEN 00: Hardware trigger detection disabled (conversions can be started by software)
 800019e:	4b08      	ldr	r3, [pc, #32]	; (80001c0 <ADC_Init+0xb8>)
 80001a0:	4a07      	ldr	r2, [pc, #28]	; (80001c0 <ADC_Init+0xb8>)
 80001a2:	68d2      	ldr	r2, [r2, #12]
 80001a4:	4908      	ldr	r1, [pc, #32]	; (80001c8 <ADC_Init+0xc0>)
 80001a6:	400a      	ands	r2, r1
 80001a8:	60da      	str	r2, [r3, #12]
		ADC1->SMPR |= ADC_SMPR_SMP_Msk;     //239.5 ADC clock cycles
 80001aa:	4b05      	ldr	r3, [pc, #20]	; (80001c0 <ADC_Init+0xb8>)
 80001ac:	4a04      	ldr	r2, [pc, #16]	; (80001c0 <ADC_Init+0xb8>)
 80001ae:	6952      	ldr	r2, [r2, #20]
 80001b0:	2107      	movs	r1, #7
 80001b2:	430a      	orrs	r2, r1
 80001b4:	615a      	str	r2, [r3, #20]
	
}
 80001b6:	46c0      	nop			; (mov r8, r8)
 80001b8:	46bd      	mov	sp, r7
 80001ba:	bd80      	pop	{r7, pc}
 80001bc:	40021000 	.word	0x40021000
 80001c0:	40012400 	.word	0x40012400
 80001c4:	ffffdfff 	.word	0xffffdfff
 80001c8:	fffff3ff 	.word	0xfffff3ff

080001cc <delay_us>:
#include "lcd.h"
//----------------------------------------------
void delay_us(uint32_t n) //Задержка в ~1мкс (При 8MGz 1.25) 1такт 125нс *10 = 1.25мкс
{
 80001cc:	b580      	push	{r7, lr}
 80001ce:	b084      	sub	sp, #16
 80001d0:	af00      	add	r7, sp, #0
 80001d2:	6078      	str	r0, [r7, #4]
    uint32_t i;
    for (i = 0; i < n*10; i++)
 80001d4:	2300      	movs	r3, #0
 80001d6:	60fb      	str	r3, [r7, #12]
 80001d8:	e002      	b.n	80001e0 <delay_us+0x14>
 80001da:	68fb      	ldr	r3, [r7, #12]
 80001dc:	3301      	adds	r3, #1
 80001de:	60fb      	str	r3, [r7, #12]
 80001e0:	687a      	ldr	r2, [r7, #4]
 80001e2:	0013      	movs	r3, r2
 80001e4:	009b      	lsls	r3, r3, #2
 80001e6:	189b      	adds	r3, r3, r2
 80001e8:	005b      	lsls	r3, r3, #1
 80001ea:	001a      	movs	r2, r3
 80001ec:	68fb      	ldr	r3, [r7, #12]
 80001ee:	429a      	cmp	r2, r3
 80001f0:	d8f3      	bhi.n	80001da <delay_us+0xe>
    {
    }
}    
 80001f2:	46c0      	nop			; (mov r8, r8)
 80001f4:	46bd      	mov	sp, r7
 80001f6:	b004      	add	sp, #16
 80001f8:	bd80      	pop	{r7, pc}

080001fa <LCD_Command>:
//----------------------------------------------
void LCD_Command(uint8_t dt)
{   
 80001fa:	b580      	push	{r7, lr}
 80001fc:	b082      	sub	sp, #8
 80001fe:	af00      	add	r7, sp, #0
 8000200:	0002      	movs	r2, r0
 8000202:	1dfb      	adds	r3, r7, #7
 8000204:	701a      	strb	r2, [r3, #0]
    RS_reset();
 8000206:	2390      	movs	r3, #144	; 0x90
 8000208:	05db      	lsls	r3, r3, #23
 800020a:	2290      	movs	r2, #144	; 0x90
 800020c:	05d2      	lsls	r2, r2, #23
 800020e:	6952      	ldr	r2, [r2, #20]
 8000210:	4959      	ldr	r1, [pc, #356]	; (8000378 <LCD_Command+0x17e>)
 8000212:	400a      	ands	r2, r1
 8000214:	615a      	str	r2, [r3, #20]
    if ((dt & 0x80) != 0) { D7_set();} else { D7_reset();}
 8000216:	1dfb      	adds	r3, r7, #7
 8000218:	781b      	ldrb	r3, [r3, #0]
 800021a:	b25b      	sxtb	r3, r3
 800021c:	2b00      	cmp	r3, #0
 800021e:	da07      	bge.n	8000230 <LCD_Command+0x36>
 8000220:	4b56      	ldr	r3, [pc, #344]	; (800037c <LCD_Command+0x182>)
 8000222:	4a56      	ldr	r2, [pc, #344]	; (800037c <LCD_Command+0x182>)
 8000224:	6952      	ldr	r2, [r2, #20]
 8000226:	2180      	movs	r1, #128	; 0x80
 8000228:	0209      	lsls	r1, r1, #8
 800022a:	430a      	orrs	r2, r1
 800022c:	615a      	str	r2, [r3, #20]
 800022e:	e005      	b.n	800023c <LCD_Command+0x42>
 8000230:	4b52      	ldr	r3, [pc, #328]	; (800037c <LCD_Command+0x182>)
 8000232:	4a52      	ldr	r2, [pc, #328]	; (800037c <LCD_Command+0x182>)
 8000234:	6952      	ldr	r2, [r2, #20]
 8000236:	4952      	ldr	r1, [pc, #328]	; (8000380 <LCD_Command+0x186>)
 8000238:	400a      	ands	r2, r1
 800023a:	615a      	str	r2, [r3, #20]
    if ((dt & 0x40) != 0) { D6_set();} else { D6_reset();}
 800023c:	1dfb      	adds	r3, r7, #7
 800023e:	781b      	ldrb	r3, [r3, #0]
 8000240:	2240      	movs	r2, #64	; 0x40
 8000242:	4013      	ands	r3, r2
 8000244:	d007      	beq.n	8000256 <LCD_Command+0x5c>
 8000246:	4b4d      	ldr	r3, [pc, #308]	; (800037c <LCD_Command+0x182>)
 8000248:	4a4c      	ldr	r2, [pc, #304]	; (800037c <LCD_Command+0x182>)
 800024a:	6952      	ldr	r2, [r2, #20]
 800024c:	2180      	movs	r1, #128	; 0x80
 800024e:	01c9      	lsls	r1, r1, #7
 8000250:	430a      	orrs	r2, r1
 8000252:	615a      	str	r2, [r3, #20]
 8000254:	e005      	b.n	8000262 <LCD_Command+0x68>
 8000256:	4b49      	ldr	r3, [pc, #292]	; (800037c <LCD_Command+0x182>)
 8000258:	4a48      	ldr	r2, [pc, #288]	; (800037c <LCD_Command+0x182>)
 800025a:	6952      	ldr	r2, [r2, #20]
 800025c:	4949      	ldr	r1, [pc, #292]	; (8000384 <LCD_Command+0x18a>)
 800025e:	400a      	ands	r2, r1
 8000260:	615a      	str	r2, [r3, #20]
    if ((dt & 0x20) != 0) { D5_set();} else { D5_reset();}
 8000262:	1dfb      	adds	r3, r7, #7
 8000264:	781b      	ldrb	r3, [r3, #0]
 8000266:	2220      	movs	r2, #32
 8000268:	4013      	ands	r3, r2
 800026a:	d007      	beq.n	800027c <LCD_Command+0x82>
 800026c:	4b43      	ldr	r3, [pc, #268]	; (800037c <LCD_Command+0x182>)
 800026e:	4a43      	ldr	r2, [pc, #268]	; (800037c <LCD_Command+0x182>)
 8000270:	6952      	ldr	r2, [r2, #20]
 8000272:	2180      	movs	r1, #128	; 0x80
 8000274:	0189      	lsls	r1, r1, #6
 8000276:	430a      	orrs	r2, r1
 8000278:	615a      	str	r2, [r3, #20]
 800027a:	e005      	b.n	8000288 <LCD_Command+0x8e>
 800027c:	4b3f      	ldr	r3, [pc, #252]	; (800037c <LCD_Command+0x182>)
 800027e:	4a3f      	ldr	r2, [pc, #252]	; (800037c <LCD_Command+0x182>)
 8000280:	6952      	ldr	r2, [r2, #20]
 8000282:	4941      	ldr	r1, [pc, #260]	; (8000388 <LCD_Command+0x18e>)
 8000284:	400a      	ands	r2, r1
 8000286:	615a      	str	r2, [r3, #20]
    if ((dt & 0x10) != 0) { D4_set();} else { D4_reset();}
 8000288:	1dfb      	adds	r3, r7, #7
 800028a:	781b      	ldrb	r3, [r3, #0]
 800028c:	2210      	movs	r2, #16
 800028e:	4013      	ands	r3, r2
 8000290:	d007      	beq.n	80002a2 <LCD_Command+0xa8>
 8000292:	4b3a      	ldr	r3, [pc, #232]	; (800037c <LCD_Command+0x182>)
 8000294:	4a39      	ldr	r2, [pc, #228]	; (800037c <LCD_Command+0x182>)
 8000296:	6952      	ldr	r2, [r2, #20]
 8000298:	2180      	movs	r1, #128	; 0x80
 800029a:	0149      	lsls	r1, r1, #5
 800029c:	430a      	orrs	r2, r1
 800029e:	615a      	str	r2, [r3, #20]
 80002a0:	e005      	b.n	80002ae <LCD_Command+0xb4>
 80002a2:	4b36      	ldr	r3, [pc, #216]	; (800037c <LCD_Command+0x182>)
 80002a4:	4a35      	ldr	r2, [pc, #212]	; (800037c <LCD_Command+0x182>)
 80002a6:	6952      	ldr	r2, [r2, #20]
 80002a8:	4938      	ldr	r1, [pc, #224]	; (800038c <LCD_Command+0x192>)
 80002aa:	400a      	ands	r2, r1
 80002ac:	615a      	str	r2, [r3, #20]
    if ((dt & 0x08) != 0) { D3_set();} else { D3_reset();}
 80002ae:	1dfb      	adds	r3, r7, #7
 80002b0:	781b      	ldrb	r3, [r3, #0]
 80002b2:	2208      	movs	r2, #8
 80002b4:	4013      	ands	r3, r2
 80002b6:	d007      	beq.n	80002c8 <LCD_Command+0xce>
 80002b8:	4b30      	ldr	r3, [pc, #192]	; (800037c <LCD_Command+0x182>)
 80002ba:	4a30      	ldr	r2, [pc, #192]	; (800037c <LCD_Command+0x182>)
 80002bc:	6952      	ldr	r2, [r2, #20]
 80002be:	2180      	movs	r1, #128	; 0x80
 80002c0:	0109      	lsls	r1, r1, #4
 80002c2:	430a      	orrs	r2, r1
 80002c4:	615a      	str	r2, [r3, #20]
 80002c6:	e005      	b.n	80002d4 <LCD_Command+0xda>
 80002c8:	4b2c      	ldr	r3, [pc, #176]	; (800037c <LCD_Command+0x182>)
 80002ca:	4a2c      	ldr	r2, [pc, #176]	; (800037c <LCD_Command+0x182>)
 80002cc:	6952      	ldr	r2, [r2, #20]
 80002ce:	4930      	ldr	r1, [pc, #192]	; (8000390 <LCD_Command+0x196>)
 80002d0:	400a      	ands	r2, r1
 80002d2:	615a      	str	r2, [r3, #20]
    if ((dt & 0x04) != 0) { D2_set();} else { D2_reset();}
 80002d4:	1dfb      	adds	r3, r7, #7
 80002d6:	781b      	ldrb	r3, [r3, #0]
 80002d8:	2204      	movs	r2, #4
 80002da:	4013      	ands	r3, r2
 80002dc:	d007      	beq.n	80002ee <LCD_Command+0xf4>
 80002de:	4b27      	ldr	r3, [pc, #156]	; (800037c <LCD_Command+0x182>)
 80002e0:	4a26      	ldr	r2, [pc, #152]	; (800037c <LCD_Command+0x182>)
 80002e2:	6952      	ldr	r2, [r2, #20]
 80002e4:	2180      	movs	r1, #128	; 0x80
 80002e6:	00c9      	lsls	r1, r1, #3
 80002e8:	430a      	orrs	r2, r1
 80002ea:	615a      	str	r2, [r3, #20]
 80002ec:	e005      	b.n	80002fa <LCD_Command+0x100>
 80002ee:	4b23      	ldr	r3, [pc, #140]	; (800037c <LCD_Command+0x182>)
 80002f0:	4a22      	ldr	r2, [pc, #136]	; (800037c <LCD_Command+0x182>)
 80002f2:	6952      	ldr	r2, [r2, #20]
 80002f4:	4927      	ldr	r1, [pc, #156]	; (8000394 <LCD_Command+0x19a>)
 80002f6:	400a      	ands	r2, r1
 80002f8:	615a      	str	r2, [r3, #20]
    if ((dt & 0x02) != 0) { D1_set();} else { D1_reset();}
 80002fa:	1dfb      	adds	r3, r7, #7
 80002fc:	781b      	ldrb	r3, [r3, #0]
 80002fe:	2202      	movs	r2, #2
 8000300:	4013      	ands	r3, r2
 8000302:	d007      	beq.n	8000314 <LCD_Command+0x11a>
 8000304:	4b1d      	ldr	r3, [pc, #116]	; (800037c <LCD_Command+0x182>)
 8000306:	4a1d      	ldr	r2, [pc, #116]	; (800037c <LCD_Command+0x182>)
 8000308:	6952      	ldr	r2, [r2, #20]
 800030a:	2180      	movs	r1, #128	; 0x80
 800030c:	0089      	lsls	r1, r1, #2
 800030e:	430a      	orrs	r2, r1
 8000310:	615a      	str	r2, [r3, #20]
 8000312:	e005      	b.n	8000320 <LCD_Command+0x126>
 8000314:	4b19      	ldr	r3, [pc, #100]	; (800037c <LCD_Command+0x182>)
 8000316:	4a19      	ldr	r2, [pc, #100]	; (800037c <LCD_Command+0x182>)
 8000318:	6952      	ldr	r2, [r2, #20]
 800031a:	4917      	ldr	r1, [pc, #92]	; (8000378 <LCD_Command+0x17e>)
 800031c:	400a      	ands	r2, r1
 800031e:	615a      	str	r2, [r3, #20]
    if ((dt & 0x01) != 0) { D0_set();} else { D0_reset();}
 8000320:	1dfb      	adds	r3, r7, #7
 8000322:	781b      	ldrb	r3, [r3, #0]
 8000324:	2201      	movs	r2, #1
 8000326:	4013      	ands	r3, r2
 8000328:	d007      	beq.n	800033a <LCD_Command+0x140>
 800032a:	4b14      	ldr	r3, [pc, #80]	; (800037c <LCD_Command+0x182>)
 800032c:	4a13      	ldr	r2, [pc, #76]	; (800037c <LCD_Command+0x182>)
 800032e:	6952      	ldr	r2, [r2, #20]
 8000330:	2180      	movs	r1, #128	; 0x80
 8000332:	0049      	lsls	r1, r1, #1
 8000334:	430a      	orrs	r2, r1
 8000336:	615a      	str	r2, [r3, #20]
 8000338:	e005      	b.n	8000346 <LCD_Command+0x14c>
 800033a:	4b10      	ldr	r3, [pc, #64]	; (800037c <LCD_Command+0x182>)
 800033c:	4a0f      	ldr	r2, [pc, #60]	; (800037c <LCD_Command+0x182>)
 800033e:	6952      	ldr	r2, [r2, #20]
 8000340:	4915      	ldr	r1, [pc, #84]	; (8000398 <LCD_Command+0x19e>)
 8000342:	400a      	ands	r2, r1
 8000344:	615a      	str	r2, [r3, #20]
    E_set();
 8000346:	2390      	movs	r3, #144	; 0x90
 8000348:	05db      	lsls	r3, r3, #23
 800034a:	2290      	movs	r2, #144	; 0x90
 800034c:	05d2      	lsls	r2, r2, #23
 800034e:	6952      	ldr	r2, [r2, #20]
 8000350:	2180      	movs	r1, #128	; 0x80
 8000352:	0109      	lsls	r1, r1, #4
 8000354:	430a      	orrs	r2, r1
 8000356:	615a      	str	r2, [r3, #20]
    delay_us(100);
 8000358:	2064      	movs	r0, #100	; 0x64
 800035a:	f7ff ff37 	bl	80001cc <delay_us>
    E_reset();
 800035e:	2390      	movs	r3, #144	; 0x90
 8000360:	05db      	lsls	r3, r3, #23
 8000362:	2290      	movs	r2, #144	; 0x90
 8000364:	05d2      	lsls	r2, r2, #23
 8000366:	6952      	ldr	r2, [r2, #20]
 8000368:	4909      	ldr	r1, [pc, #36]	; (8000390 <LCD_Command+0x196>)
 800036a:	400a      	ands	r2, r1
 800036c:	615a      	str	r2, [r3, #20]
}    
 800036e:	46c0      	nop			; (mov r8, r8)
 8000370:	46bd      	mov	sp, r7
 8000372:	b002      	add	sp, #8
 8000374:	bd80      	pop	{r7, pc}
 8000376:	46c0      	nop			; (mov r8, r8)
 8000378:	fffffdff 	.word	0xfffffdff
 800037c:	48000400 	.word	0x48000400
 8000380:	ffff7fff 	.word	0xffff7fff
 8000384:	ffffbfff 	.word	0xffffbfff
 8000388:	ffffdfff 	.word	0xffffdfff
 800038c:	ffffefff 	.word	0xffffefff
 8000390:	fffff7ff 	.word	0xfffff7ff
 8000394:	fffffbff 	.word	0xfffffbff
 8000398:	fffffeff 	.word	0xfffffeff

0800039c <LCD_WriteData>:
//----------------------------------------------
void LCD_WriteData(uint8_t dt)
{   
 800039c:	b580      	push	{r7, lr}
 800039e:	b082      	sub	sp, #8
 80003a0:	af00      	add	r7, sp, #0
 80003a2:	0002      	movs	r2, r0
 80003a4:	1dfb      	adds	r3, r7, #7
 80003a6:	701a      	strb	r2, [r3, #0]
    RS_set();
 80003a8:	2390      	movs	r3, #144	; 0x90
 80003aa:	05db      	lsls	r3, r3, #23
 80003ac:	2290      	movs	r2, #144	; 0x90
 80003ae:	05d2      	lsls	r2, r2, #23
 80003b0:	6952      	ldr	r2, [r2, #20]
 80003b2:	2180      	movs	r1, #128	; 0x80
 80003b4:	0089      	lsls	r1, r1, #2
 80003b6:	430a      	orrs	r2, r1
 80003b8:	615a      	str	r2, [r3, #20]
    if ((dt & 0x80) != 0) { D7_set();} else { D7_reset();}
 80003ba:	1dfb      	adds	r3, r7, #7
 80003bc:	781b      	ldrb	r3, [r3, #0]
 80003be:	b25b      	sxtb	r3, r3
 80003c0:	2b00      	cmp	r3, #0
 80003c2:	da07      	bge.n	80003d4 <LCD_WriteData+0x38>
 80003c4:	4b55      	ldr	r3, [pc, #340]	; (800051c <LCD_WriteData+0x180>)
 80003c6:	4a55      	ldr	r2, [pc, #340]	; (800051c <LCD_WriteData+0x180>)
 80003c8:	6952      	ldr	r2, [r2, #20]
 80003ca:	2180      	movs	r1, #128	; 0x80
 80003cc:	0209      	lsls	r1, r1, #8
 80003ce:	430a      	orrs	r2, r1
 80003d0:	615a      	str	r2, [r3, #20]
 80003d2:	e005      	b.n	80003e0 <LCD_WriteData+0x44>
 80003d4:	4b51      	ldr	r3, [pc, #324]	; (800051c <LCD_WriteData+0x180>)
 80003d6:	4a51      	ldr	r2, [pc, #324]	; (800051c <LCD_WriteData+0x180>)
 80003d8:	6952      	ldr	r2, [r2, #20]
 80003da:	4951      	ldr	r1, [pc, #324]	; (8000520 <LCD_WriteData+0x184>)
 80003dc:	400a      	ands	r2, r1
 80003de:	615a      	str	r2, [r3, #20]
    if ((dt & 0x40) != 0) { D6_set();} else { D6_reset();}
 80003e0:	1dfb      	adds	r3, r7, #7
 80003e2:	781b      	ldrb	r3, [r3, #0]
 80003e4:	2240      	movs	r2, #64	; 0x40
 80003e6:	4013      	ands	r3, r2
 80003e8:	d007      	beq.n	80003fa <LCD_WriteData+0x5e>
 80003ea:	4b4c      	ldr	r3, [pc, #304]	; (800051c <LCD_WriteData+0x180>)
 80003ec:	4a4b      	ldr	r2, [pc, #300]	; (800051c <LCD_WriteData+0x180>)
 80003ee:	6952      	ldr	r2, [r2, #20]
 80003f0:	2180      	movs	r1, #128	; 0x80
 80003f2:	01c9      	lsls	r1, r1, #7
 80003f4:	430a      	orrs	r2, r1
 80003f6:	615a      	str	r2, [r3, #20]
 80003f8:	e005      	b.n	8000406 <LCD_WriteData+0x6a>
 80003fa:	4b48      	ldr	r3, [pc, #288]	; (800051c <LCD_WriteData+0x180>)
 80003fc:	4a47      	ldr	r2, [pc, #284]	; (800051c <LCD_WriteData+0x180>)
 80003fe:	6952      	ldr	r2, [r2, #20]
 8000400:	4948      	ldr	r1, [pc, #288]	; (8000524 <LCD_WriteData+0x188>)
 8000402:	400a      	ands	r2, r1
 8000404:	615a      	str	r2, [r3, #20]
    if ((dt & 0x20) != 0) { D5_set();} else { D5_reset();}
 8000406:	1dfb      	adds	r3, r7, #7
 8000408:	781b      	ldrb	r3, [r3, #0]
 800040a:	2220      	movs	r2, #32
 800040c:	4013      	ands	r3, r2
 800040e:	d007      	beq.n	8000420 <LCD_WriteData+0x84>
 8000410:	4b42      	ldr	r3, [pc, #264]	; (800051c <LCD_WriteData+0x180>)
 8000412:	4a42      	ldr	r2, [pc, #264]	; (800051c <LCD_WriteData+0x180>)
 8000414:	6952      	ldr	r2, [r2, #20]
 8000416:	2180      	movs	r1, #128	; 0x80
 8000418:	0189      	lsls	r1, r1, #6
 800041a:	430a      	orrs	r2, r1
 800041c:	615a      	str	r2, [r3, #20]
 800041e:	e005      	b.n	800042c <LCD_WriteData+0x90>
 8000420:	4b3e      	ldr	r3, [pc, #248]	; (800051c <LCD_WriteData+0x180>)
 8000422:	4a3e      	ldr	r2, [pc, #248]	; (800051c <LCD_WriteData+0x180>)
 8000424:	6952      	ldr	r2, [r2, #20]
 8000426:	4940      	ldr	r1, [pc, #256]	; (8000528 <LCD_WriteData+0x18c>)
 8000428:	400a      	ands	r2, r1
 800042a:	615a      	str	r2, [r3, #20]
    if ((dt & 0x10) != 0) { D4_set();} else { D4_reset();}
 800042c:	1dfb      	adds	r3, r7, #7
 800042e:	781b      	ldrb	r3, [r3, #0]
 8000430:	2210      	movs	r2, #16
 8000432:	4013      	ands	r3, r2
 8000434:	d007      	beq.n	8000446 <LCD_WriteData+0xaa>
 8000436:	4b39      	ldr	r3, [pc, #228]	; (800051c <LCD_WriteData+0x180>)
 8000438:	4a38      	ldr	r2, [pc, #224]	; (800051c <LCD_WriteData+0x180>)
 800043a:	6952      	ldr	r2, [r2, #20]
 800043c:	2180      	movs	r1, #128	; 0x80
 800043e:	0149      	lsls	r1, r1, #5
 8000440:	430a      	orrs	r2, r1
 8000442:	615a      	str	r2, [r3, #20]
 8000444:	e005      	b.n	8000452 <LCD_WriteData+0xb6>
 8000446:	4b35      	ldr	r3, [pc, #212]	; (800051c <LCD_WriteData+0x180>)
 8000448:	4a34      	ldr	r2, [pc, #208]	; (800051c <LCD_WriteData+0x180>)
 800044a:	6952      	ldr	r2, [r2, #20]
 800044c:	4937      	ldr	r1, [pc, #220]	; (800052c <LCD_WriteData+0x190>)
 800044e:	400a      	ands	r2, r1
 8000450:	615a      	str	r2, [r3, #20]
    if ((dt & 0x08) != 0) { D3_set();} else { D3_reset();}
 8000452:	1dfb      	adds	r3, r7, #7
 8000454:	781b      	ldrb	r3, [r3, #0]
 8000456:	2208      	movs	r2, #8
 8000458:	4013      	ands	r3, r2
 800045a:	d007      	beq.n	800046c <LCD_WriteData+0xd0>
 800045c:	4b2f      	ldr	r3, [pc, #188]	; (800051c <LCD_WriteData+0x180>)
 800045e:	4a2f      	ldr	r2, [pc, #188]	; (800051c <LCD_WriteData+0x180>)
 8000460:	6952      	ldr	r2, [r2, #20]
 8000462:	2180      	movs	r1, #128	; 0x80
 8000464:	0109      	lsls	r1, r1, #4
 8000466:	430a      	orrs	r2, r1
 8000468:	615a      	str	r2, [r3, #20]
 800046a:	e005      	b.n	8000478 <LCD_WriteData+0xdc>
 800046c:	4b2b      	ldr	r3, [pc, #172]	; (800051c <LCD_WriteData+0x180>)
 800046e:	4a2b      	ldr	r2, [pc, #172]	; (800051c <LCD_WriteData+0x180>)
 8000470:	6952      	ldr	r2, [r2, #20]
 8000472:	492f      	ldr	r1, [pc, #188]	; (8000530 <LCD_WriteData+0x194>)
 8000474:	400a      	ands	r2, r1
 8000476:	615a      	str	r2, [r3, #20]
    if ((dt & 0x04) != 0) { D2_set();} else { D2_reset();}
 8000478:	1dfb      	adds	r3, r7, #7
 800047a:	781b      	ldrb	r3, [r3, #0]
 800047c:	2204      	movs	r2, #4
 800047e:	4013      	ands	r3, r2
 8000480:	d007      	beq.n	8000492 <LCD_WriteData+0xf6>
 8000482:	4b26      	ldr	r3, [pc, #152]	; (800051c <LCD_WriteData+0x180>)
 8000484:	4a25      	ldr	r2, [pc, #148]	; (800051c <LCD_WriteData+0x180>)
 8000486:	6952      	ldr	r2, [r2, #20]
 8000488:	2180      	movs	r1, #128	; 0x80
 800048a:	00c9      	lsls	r1, r1, #3
 800048c:	430a      	orrs	r2, r1
 800048e:	615a      	str	r2, [r3, #20]
 8000490:	e005      	b.n	800049e <LCD_WriteData+0x102>
 8000492:	4b22      	ldr	r3, [pc, #136]	; (800051c <LCD_WriteData+0x180>)
 8000494:	4a21      	ldr	r2, [pc, #132]	; (800051c <LCD_WriteData+0x180>)
 8000496:	6952      	ldr	r2, [r2, #20]
 8000498:	4926      	ldr	r1, [pc, #152]	; (8000534 <LCD_WriteData+0x198>)
 800049a:	400a      	ands	r2, r1
 800049c:	615a      	str	r2, [r3, #20]
    if ((dt & 0x02) != 0) { D1_set();} else { D1_reset();}
 800049e:	1dfb      	adds	r3, r7, #7
 80004a0:	781b      	ldrb	r3, [r3, #0]
 80004a2:	2202      	movs	r2, #2
 80004a4:	4013      	ands	r3, r2
 80004a6:	d007      	beq.n	80004b8 <LCD_WriteData+0x11c>
 80004a8:	4b1c      	ldr	r3, [pc, #112]	; (800051c <LCD_WriteData+0x180>)
 80004aa:	4a1c      	ldr	r2, [pc, #112]	; (800051c <LCD_WriteData+0x180>)
 80004ac:	6952      	ldr	r2, [r2, #20]
 80004ae:	2180      	movs	r1, #128	; 0x80
 80004b0:	0089      	lsls	r1, r1, #2
 80004b2:	430a      	orrs	r2, r1
 80004b4:	615a      	str	r2, [r3, #20]
 80004b6:	e005      	b.n	80004c4 <LCD_WriteData+0x128>
 80004b8:	4b18      	ldr	r3, [pc, #96]	; (800051c <LCD_WriteData+0x180>)
 80004ba:	4a18      	ldr	r2, [pc, #96]	; (800051c <LCD_WriteData+0x180>)
 80004bc:	6952      	ldr	r2, [r2, #20]
 80004be:	491e      	ldr	r1, [pc, #120]	; (8000538 <LCD_WriteData+0x19c>)
 80004c0:	400a      	ands	r2, r1
 80004c2:	615a      	str	r2, [r3, #20]
    if ((dt & 0x01) != 0) { D0_set();} else { D0_reset();}
 80004c4:	1dfb      	adds	r3, r7, #7
 80004c6:	781b      	ldrb	r3, [r3, #0]
 80004c8:	2201      	movs	r2, #1
 80004ca:	4013      	ands	r3, r2
 80004cc:	d007      	beq.n	80004de <LCD_WriteData+0x142>
 80004ce:	4b13      	ldr	r3, [pc, #76]	; (800051c <LCD_WriteData+0x180>)
 80004d0:	4a12      	ldr	r2, [pc, #72]	; (800051c <LCD_WriteData+0x180>)
 80004d2:	6952      	ldr	r2, [r2, #20]
 80004d4:	2180      	movs	r1, #128	; 0x80
 80004d6:	0049      	lsls	r1, r1, #1
 80004d8:	430a      	orrs	r2, r1
 80004da:	615a      	str	r2, [r3, #20]
 80004dc:	e005      	b.n	80004ea <LCD_WriteData+0x14e>
 80004de:	4b0f      	ldr	r3, [pc, #60]	; (800051c <LCD_WriteData+0x180>)
 80004e0:	4a0e      	ldr	r2, [pc, #56]	; (800051c <LCD_WriteData+0x180>)
 80004e2:	6952      	ldr	r2, [r2, #20]
 80004e4:	4915      	ldr	r1, [pc, #84]	; (800053c <LCD_WriteData+0x1a0>)
 80004e6:	400a      	ands	r2, r1
 80004e8:	615a      	str	r2, [r3, #20]
    E_set();
 80004ea:	2390      	movs	r3, #144	; 0x90
 80004ec:	05db      	lsls	r3, r3, #23
 80004ee:	2290      	movs	r2, #144	; 0x90
 80004f0:	05d2      	lsls	r2, r2, #23
 80004f2:	6952      	ldr	r2, [r2, #20]
 80004f4:	2180      	movs	r1, #128	; 0x80
 80004f6:	0109      	lsls	r1, r1, #4
 80004f8:	430a      	orrs	r2, r1
 80004fa:	615a      	str	r2, [r3, #20]
    delay_us(100);
 80004fc:	2064      	movs	r0, #100	; 0x64
 80004fe:	f7ff fe65 	bl	80001cc <delay_us>
    E_reset();
 8000502:	2390      	movs	r3, #144	; 0x90
 8000504:	05db      	lsls	r3, r3, #23
 8000506:	2290      	movs	r2, #144	; 0x90
 8000508:	05d2      	lsls	r2, r2, #23
 800050a:	6952      	ldr	r2, [r2, #20]
 800050c:	4908      	ldr	r1, [pc, #32]	; (8000530 <LCD_WriteData+0x194>)
 800050e:	400a      	ands	r2, r1
 8000510:	615a      	str	r2, [r3, #20]
}    
 8000512:	46c0      	nop			; (mov r8, r8)
 8000514:	46bd      	mov	sp, r7
 8000516:	b002      	add	sp, #8
 8000518:	bd80      	pop	{r7, pc}
 800051a:	46c0      	nop			; (mov r8, r8)
 800051c:	48000400 	.word	0x48000400
 8000520:	ffff7fff 	.word	0xffff7fff
 8000524:	ffffbfff 	.word	0xffffbfff
 8000528:	ffffdfff 	.word	0xffffdfff
 800052c:	ffffefff 	.word	0xffffefff
 8000530:	fffff7ff 	.word	0xfffff7ff
 8000534:	fffffbff 	.word	0xfffffbff
 8000538:	fffffdff 	.word	0xfffffdff
 800053c:	fffffeff 	.word	0xfffffeff

08000540 <LCD_Init>:
//----------------------------------------------
void LCD_Init(void)
{        
 8000540:	b580      	push	{r7, lr}
 8000542:	af00      	add	r7, sp, #0
    delay_us(40000);
 8000544:	4b23      	ldr	r3, [pc, #140]	; (80005d4 <LCD_Init+0x94>)
 8000546:	0018      	movs	r0, r3
 8000548:	f7ff fe40 	bl	80001cc <delay_us>
    LCD_Command(0x30); //8bit
 800054c:	2030      	movs	r0, #48	; 0x30
 800054e:	f7ff fe54 	bl	80001fa <LCD_Command>
    delay_us(1000);
 8000552:	23fa      	movs	r3, #250	; 0xfa
 8000554:	009b      	lsls	r3, r3, #2
 8000556:	0018      	movs	r0, r3
 8000558:	f7ff fe38 	bl	80001cc <delay_us>
    LCD_Command(0x30); //8бит
 800055c:	2030      	movs	r0, #48	; 0x30
 800055e:	f7ff fe4c 	bl	80001fa <LCD_Command>
    delay_us(1000);
 8000562:	23fa      	movs	r3, #250	; 0xfa
 8000564:	009b      	lsls	r3, r3, #2
 8000566:	0018      	movs	r0, r3
 8000568:	f7ff fe30 	bl	80001cc <delay_us>
    LCD_Command(0x30);
 800056c:	2030      	movs	r0, #48	; 0x30
 800056e:	f7ff fe44 	bl	80001fa <LCD_Command>
    delay_us(1000);
 8000572:	23fa      	movs	r3, #250	; 0xfa
 8000574:	009b      	lsls	r3, r3, #2
 8000576:	0018      	movs	r0, r3
 8000578:	f7ff fe28 	bl	80001cc <delay_us>
    LCD_Command(0x38); //Режим  0011(8бит) 1(4линии)0(5х8)00 
 800057c:	2038      	movs	r0, #56	; 0x38
 800057e:	f7ff fe3c 	bl	80001fa <LCD_Command>
		delay_us(1000);
 8000582:	23fa      	movs	r3, #250	; 0xfa
 8000584:	009b      	lsls	r3, r3, #2
 8000586:	0018      	movs	r0, r3
 8000588:	f7ff fe20 	bl	80001cc <delay_us>
    LCD_Command(0x38); //Режим  0011(8бит) 1(4линии)0(5х8)00 
 800058c:	2038      	movs	r0, #56	; 0x38
 800058e:	f7ff fe34 	bl	80001fa <LCD_Command>
    delay_us(1000);
 8000592:	23fa      	movs	r3, #250	; 0xfa
 8000594:	009b      	lsls	r3, r3, #2
 8000596:	0018      	movs	r0, r3
 8000598:	f7ff fe18 	bl	80001cc <delay_us>
    LCD_Command(0x0F); //Режим мигания  с курсором
 800059c:	200f      	movs	r0, #15
 800059e:	f7ff fe2c 	bl	80001fa <LCD_Command>
    delay_us(1000);
 80005a2:	23fa      	movs	r3, #250	; 0xfa
 80005a4:	009b      	lsls	r3, r3, #2
 80005a6:	0018      	movs	r0, r3
 80005a8:	f7ff fe10 	bl	80001cc <delay_us>
    LCD_Command(0x01); //Очистка дисплея  
 80005ac:	2001      	movs	r0, #1
 80005ae:	f7ff fe24 	bl	80001fa <LCD_Command>
    delay_us(2000);
 80005b2:	23fa      	movs	r3, #250	; 0xfa
 80005b4:	00db      	lsls	r3, r3, #3
 80005b6:	0018      	movs	r0, r3
 80005b8:	f7ff fe08 	bl	80001cc <delay_us>
    LCD_Command(0x06); //Пишем влево  
 80005bc:	2006      	movs	r0, #6
 80005be:	f7ff fe1c 	bl	80001fa <LCD_Command>
    delay_us(2000);
 80005c2:	23fa      	movs	r3, #250	; 0xfa
 80005c4:	00db      	lsls	r3, r3, #3
 80005c6:	0018      	movs	r0, r3
 80005c8:	f7ff fe00 	bl	80001cc <delay_us>
}    
 80005cc:	46c0      	nop			; (mov r8, r8)
 80005ce:	46bd      	mov	sp, r7
 80005d0:	bd80      	pop	{r7, pc}
 80005d2:	46c0      	nop			; (mov r8, r8)
 80005d4:	00009c40 	.word	0x00009c40

080005d8 <LCD_Clear>:
//----------------------------------------------
void LCD_Clear(void) 
{   
 80005d8:	b580      	push	{r7, lr}
 80005da:	af00      	add	r7, sp, #0
    LCD_Command(0x01);
 80005dc:	2001      	movs	r0, #1
 80005de:	f7ff fe0c 	bl	80001fa <LCD_Command>
    delay_us(2000);
 80005e2:	23fa      	movs	r3, #250	; 0xfa
 80005e4:	00db      	lsls	r3, r3, #3
 80005e6:	0018      	movs	r0, r3
 80005e8:	f7ff fdf0 	bl	80001cc <delay_us>
}    
 80005ec:	46c0      	nop			; (mov r8, r8)
 80005ee:	46bd      	mov	sp, r7
 80005f0:	bd80      	pop	{r7, pc}

080005f2 <LCD_SetPos>:
//----------------------------------------------
void LCD_SetPos(uint8_t x, uint8_t y) //Установка позиции курсора y-строка
{   
 80005f2:	b580      	push	{r7, lr}
 80005f4:	b082      	sub	sp, #8
 80005f6:	af00      	add	r7, sp, #0
 80005f8:	0002      	movs	r2, r0
 80005fa:	1dfb      	adds	r3, r7, #7
 80005fc:	701a      	strb	r2, [r3, #0]
 80005fe:	1dbb      	adds	r3, r7, #6
 8000600:	1c0a      	adds	r2, r1, #0
 8000602:	701a      	strb	r2, [r3, #0]
    switch(y)
 8000604:	1dbb      	adds	r3, r7, #6
 8000606:	781b      	ldrb	r3, [r3, #0]
 8000608:	2b01      	cmp	r3, #1
 800060a:	d015      	beq.n	8000638 <LCD_SetPos+0x46>
 800060c:	dc02      	bgt.n	8000614 <LCD_SetPos+0x22>
 800060e:	2b00      	cmp	r3, #0
 8000610:	d005      	beq.n	800061e <LCD_SetPos+0x2c>
        case 3:
            LCD_Command((0x54+ x)|0x80);
            delay_us(50); //min 39us
            break;        
    }
}    
 8000612:	e044      	b.n	800069e <LCD_SetPos+0xac>
    switch(y)
 8000614:	2b02      	cmp	r3, #2
 8000616:	d020      	beq.n	800065a <LCD_SetPos+0x68>
 8000618:	2b03      	cmp	r3, #3
 800061a:	d02f      	beq.n	800067c <LCD_SetPos+0x8a>
}    
 800061c:	e03f      	b.n	800069e <LCD_SetPos+0xac>
            LCD_Command(x|0x80);
 800061e:	1dfb      	adds	r3, r7, #7
 8000620:	781b      	ldrb	r3, [r3, #0]
 8000622:	2280      	movs	r2, #128	; 0x80
 8000624:	4252      	negs	r2, r2
 8000626:	4313      	orrs	r3, r2
 8000628:	b2db      	uxtb	r3, r3
 800062a:	0018      	movs	r0, r3
 800062c:	f7ff fde5 	bl	80001fa <LCD_Command>
            delay_us(50); //min 39us
 8000630:	2032      	movs	r0, #50	; 0x32
 8000632:	f7ff fdcb 	bl	80001cc <delay_us>
            break;
 8000636:	e032      	b.n	800069e <LCD_SetPos+0xac>
            LCD_Command((0x40+ x) |0x80);
 8000638:	1dfb      	adds	r3, r7, #7
 800063a:	781b      	ldrb	r3, [r3, #0]
 800063c:	3340      	adds	r3, #64	; 0x40
 800063e:	b2db      	uxtb	r3, r3
 8000640:	b25b      	sxtb	r3, r3
 8000642:	2280      	movs	r2, #128	; 0x80
 8000644:	4252      	negs	r2, r2
 8000646:	4313      	orrs	r3, r2
 8000648:	b25b      	sxtb	r3, r3
 800064a:	b2db      	uxtb	r3, r3
 800064c:	0018      	movs	r0, r3
 800064e:	f7ff fdd4 	bl	80001fa <LCD_Command>
            delay_us(50); //min 39us
 8000652:	2032      	movs	r0, #50	; 0x32
 8000654:	f7ff fdba 	bl	80001cc <delay_us>
            break;
 8000658:	e021      	b.n	800069e <LCD_SetPos+0xac>
            LCD_Command((0x14+ x)|0x80);
 800065a:	1dfb      	adds	r3, r7, #7
 800065c:	781b      	ldrb	r3, [r3, #0]
 800065e:	3314      	adds	r3, #20
 8000660:	b2db      	uxtb	r3, r3
 8000662:	b25b      	sxtb	r3, r3
 8000664:	2280      	movs	r2, #128	; 0x80
 8000666:	4252      	negs	r2, r2
 8000668:	4313      	orrs	r3, r2
 800066a:	b25b      	sxtb	r3, r3
 800066c:	b2db      	uxtb	r3, r3
 800066e:	0018      	movs	r0, r3
 8000670:	f7ff fdc3 	bl	80001fa <LCD_Command>
            delay_us(50); //min 39us
 8000674:	2032      	movs	r0, #50	; 0x32
 8000676:	f7ff fda9 	bl	80001cc <delay_us>
            break;
 800067a:	e010      	b.n	800069e <LCD_SetPos+0xac>
            LCD_Command((0x54+ x)|0x80);
 800067c:	1dfb      	adds	r3, r7, #7
 800067e:	781b      	ldrb	r3, [r3, #0]
 8000680:	3354      	adds	r3, #84	; 0x54
 8000682:	b2db      	uxtb	r3, r3
 8000684:	b25b      	sxtb	r3, r3
 8000686:	2280      	movs	r2, #128	; 0x80
 8000688:	4252      	negs	r2, r2
 800068a:	4313      	orrs	r3, r2
 800068c:	b25b      	sxtb	r3, r3
 800068e:	b2db      	uxtb	r3, r3
 8000690:	0018      	movs	r0, r3
 8000692:	f7ff fdb2 	bl	80001fa <LCD_Command>
            delay_us(50); //min 39us
 8000696:	2032      	movs	r0, #50	; 0x32
 8000698:	f7ff fd98 	bl	80001cc <delay_us>
            break;        
 800069c:	46c0      	nop			; (mov r8, r8)
}    
 800069e:	46c0      	nop			; (mov r8, r8)
 80006a0:	46bd      	mov	sp, r7
 80006a2:	b002      	add	sp, #8
 80006a4:	bd80      	pop	{r7, pc}

080006a6 <LCD_SendChar>:
//----------------------------------------------
void LCD_SendChar(char ch)
{   
 80006a6:	b580      	push	{r7, lr}
 80006a8:	b082      	sub	sp, #8
 80006aa:	af00      	add	r7, sp, #0
 80006ac:	0002      	movs	r2, r0
 80006ae:	1dfb      	adds	r3, r7, #7
 80006b0:	701a      	strb	r2, [r3, #0]
    LCD_WriteData((uint8_t) ch);
 80006b2:	1dfb      	adds	r3, r7, #7
 80006b4:	781b      	ldrb	r3, [r3, #0]
 80006b6:	0018      	movs	r0, r3
 80006b8:	f7ff fe70 	bl	800039c <LCD_WriteData>
    delay_us(100); 
 80006bc:	2064      	movs	r0, #100	; 0x64
 80006be:	f7ff fd85 	bl	80001cc <delay_us>
}    
 80006c2:	46c0      	nop			; (mov r8, r8)
 80006c4:	46bd      	mov	sp, r7
 80006c6:	b002      	add	sp, #8
 80006c8:	bd80      	pop	{r7, pc}

080006ca <LCD_Print>:
//----------------------------------------------
void LCD_Print(char* str)
{   
 80006ca:	b580      	push	{r7, lr}
 80006cc:	b084      	sub	sp, #16
 80006ce:	af00      	add	r7, sp, #0
 80006d0:	6078      	str	r0, [r7, #4]
    uint8_t i = 0;
 80006d2:	230f      	movs	r3, #15
 80006d4:	18fb      	adds	r3, r7, r3
 80006d6:	2200      	movs	r2, #0
 80006d8:	701a      	strb	r2, [r3, #0]
    while(str[i]!=0)
 80006da:	e012      	b.n	8000702 <LCD_Print+0x38>
    {
        LCD_WriteData(str[i]);
 80006dc:	230f      	movs	r3, #15
 80006de:	18fb      	adds	r3, r7, r3
 80006e0:	781b      	ldrb	r3, [r3, #0]
 80006e2:	687a      	ldr	r2, [r7, #4]
 80006e4:	18d3      	adds	r3, r2, r3
 80006e6:	781b      	ldrb	r3, [r3, #0]
 80006e8:	0018      	movs	r0, r3
 80006ea:	f7ff fe57 	bl	800039c <LCD_WriteData>
        delay_us(100);
 80006ee:	2064      	movs	r0, #100	; 0x64
 80006f0:	f7ff fd6c 	bl	80001cc <delay_us>
        i++;
 80006f4:	230f      	movs	r3, #15
 80006f6:	18fb      	adds	r3, r7, r3
 80006f8:	781a      	ldrb	r2, [r3, #0]
 80006fa:	230f      	movs	r3, #15
 80006fc:	18fb      	adds	r3, r7, r3
 80006fe:	3201      	adds	r2, #1
 8000700:	701a      	strb	r2, [r3, #0]
    while(str[i]!=0)
 8000702:	230f      	movs	r3, #15
 8000704:	18fb      	adds	r3, r7, r3
 8000706:	781b      	ldrb	r3, [r3, #0]
 8000708:	687a      	ldr	r2, [r7, #4]
 800070a:	18d3      	adds	r3, r2, r3
 800070c:	781b      	ldrb	r3, [r3, #0]
 800070e:	2b00      	cmp	r3, #0
 8000710:	d1e4      	bne.n	80006dc <LCD_Print+0x12>
    }
}    
 8000712:	46c0      	nop			; (mov r8, r8)
 8000714:	46bd      	mov	sp, r7
 8000716:	b004      	add	sp, #16
 8000718:	bd80      	pop	{r7, pc}

0800071a <LCD_SetTCur>:
//----------------------------------------------
void LCD_SetTCur(uint8_t t ) //Установка типа курсора
{   
 800071a:	b580      	push	{r7, lr}
 800071c:	b082      	sub	sp, #8
 800071e:	af00      	add	r7, sp, #0
 8000720:	0002      	movs	r2, r0
 8000722:	1dfb      	adds	r3, r7, #7
 8000724:	701a      	strb	r2, [r3, #0]
    switch(t)
 8000726:	1dfb      	adds	r3, r7, #7
 8000728:	781b      	ldrb	r3, [r3, #0]
 800072a:	2b01      	cmp	r3, #1
 800072c:	d011      	beq.n	8000752 <LCD_SetTCur+0x38>
 800072e:	dc02      	bgt.n	8000736 <LCD_SetTCur+0x1c>
 8000730:	2b00      	cmp	r3, #0
 8000732:	d005      	beq.n	8000740 <LCD_SetTCur+0x26>
        case 3:
            LCD_Command(0x0F); //Мигающий черный квадрат+подчеркивание
            delay_us(2000);
            break;
    }    
}    
 8000734:	e028      	b.n	8000788 <LCD_SetTCur+0x6e>
    switch(t)
 8000736:	2b02      	cmp	r3, #2
 8000738:	d014      	beq.n	8000764 <LCD_SetTCur+0x4a>
 800073a:	2b03      	cmp	r3, #3
 800073c:	d01b      	beq.n	8000776 <LCD_SetTCur+0x5c>
}    
 800073e:	e023      	b.n	8000788 <LCD_SetTCur+0x6e>
            LCD_Command(0x0C); //Отсутствие курсора
 8000740:	200c      	movs	r0, #12
 8000742:	f7ff fd5a 	bl	80001fa <LCD_Command>
            delay_us(2000);
 8000746:	23fa      	movs	r3, #250	; 0xfa
 8000748:	00db      	lsls	r3, r3, #3
 800074a:	0018      	movs	r0, r3
 800074c:	f7ff fd3e 	bl	80001cc <delay_us>
            break;
 8000750:	e01a      	b.n	8000788 <LCD_SetTCur+0x6e>
            LCD_Command(0x0D); //Немигающий курсор
 8000752:	200d      	movs	r0, #13
 8000754:	f7ff fd51 	bl	80001fa <LCD_Command>
            delay_us(2000);
 8000758:	23fa      	movs	r3, #250	; 0xfa
 800075a:	00db      	lsls	r3, r3, #3
 800075c:	0018      	movs	r0, r3
 800075e:	f7ff fd35 	bl	80001cc <delay_us>
            break;
 8000762:	e011      	b.n	8000788 <LCD_SetTCur+0x6e>
            LCD_Command(0x0E); //Мигающий черный квадрат
 8000764:	200e      	movs	r0, #14
 8000766:	f7ff fd48 	bl	80001fa <LCD_Command>
            delay_us(2000);
 800076a:	23fa      	movs	r3, #250	; 0xfa
 800076c:	00db      	lsls	r3, r3, #3
 800076e:	0018      	movs	r0, r3
 8000770:	f7ff fd2c 	bl	80001cc <delay_us>
            break;
 8000774:	e008      	b.n	8000788 <LCD_SetTCur+0x6e>
            LCD_Command(0x0F); //Мигающий черный квадрат+подчеркивание
 8000776:	200f      	movs	r0, #15
 8000778:	f7ff fd3f 	bl	80001fa <LCD_Command>
            delay_us(2000);
 800077c:	23fa      	movs	r3, #250	; 0xfa
 800077e:	00db      	lsls	r3, r3, #3
 8000780:	0018      	movs	r0, r3
 8000782:	f7ff fd23 	bl	80001cc <delay_us>
            break;
 8000786:	46c0      	nop			; (mov r8, r8)
}    
 8000788:	46c0      	nop			; (mov r8, r8)
 800078a:	46bd      	mov	sp, r7
 800078c:	b002      	add	sp, #8
 800078e:	bd80      	pop	{r7, pc}

08000790 <LCD_SetLight>:
//----------------------------------------------
void LCD_SetLight(uint8_t lt) //Установка яркости (0-100%)
{   
 8000790:	b580      	push	{r7, lr}
 8000792:	b082      	sub	sp, #8
 8000794:	af00      	add	r7, sp, #0
 8000796:	0002      	movs	r2, r0
 8000798:	1dfb      	adds	r3, r7, #7
 800079a:	701a      	strb	r2, [r3, #0]
    TIM1->CCR1 = lt; 
 800079c:	4b03      	ldr	r3, [pc, #12]	; (80007ac <LCD_SetLight+0x1c>)
 800079e:	1dfa      	adds	r2, r7, #7
 80007a0:	7812      	ldrb	r2, [r2, #0]
 80007a2:	635a      	str	r2, [r3, #52]	; 0x34
}    
 80007a4:	46c0      	nop			; (mov r8, r8)
 80007a6:	46bd      	mov	sp, r7
 80007a8:	b002      	add	sp, #8
 80007aa:	bd80      	pop	{r7, pc}
 80007ac:	40012c00 	.word	0x40012c00

080007b0 <LCD_PrintASCII>:
   0xC7        //код 0xFF, символ 'я'
};
//----------------------------------------------

void LCD_PrintASCII(uint8_t* str)
{
 80007b0:	b580      	push	{r7, lr}
 80007b2:	b084      	sub	sp, #16
 80007b4:	af00      	add	r7, sp, #0
 80007b6:	6078      	str	r0, [r7, #4]
    uint8_t i = 0;
 80007b8:	230f      	movs	r3, #15
 80007ba:	18fb      	adds	r3, r7, r3
 80007bc:	2200      	movs	r2, #0
 80007be:	701a      	strb	r2, [r3, #0]
    while(str[i]!=0)
 80007c0:	e057      	b.n	8000872 <LCD_PrintASCII+0xc2>
    {
        if ( ((str[i]) == (0xA8)) || ( ( str[i]) == (0xB8))) 
 80007c2:	230f      	movs	r3, #15
 80007c4:	18fb      	adds	r3, r7, r3
 80007c6:	781b      	ldrb	r3, [r3, #0]
 80007c8:	687a      	ldr	r2, [r7, #4]
 80007ca:	18d3      	adds	r3, r2, r3
 80007cc:	781b      	ldrb	r3, [r3, #0]
 80007ce:	2ba8      	cmp	r3, #168	; 0xa8
 80007d0:	d007      	beq.n	80007e2 <LCD_PrintASCII+0x32>
 80007d2:	230f      	movs	r3, #15
 80007d4:	18fb      	adds	r3, r7, r3
 80007d6:	781b      	ldrb	r3, [r3, #0]
 80007d8:	687a      	ldr	r2, [r7, #4]
 80007da:	18d3      	adds	r3, r2, r3
 80007dc:	781b      	ldrb	r3, [r3, #0]
 80007de:	2bb8      	cmp	r3, #184	; 0xb8
 80007e0:	d11c      	bne.n	800081c <LCD_PrintASCII+0x6c>
        {
            if ((str[i]) == (0xA8))
 80007e2:	230f      	movs	r3, #15
 80007e4:	18fb      	adds	r3, r7, r3
 80007e6:	781b      	ldrb	r3, [r3, #0]
 80007e8:	687a      	ldr	r2, [r7, #4]
 80007ea:	18d3      	adds	r3, r2, r3
 80007ec:	781b      	ldrb	r3, [r3, #0]
 80007ee:	2ba8      	cmp	r3, #168	; 0xa8
 80007f0:	d105      	bne.n	80007fe <LCD_PrintASCII+0x4e>
            {
                LCD_WriteData(0xA2);
 80007f2:	20a2      	movs	r0, #162	; 0xa2
 80007f4:	f7ff fdd2 	bl	800039c <LCD_WriteData>
                delay_us(100);
 80007f8:	2064      	movs	r0, #100	; 0x64
 80007fa:	f7ff fce7 	bl	80001cc <delay_us>
            }
            if ((str[i]) == (0xB8))
 80007fe:	230f      	movs	r3, #15
 8000800:	18fb      	adds	r3, r7, r3
 8000802:	781b      	ldrb	r3, [r3, #0]
 8000804:	687a      	ldr	r2, [r7, #4]
 8000806:	18d3      	adds	r3, r2, r3
 8000808:	781b      	ldrb	r3, [r3, #0]
 800080a:	2bb8      	cmp	r3, #184	; 0xb8
 800080c:	d12a      	bne.n	8000864 <LCD_PrintASCII+0xb4>
            {
                LCD_WriteData(0xB5);
 800080e:	20b5      	movs	r0, #181	; 0xb5
 8000810:	f7ff fdc4 	bl	800039c <LCD_WriteData>
                delay_us(100);
 8000814:	2064      	movs	r0, #100	; 0x64
 8000816:	f7ff fcd9 	bl	80001cc <delay_us>
            if ((str[i]) == (0xB8))
 800081a:	e023      	b.n	8000864 <LCD_PrintASCII+0xb4>
            }                
        }
        else
        {
            if ((str[i]) < 0xC0)
 800081c:	230f      	movs	r3, #15
 800081e:	18fb      	adds	r3, r7, r3
 8000820:	781b      	ldrb	r3, [r3, #0]
 8000822:	687a      	ldr	r2, [r7, #4]
 8000824:	18d3      	adds	r3, r2, r3
 8000826:	781b      	ldrb	r3, [r3, #0]
 8000828:	2bbf      	cmp	r3, #191	; 0xbf
 800082a:	d80c      	bhi.n	8000846 <LCD_PrintASCII+0x96>
            {
                LCD_WriteData(str[i]);
 800082c:	230f      	movs	r3, #15
 800082e:	18fb      	adds	r3, r7, r3
 8000830:	781b      	ldrb	r3, [r3, #0]
 8000832:	687a      	ldr	r2, [r7, #4]
 8000834:	18d3      	adds	r3, r2, r3
 8000836:	781b      	ldrb	r3, [r3, #0]
 8000838:	0018      	movs	r0, r3
 800083a:	f7ff fdaf 	bl	800039c <LCD_WriteData>
                delay_us(100);
 800083e:	2064      	movs	r0, #100	; 0x64
 8000840:	f7ff fcc4 	bl	80001cc <delay_us>
 8000844:	e00e      	b.n	8000864 <LCD_PrintASCII+0xb4>
            }
            else
            {
                LCD_WriteData(ANSI1251_CO_FF[(unsigned char)(str[i])-0xC0]);
 8000846:	230f      	movs	r3, #15
 8000848:	18fb      	adds	r3, r7, r3
 800084a:	781b      	ldrb	r3, [r3, #0]
 800084c:	687a      	ldr	r2, [r7, #4]
 800084e:	18d3      	adds	r3, r2, r3
 8000850:	781b      	ldrb	r3, [r3, #0]
 8000852:	3bc0      	subs	r3, #192	; 0xc0
 8000854:	4a0d      	ldr	r2, [pc, #52]	; (800088c <LCD_PrintASCII+0xdc>)
 8000856:	5cd3      	ldrb	r3, [r2, r3]
 8000858:	0018      	movs	r0, r3
 800085a:	f7ff fd9f 	bl	800039c <LCD_WriteData>
                delay_us(100);            
 800085e:	2064      	movs	r0, #100	; 0x64
 8000860:	f7ff fcb4 	bl	80001cc <delay_us>
            }
        }
        i++;
 8000864:	230f      	movs	r3, #15
 8000866:	18fb      	adds	r3, r7, r3
 8000868:	781a      	ldrb	r2, [r3, #0]
 800086a:	230f      	movs	r3, #15
 800086c:	18fb      	adds	r3, r7, r3
 800086e:	3201      	adds	r2, #1
 8000870:	701a      	strb	r2, [r3, #0]
    while(str[i]!=0)
 8000872:	230f      	movs	r3, #15
 8000874:	18fb      	adds	r3, r7, r3
 8000876:	781b      	ldrb	r3, [r3, #0]
 8000878:	687a      	ldr	r2, [r7, #4]
 800087a:	18d3      	adds	r3, r2, r3
 800087c:	781b      	ldrb	r3, [r3, #0]
 800087e:	2b00      	cmp	r3, #0
 8000880:	d19f      	bne.n	80007c2 <LCD_PrintASCII+0x12>
    }
}
 8000882:	46c0      	nop			; (mov r8, r8)
 8000884:	46bd      	mov	sp, r7
 8000886:	b004      	add	sp, #16
 8000888:	bd80      	pop	{r7, pc}
 800088a:	46c0      	nop			; (mov r8, r8)
 800088c:	20000004 	.word	0x20000004

08000890 <LCD_Print80>:
    
//----------------------------------------------
void LCD_Print80(uint8_t* str)
{
 8000890:	b580      	push	{r7, lr}
 8000892:	b08c      	sub	sp, #48	; 0x30
 8000894:	af00      	add	r7, sp, #0
 8000896:	6078      	str	r0, [r7, #4]
    LCD_SetPos(0,0);  //Первая строка
 8000898:	2100      	movs	r1, #0
 800089a:	2000      	movs	r0, #0
 800089c:	f7ff fea9 	bl	80005f2 <LCD_SetPos>
    uint8_t line[21];
    for (int i = 0; i < 20; i++)
 80008a0:	2300      	movs	r3, #0
 80008a2:	62fb      	str	r3, [r7, #44]	; 0x2c
 80008a4:	e00c      	b.n	80008c0 <LCD_Print80+0x30>
    {
        line[i] = str[i];
 80008a6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80008a8:	687a      	ldr	r2, [r7, #4]
 80008aa:	18d3      	adds	r3, r2, r3
 80008ac:	7819      	ldrb	r1, [r3, #0]
 80008ae:	2308      	movs	r3, #8
 80008b0:	18fa      	adds	r2, r7, r3
 80008b2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80008b4:	18d3      	adds	r3, r2, r3
 80008b6:	1c0a      	adds	r2, r1, #0
 80008b8:	701a      	strb	r2, [r3, #0]
    for (int i = 0; i < 20; i++)
 80008ba:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80008bc:	3301      	adds	r3, #1
 80008be:	62fb      	str	r3, [r7, #44]	; 0x2c
 80008c0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80008c2:	2b13      	cmp	r3, #19
 80008c4:	ddef      	ble.n	80008a6 <LCD_Print80+0x16>
    }
    line[20] = 0;
 80008c6:	2308      	movs	r3, #8
 80008c8:	18fb      	adds	r3, r7, r3
 80008ca:	2200      	movs	r2, #0
 80008cc:	751a      	strb	r2, [r3, #20]
    LCD_PrintASCII(line);
 80008ce:	2308      	movs	r3, #8
 80008d0:	18fb      	adds	r3, r7, r3
 80008d2:	0018      	movs	r0, r3
 80008d4:	f7ff ff6c 	bl	80007b0 <LCD_PrintASCII>
    
    LCD_SetPos(0,1);  //
 80008d8:	2101      	movs	r1, #1
 80008da:	2000      	movs	r0, #0
 80008dc:	f7ff fe89 	bl	80005f2 <LCD_SetPos>
    for (int i = 0; i < 20; i++)
 80008e0:	2300      	movs	r3, #0
 80008e2:	62bb      	str	r3, [r7, #40]	; 0x28
 80008e4:	e00d      	b.n	8000902 <LCD_Print80+0x72>
    {
        line[i] = str[i+20];
 80008e6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80008e8:	3314      	adds	r3, #20
 80008ea:	687a      	ldr	r2, [r7, #4]
 80008ec:	18d3      	adds	r3, r2, r3
 80008ee:	7819      	ldrb	r1, [r3, #0]
 80008f0:	2308      	movs	r3, #8
 80008f2:	18fa      	adds	r2, r7, r3
 80008f4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80008f6:	18d3      	adds	r3, r2, r3
 80008f8:	1c0a      	adds	r2, r1, #0
 80008fa:	701a      	strb	r2, [r3, #0]
    for (int i = 0; i < 20; i++)
 80008fc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80008fe:	3301      	adds	r3, #1
 8000900:	62bb      	str	r3, [r7, #40]	; 0x28
 8000902:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000904:	2b13      	cmp	r3, #19
 8000906:	ddee      	ble.n	80008e6 <LCD_Print80+0x56>
    }
    line[20] = 0;
 8000908:	2308      	movs	r3, #8
 800090a:	18fb      	adds	r3, r7, r3
 800090c:	2200      	movs	r2, #0
 800090e:	751a      	strb	r2, [r3, #20]
    LCD_PrintASCII(line);
 8000910:	2308      	movs	r3, #8
 8000912:	18fb      	adds	r3, r7, r3
 8000914:	0018      	movs	r0, r3
 8000916:	f7ff ff4b 	bl	80007b0 <LCD_PrintASCII>
    
    LCD_SetPos(0,2);
 800091a:	2102      	movs	r1, #2
 800091c:	2000      	movs	r0, #0
 800091e:	f7ff fe68 	bl	80005f2 <LCD_SetPos>
    for (int i = 0; i < 20; i++)
 8000922:	2300      	movs	r3, #0
 8000924:	627b      	str	r3, [r7, #36]	; 0x24
 8000926:	e00d      	b.n	8000944 <LCD_Print80+0xb4>
    {
        line[i] = str[i+40];
 8000928:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800092a:	3328      	adds	r3, #40	; 0x28
 800092c:	687a      	ldr	r2, [r7, #4]
 800092e:	18d3      	adds	r3, r2, r3
 8000930:	7819      	ldrb	r1, [r3, #0]
 8000932:	2308      	movs	r3, #8
 8000934:	18fa      	adds	r2, r7, r3
 8000936:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000938:	18d3      	adds	r3, r2, r3
 800093a:	1c0a      	adds	r2, r1, #0
 800093c:	701a      	strb	r2, [r3, #0]
    for (int i = 0; i < 20; i++)
 800093e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000940:	3301      	adds	r3, #1
 8000942:	627b      	str	r3, [r7, #36]	; 0x24
 8000944:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000946:	2b13      	cmp	r3, #19
 8000948:	ddee      	ble.n	8000928 <LCD_Print80+0x98>
    }
    line[20] = 0;
 800094a:	2308      	movs	r3, #8
 800094c:	18fb      	adds	r3, r7, r3
 800094e:	2200      	movs	r2, #0
 8000950:	751a      	strb	r2, [r3, #20]
    LCD_PrintASCII(line);
 8000952:	2308      	movs	r3, #8
 8000954:	18fb      	adds	r3, r7, r3
 8000956:	0018      	movs	r0, r3
 8000958:	f7ff ff2a 	bl	80007b0 <LCD_PrintASCII>
    
    LCD_SetPos(0,3);
 800095c:	2103      	movs	r1, #3
 800095e:	2000      	movs	r0, #0
 8000960:	f7ff fe47 	bl	80005f2 <LCD_SetPos>
    for (int i = 0; i < 20; i++)
 8000964:	2300      	movs	r3, #0
 8000966:	623b      	str	r3, [r7, #32]
 8000968:	e00d      	b.n	8000986 <LCD_Print80+0xf6>
    {
        line[i] = str[i+60];
 800096a:	6a3b      	ldr	r3, [r7, #32]
 800096c:	333c      	adds	r3, #60	; 0x3c
 800096e:	687a      	ldr	r2, [r7, #4]
 8000970:	18d3      	adds	r3, r2, r3
 8000972:	7819      	ldrb	r1, [r3, #0]
 8000974:	2308      	movs	r3, #8
 8000976:	18fa      	adds	r2, r7, r3
 8000978:	6a3b      	ldr	r3, [r7, #32]
 800097a:	18d3      	adds	r3, r2, r3
 800097c:	1c0a      	adds	r2, r1, #0
 800097e:	701a      	strb	r2, [r3, #0]
    for (int i = 0; i < 20; i++)
 8000980:	6a3b      	ldr	r3, [r7, #32]
 8000982:	3301      	adds	r3, #1
 8000984:	623b      	str	r3, [r7, #32]
 8000986:	6a3b      	ldr	r3, [r7, #32]
 8000988:	2b13      	cmp	r3, #19
 800098a:	ddee      	ble.n	800096a <LCD_Print80+0xda>
    }
    line[20] = 0;
 800098c:	2308      	movs	r3, #8
 800098e:	18fb      	adds	r3, r7, r3
 8000990:	2200      	movs	r2, #0
 8000992:	751a      	strb	r2, [r3, #20]
    LCD_PrintASCII(line);
 8000994:	2308      	movs	r3, #8
 8000996:	18fb      	adds	r3, r7, r3
 8000998:	0018      	movs	r0, r3
 800099a:	f7ff ff09 	bl	80007b0 <LCD_PrintASCII>
}
 800099e:	46c0      	nop			; (mov r8, r8)
 80009a0:	46bd      	mov	sp, r7
 80009a2:	b00c      	add	sp, #48	; 0x30
 80009a4:	bd80      	pop	{r7, pc}
 80009a6:	46c0      	nop			; (mov r8, r8)

080009a8 <flash_read>:
//#define FLASH_KEY1               ((uint32_t)0x45670123)
//#define FLASH_KEY2               ((uint32_t)0xCDEF89AB)


uint32_t flash_read(uint32_t address) 
{
 80009a8:	b580      	push	{r7, lr}
 80009aa:	b082      	sub	sp, #8
 80009ac:	af00      	add	r7, sp, #0
 80009ae:	6078      	str	r0, [r7, #4]
    return (*(__IO uint32_t*) address);
 80009b0:	687b      	ldr	r3, [r7, #4]
 80009b2:	681b      	ldr	r3, [r3, #0]
}
 80009b4:	0018      	movs	r0, r3
 80009b6:	46bd      	mov	sp, r7
 80009b8:	b002      	add	sp, #8
 80009ba:	bd80      	pop	{r7, pc}

080009bc <flash_unlock>:
//------------------------------------------------------------------------------

void flash_unlock (void)
{
 80009bc:	b580      	push	{r7, lr}
 80009be:	af00      	add	r7, sp, #0
    FLASH->KEYR = FLASH_KEY1;
 80009c0:	4b04      	ldr	r3, [pc, #16]	; (80009d4 <flash_unlock+0x18>)
 80009c2:	4a05      	ldr	r2, [pc, #20]	; (80009d8 <flash_unlock+0x1c>)
 80009c4:	605a      	str	r2, [r3, #4]
    FLASH->KEYR = FLASH_KEY2;
 80009c6:	4b03      	ldr	r3, [pc, #12]	; (80009d4 <flash_unlock+0x18>)
 80009c8:	4a04      	ldr	r2, [pc, #16]	; (80009dc <flash_unlock+0x20>)
 80009ca:	605a      	str	r2, [r3, #4]
}
 80009cc:	46c0      	nop			; (mov r8, r8)
 80009ce:	46bd      	mov	sp, r7
 80009d0:	bd80      	pop	{r7, pc}
 80009d2:	46c0      	nop			; (mov r8, r8)
 80009d4:	40022000 	.word	0x40022000
 80009d8:	45670123 	.word	0x45670123
 80009dc:	cdef89ab 	.word	0xcdef89ab

080009e0 <flash_lock>:
//------------------------------------------------------------------------------
void flash_lock() 
{
 80009e0:	b580      	push	{r7, lr}
 80009e2:	af00      	add	r7, sp, #0
    FLASH->CR |= FLASH_CR_LOCK;
 80009e4:	4b04      	ldr	r3, [pc, #16]	; (80009f8 <flash_lock+0x18>)
 80009e6:	4a04      	ldr	r2, [pc, #16]	; (80009f8 <flash_lock+0x18>)
 80009e8:	6912      	ldr	r2, [r2, #16]
 80009ea:	2180      	movs	r1, #128	; 0x80
 80009ec:	430a      	orrs	r2, r1
 80009ee:	611a      	str	r2, [r3, #16]
}
 80009f0:	46c0      	nop			; (mov r8, r8)
 80009f2:	46bd      	mov	sp, r7
 80009f4:	bd80      	pop	{r7, pc}
 80009f6:	46c0      	nop			; (mov r8, r8)
 80009f8:	40022000 	.word	0x40022000

080009fc <flash_ready>:
//------------------------------------------------------------------------------
uint8_t flash_ready(void) 
{
 80009fc:	b580      	push	{r7, lr}
 80009fe:	af00      	add	r7, sp, #0
    return !(FLASH->SR & FLASH_SR_BSY);
 8000a00:	4b04      	ldr	r3, [pc, #16]	; (8000a14 <flash_ready+0x18>)
 8000a02:	68db      	ldr	r3, [r3, #12]
 8000a04:	2201      	movs	r2, #1
 8000a06:	4013      	ands	r3, r2
 8000a08:	425a      	negs	r2, r3
 8000a0a:	4153      	adcs	r3, r2
 8000a0c:	b2db      	uxtb	r3, r3
}
 8000a0e:	0018      	movs	r0, r3
 8000a10:	46bd      	mov	sp, r7
 8000a12:	bd80      	pop	{r7, pc}
 8000a14:	40022000 	.word	0x40022000

08000a18 <flash_erase_page>:
//------------------------------------------------------------------------------
//Функция стирает одну страницу. В качестве адреса можно использовать любой
//принадлежащий диапазону адресов той странице которую нужно очистить.
void flash_erase_page(uint32_t address) 
{
 8000a18:	b580      	push	{r7, lr}
 8000a1a:	b082      	sub	sp, #8
 8000a1c:	af00      	add	r7, sp, #0
 8000a1e:	6078      	str	r0, [r7, #4]
    FLASH->CR|= FLASH_CR_PER; //Устанавливаем бит стирания одной страницы
 8000a20:	4b0e      	ldr	r3, [pc, #56]	; (8000a5c <flash_erase_page+0x44>)
 8000a22:	4a0e      	ldr	r2, [pc, #56]	; (8000a5c <flash_erase_page+0x44>)
 8000a24:	6912      	ldr	r2, [r2, #16]
 8000a26:	2102      	movs	r1, #2
 8000a28:	430a      	orrs	r2, r1
 8000a2a:	611a      	str	r2, [r3, #16]
    FLASH->AR = address; // Задаем её адрес
 8000a2c:	4b0b      	ldr	r3, [pc, #44]	; (8000a5c <flash_erase_page+0x44>)
 8000a2e:	687a      	ldr	r2, [r7, #4]
 8000a30:	615a      	str	r2, [r3, #20]

    FLASH->CR|= FLASH_CR_STRT; // Запускаем стирание
 8000a32:	4b0a      	ldr	r3, [pc, #40]	; (8000a5c <flash_erase_page+0x44>)
 8000a34:	4a09      	ldr	r2, [pc, #36]	; (8000a5c <flash_erase_page+0x44>)
 8000a36:	6912      	ldr	r2, [r2, #16]
 8000a38:	2140      	movs	r1, #64	; 0x40
 8000a3a:	430a      	orrs	r2, r1
 8000a3c:	611a      	str	r2, [r3, #16]

    while(!flash_ready())
 8000a3e:	46c0      	nop			; (mov r8, r8)
 8000a40:	f7ff ffdc 	bl	80009fc <flash_ready>
 8000a44:	1e03      	subs	r3, r0, #0
 8000a46:	d0fb      	beq.n	8000a40 <flash_erase_page+0x28>

        ;  //Ждем пока страница сотрется.
    FLASH->CR&= ~FLASH_CR_PER; //Сбрасываем бит обратно
 8000a48:	4b04      	ldr	r3, [pc, #16]	; (8000a5c <flash_erase_page+0x44>)
 8000a4a:	4a04      	ldr	r2, [pc, #16]	; (8000a5c <flash_erase_page+0x44>)
 8000a4c:	6912      	ldr	r2, [r2, #16]
 8000a4e:	2102      	movs	r1, #2
 8000a50:	438a      	bics	r2, r1
 8000a52:	611a      	str	r2, [r3, #16]

}
 8000a54:	46c0      	nop			; (mov r8, r8)
 8000a56:	46bd      	mov	sp, r7
 8000a58:	b002      	add	sp, #8
 8000a5a:	bd80      	pop	{r7, pc}
 8000a5c:	40022000 	.word	0x40022000

08000a60 <flash_write>:
//------------------------------------------------------------------------------
//---   Функция записи во флеш 4 байта   ---------------------------------------
void flash_write(uint32_t address,uint32_t data) 
{
 8000a60:	b580      	push	{r7, lr}
 8000a62:	b082      	sub	sp, #8
 8000a64:	af00      	add	r7, sp, #0
 8000a66:	6078      	str	r0, [r7, #4]
 8000a68:	6039      	str	r1, [r7, #0]
    FLASH->CR |= FLASH_CR_PG; //Разрешаем программирование флеша
 8000a6a:	4b16      	ldr	r3, [pc, #88]	; (8000ac4 <flash_write+0x64>)
 8000a6c:	4a15      	ldr	r2, [pc, #84]	; (8000ac4 <flash_write+0x64>)
 8000a6e:	6912      	ldr	r2, [r2, #16]
 8000a70:	2101      	movs	r1, #1
 8000a72:	430a      	orrs	r2, r1
 8000a74:	611a      	str	r2, [r3, #16]
    while(!flash_ready()) //Ожидаем готовности флеша к записи
 8000a76:	46c0      	nop			; (mov r8, r8)
 8000a78:	f7ff ffc0 	bl	80009fc <flash_ready>
 8000a7c:	1e03      	subs	r3, r0, #0
 8000a7e:	d0fb      	beq.n	8000a78 <flash_write+0x18>
        ;
    *(__IO uint16_t*)address = (uint16_t)data; //Пишем младшие 2 бата
 8000a80:	687b      	ldr	r3, [r7, #4]
 8000a82:	683a      	ldr	r2, [r7, #0]
 8000a84:	b292      	uxth	r2, r2
 8000a86:	801a      	strh	r2, [r3, #0]
    
    while(!flash_ready())
 8000a88:	46c0      	nop			; (mov r8, r8)
 8000a8a:	f7ff ffb7 	bl	80009fc <flash_ready>
 8000a8e:	1e03      	subs	r3, r0, #0
 8000a90:	d0fb      	beq.n	8000a8a <flash_write+0x2a>
        ;
    address+=2;
 8000a92:	687b      	ldr	r3, [r7, #4]
 8000a94:	3302      	adds	r3, #2
 8000a96:	607b      	str	r3, [r7, #4]
    data>>=16;
 8000a98:	683b      	ldr	r3, [r7, #0]
 8000a9a:	0c1b      	lsrs	r3, r3, #16
 8000a9c:	603b      	str	r3, [r7, #0]
    *(__IO uint16_t*)address = (uint16_t)data; //Пишем старшие 2 байта
 8000a9e:	687b      	ldr	r3, [r7, #4]
 8000aa0:	683a      	ldr	r2, [r7, #0]
 8000aa2:	b292      	uxth	r2, r2
 8000aa4:	801a      	strh	r2, [r3, #0]
    while(!flash_ready())
 8000aa6:	46c0      	nop			; (mov r8, r8)
 8000aa8:	f7ff ffa8 	bl	80009fc <flash_ready>
 8000aac:	1e03      	subs	r3, r0, #0
 8000aae:	d0fb      	beq.n	8000aa8 <flash_write+0x48>
        ;
    FLASH->CR &= ~(FLASH_CR_PG); //Запрещаем программирование флеша
 8000ab0:	4b04      	ldr	r3, [pc, #16]	; (8000ac4 <flash_write+0x64>)
 8000ab2:	4a04      	ldr	r2, [pc, #16]	; (8000ac4 <flash_write+0x64>)
 8000ab4:	6912      	ldr	r2, [r2, #16]
 8000ab6:	2101      	movs	r1, #1
 8000ab8:	438a      	bics	r2, r1
 8000aba:	611a      	str	r2, [r3, #16]
}    
 8000abc:	46c0      	nop			; (mov r8, r8)
 8000abe:	46bd      	mov	sp, r7
 8000ac0:	b002      	add	sp, #8
 8000ac2:	bd80      	pop	{r7, pc}
 8000ac4:	40022000 	.word	0x40022000

08000ac8 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000ac8:	b580      	push	{r7, lr}
 8000aca:	af00      	add	r7, sp, #0
                         before branch to main program. This call is made inside
                         the "startup_stm32f0xx.s" file.
                         User can setups the default system clock (System clock source, PLL Multiplier
                         and Divider factors, AHB/APBx prescalers and Flash settings).
   */
}
 8000acc:	46c0      	nop			; (mov r8, r8)
 8000ace:	46bd      	mov	sp, r7
 8000ad0:	bd80      	pop	{r7, pc}

08000ad2 <SystemCoreClockUpdate>:
  *
  * @param  None
  * @retval None
  */
void SystemCoreClockUpdate (void)
{
 8000ad2:	b580      	push	{r7, lr}
 8000ad4:	b084      	sub	sp, #16
 8000ad6:	af00      	add	r7, sp, #0
  uint32_t tmp = 0, pllmull = 0, pllsource = 0, predivfactor = 0;
 8000ad8:	2300      	movs	r3, #0
 8000ada:	60fb      	str	r3, [r7, #12]
 8000adc:	2300      	movs	r3, #0
 8000ade:	60bb      	str	r3, [r7, #8]
 8000ae0:	2300      	movs	r3, #0
 8000ae2:	607b      	str	r3, [r7, #4]
 8000ae4:	2300      	movs	r3, #0
 8000ae6:	603b      	str	r3, [r7, #0]

  /* Get SYSCLK source -------------------------------------------------------*/
  tmp = RCC->CFGR & RCC_CFGR_SWS;
 8000ae8:	4b2a      	ldr	r3, [pc, #168]	; (8000b94 <SystemCoreClockUpdate+0xc2>)
 8000aea:	685b      	ldr	r3, [r3, #4]
 8000aec:	220c      	movs	r2, #12
 8000aee:	4013      	ands	r3, r2
 8000af0:	60fb      	str	r3, [r7, #12]

  switch (tmp)
 8000af2:	68fb      	ldr	r3, [r7, #12]
 8000af4:	2b04      	cmp	r3, #4
 8000af6:	d007      	beq.n	8000b08 <SystemCoreClockUpdate+0x36>
 8000af8:	2b08      	cmp	r3, #8
 8000afa:	d009      	beq.n	8000b10 <SystemCoreClockUpdate+0x3e>
 8000afc:	2b00      	cmp	r3, #0
 8000afe:	d133      	bne.n	8000b68 <SystemCoreClockUpdate+0x96>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock */
      SystemCoreClock = HSI_VALUE;
 8000b00:	4b25      	ldr	r3, [pc, #148]	; (8000b98 <SystemCoreClockUpdate+0xc6>)
 8000b02:	4a26      	ldr	r2, [pc, #152]	; (8000b9c <SystemCoreClockUpdate+0xca>)
 8000b04:	601a      	str	r2, [r3, #0]
      break;
 8000b06:	e033      	b.n	8000b70 <SystemCoreClockUpdate+0x9e>
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock */
      SystemCoreClock = HSE_VALUE;
 8000b08:	4b23      	ldr	r3, [pc, #140]	; (8000b98 <SystemCoreClockUpdate+0xc6>)
 8000b0a:	4a24      	ldr	r2, [pc, #144]	; (8000b9c <SystemCoreClockUpdate+0xca>)
 8000b0c:	601a      	str	r2, [r3, #0]
      break;
 8000b0e:	e02f      	b.n	8000b70 <SystemCoreClockUpdate+0x9e>
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock */
      /* Get PLL clock source and multiplication factor ----------------------*/
      pllmull = RCC->CFGR & RCC_CFGR_PLLMUL;
 8000b10:	4b20      	ldr	r3, [pc, #128]	; (8000b94 <SystemCoreClockUpdate+0xc2>)
 8000b12:	685a      	ldr	r2, [r3, #4]
 8000b14:	23f0      	movs	r3, #240	; 0xf0
 8000b16:	039b      	lsls	r3, r3, #14
 8000b18:	4013      	ands	r3, r2
 8000b1a:	60bb      	str	r3, [r7, #8]
      pllsource = RCC->CFGR & RCC_CFGR_PLLSRC;
 8000b1c:	4b1d      	ldr	r3, [pc, #116]	; (8000b94 <SystemCoreClockUpdate+0xc2>)
 8000b1e:	685a      	ldr	r2, [r3, #4]
 8000b20:	2380      	movs	r3, #128	; 0x80
 8000b22:	025b      	lsls	r3, r3, #9
 8000b24:	4013      	ands	r3, r2
 8000b26:	607b      	str	r3, [r7, #4]
      pllmull = ( pllmull >> 18) + 2;
 8000b28:	68bb      	ldr	r3, [r7, #8]
 8000b2a:	0c9b      	lsrs	r3, r3, #18
 8000b2c:	3302      	adds	r3, #2
 8000b2e:	60bb      	str	r3, [r7, #8]
      predivfactor = (RCC->CFGR2 & RCC_CFGR2_PREDIV) + 1;
 8000b30:	4b18      	ldr	r3, [pc, #96]	; (8000b94 <SystemCoreClockUpdate+0xc2>)
 8000b32:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000b34:	220f      	movs	r2, #15
 8000b36:	4013      	ands	r3, r2
 8000b38:	3301      	adds	r3, #1
 8000b3a:	603b      	str	r3, [r7, #0]

      if (pllsource == RCC_CFGR_PLLSRC_HSE_PREDIV)
 8000b3c:	687a      	ldr	r2, [r7, #4]
 8000b3e:	2380      	movs	r3, #128	; 0x80
 8000b40:	025b      	lsls	r3, r3, #9
 8000b42:	429a      	cmp	r2, r3
 8000b44:	d10a      	bne.n	8000b5c <SystemCoreClockUpdate+0x8a>
      {
        /* HSE used as PLL clock source : SystemCoreClock = HSE/PREDIV * PLLMUL */
        SystemCoreClock = (HSE_VALUE/predivfactor) * pllmull;
 8000b46:	6839      	ldr	r1, [r7, #0]
 8000b48:	4814      	ldr	r0, [pc, #80]	; (8000b9c <SystemCoreClockUpdate+0xca>)
 8000b4a:	f006 facd 	bl	80070e8 <__udivsi3>
 8000b4e:	0003      	movs	r3, r0
 8000b50:	001a      	movs	r2, r3
 8000b52:	68bb      	ldr	r3, [r7, #8]
 8000b54:	435a      	muls	r2, r3
 8000b56:	4b10      	ldr	r3, [pc, #64]	; (8000b98 <SystemCoreClockUpdate+0xc6>)
 8000b58:	601a      	str	r2, [r3, #0]
        SystemCoreClock = (HSI_VALUE >> 1) * pllmull;
#endif /* STM32F042x6 || STM32F048xx || STM32F070x6 || 
          STM32F071xB || STM32F072xB || STM32F078xx || STM32F070xB ||
          STM32F091xC || STM32F098xx || STM32F030xC */
      }
      break;
 8000b5a:	e009      	b.n	8000b70 <SystemCoreClockUpdate+0x9e>
        SystemCoreClock = (HSI_VALUE >> 1) * pllmull;
 8000b5c:	68bb      	ldr	r3, [r7, #8]
 8000b5e:	4a10      	ldr	r2, [pc, #64]	; (8000ba0 <SystemCoreClockUpdate+0xce>)
 8000b60:	435a      	muls	r2, r3
 8000b62:	4b0d      	ldr	r3, [pc, #52]	; (8000b98 <SystemCoreClockUpdate+0xc6>)
 8000b64:	601a      	str	r2, [r3, #0]
      break;
 8000b66:	e003      	b.n	8000b70 <SystemCoreClockUpdate+0x9e>
    default: /* HSI used as system clock */
      SystemCoreClock = HSI_VALUE;
 8000b68:	4b0b      	ldr	r3, [pc, #44]	; (8000b98 <SystemCoreClockUpdate+0xc6>)
 8000b6a:	4a0c      	ldr	r2, [pc, #48]	; (8000b9c <SystemCoreClockUpdate+0xca>)
 8000b6c:	601a      	str	r2, [r3, #0]
      break;
 8000b6e:	46c0      	nop			; (mov r8, r8)
  }
  /* Compute HCLK clock frequency ----------------*/
  /* Get HCLK prescaler */
  tmp = AHBPrescTable[((RCC->CFGR & RCC_CFGR_HPRE) >> 4)];
 8000b70:	4b08      	ldr	r3, [pc, #32]	; (8000b94 <SystemCoreClockUpdate+0xc2>)
 8000b72:	685b      	ldr	r3, [r3, #4]
 8000b74:	091b      	lsrs	r3, r3, #4
 8000b76:	220f      	movs	r2, #15
 8000b78:	4013      	ands	r3, r2
 8000b7a:	4a0a      	ldr	r2, [pc, #40]	; (8000ba4 <SystemCoreClockUpdate+0xd2>)
 8000b7c:	5cd3      	ldrb	r3, [r2, r3]
 8000b7e:	60fb      	str	r3, [r7, #12]
  /* HCLK clock frequency */
  SystemCoreClock >>= tmp;
 8000b80:	4b05      	ldr	r3, [pc, #20]	; (8000b98 <SystemCoreClockUpdate+0xc6>)
 8000b82:	681a      	ldr	r2, [r3, #0]
 8000b84:	68fb      	ldr	r3, [r7, #12]
 8000b86:	40da      	lsrs	r2, r3
 8000b88:	4b03      	ldr	r3, [pc, #12]	; (8000b98 <SystemCoreClockUpdate+0xc6>)
 8000b8a:	601a      	str	r2, [r3, #0]
}
 8000b8c:	46c0      	nop			; (mov r8, r8)
 8000b8e:	46bd      	mov	sp, r7
 8000b90:	b004      	add	sp, #16
 8000b92:	bd80      	pop	{r7, pc}
 8000b94:	40021000 	.word	0x40021000
 8000b98:	20000044 	.word	0x20000044
 8000b9c:	007a1200 	.word	0x007a1200
 8000ba0:	003d0900 	.word	0x003d0900
 8000ba4:	080074b0 	.word	0x080074b0

08000ba8 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000ba8:	b580      	push	{r7, lr}
 8000baa:	b082      	sub	sp, #8
 8000bac:	af00      	add	r7, sp, #0
 8000bae:	0002      	movs	r2, r0
 8000bb0:	1dfb      	adds	r3, r7, #7
 8000bb2:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 8000bb4:	1dfb      	adds	r3, r7, #7
 8000bb6:	781b      	ldrb	r3, [r3, #0]
 8000bb8:	2b7f      	cmp	r3, #127	; 0x7f
 8000bba:	d809      	bhi.n	8000bd0 <__NVIC_EnableIRQ+0x28>
  {
    NVIC->ISER[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000bbc:	4b06      	ldr	r3, [pc, #24]	; (8000bd8 <__NVIC_EnableIRQ+0x30>)
 8000bbe:	1dfa      	adds	r2, r7, #7
 8000bc0:	7812      	ldrb	r2, [r2, #0]
 8000bc2:	0011      	movs	r1, r2
 8000bc4:	221f      	movs	r2, #31
 8000bc6:	400a      	ands	r2, r1
 8000bc8:	2101      	movs	r1, #1
 8000bca:	4091      	lsls	r1, r2
 8000bcc:	000a      	movs	r2, r1
 8000bce:	601a      	str	r2, [r3, #0]
  }
}
 8000bd0:	46c0      	nop			; (mov r8, r8)
 8000bd2:	46bd      	mov	sp, r7
 8000bd4:	b002      	add	sp, #8
 8000bd6:	bd80      	pop	{r7, pc}
 8000bd8:	e000e100 	.word	0xe000e100

08000bdc <MP3_Init>:

//void MP3_ClearRXBuffer(void);


//------------------------------    MP3_init    --------------------------------------------------
void MP3_Init(void){
 8000bdc:	b580      	push	{r7, lr}
 8000bde:	af00      	add	r7, sp, #0
		          - USART CPHA: Data is captured on the middle
		          - USART LastBit: The clock pulse of the last data bit is not output to
		                           the SCLK pin
	 */
	//UART2_Init();
	RCC->AHBENR|= RCC_AHBENR_GPIOAEN; //Clock Enable Port B
 8000be0:	4b38      	ldr	r3, [pc, #224]	; (8000cc4 <MP3_Init+0xe8>)
 8000be2:	4a38      	ldr	r2, [pc, #224]	; (8000cc4 <MP3_Init+0xe8>)
 8000be4:	6952      	ldr	r2, [r2, #20]
 8000be6:	2180      	movs	r1, #128	; 0x80
 8000be8:	0289      	lsls	r1, r1, #10
 8000bea:	430a      	orrs	r2, r1
 8000bec:	615a      	str	r2, [r3, #20]

	RCC->APB1ENR|= RCC_APB1ENR_USART2EN; //USART2 clock enable   //?????????? Проверить
 8000bee:	4b35      	ldr	r3, [pc, #212]	; (8000cc4 <MP3_Init+0xe8>)
 8000bf0:	4a34      	ldr	r2, [pc, #208]	; (8000cc4 <MP3_Init+0xe8>)
 8000bf2:	69d2      	ldr	r2, [r2, #28]
 8000bf4:	2180      	movs	r1, #128	; 0x80
 8000bf6:	0289      	lsls	r1, r1, #10
 8000bf8:	430a      	orrs	r2, r1
 8000bfa:	61da      	str	r2, [r3, #28]
	//RCC->AHBENR|= RCC_APB2ENR_USART1EN; //USART2 clock enable


	// INIT TX (PA2) Alternative PUSH PULL
	GPIOA ->MODER |= GPIO_MODER_MODER2_1; // Alternative
 8000bfc:	2390      	movs	r3, #144	; 0x90
 8000bfe:	05db      	lsls	r3, r3, #23
 8000c00:	2290      	movs	r2, #144	; 0x90
 8000c02:	05d2      	lsls	r2, r2, #23
 8000c04:	6812      	ldr	r2, [r2, #0]
 8000c06:	2120      	movs	r1, #32
 8000c08:	430a      	orrs	r2, r1
 8000c0a:	601a      	str	r2, [r3, #0]
	GPIOA ->OTYPER &= ~GPIO_OTYPER_OT_2;  // PUSH PULL
 8000c0c:	2390      	movs	r3, #144	; 0x90
 8000c0e:	05db      	lsls	r3, r3, #23
 8000c10:	2290      	movs	r2, #144	; 0x90
 8000c12:	05d2      	lsls	r2, r2, #23
 8000c14:	6852      	ldr	r2, [r2, #4]
 8000c16:	2104      	movs	r1, #4
 8000c18:	438a      	bics	r2, r1
 8000c1a:	605a      	str	r2, [r3, #4]
	GPIOA->AFR[0] &= ~GPIO_AFRL_AFSEL2_Msk;
 8000c1c:	2390      	movs	r3, #144	; 0x90
 8000c1e:	05db      	lsls	r3, r3, #23
 8000c20:	2290      	movs	r2, #144	; 0x90
 8000c22:	05d2      	lsls	r2, r2, #23
 8000c24:	6a12      	ldr	r2, [r2, #32]
 8000c26:	4928      	ldr	r1, [pc, #160]	; (8000cc8 <MP3_Init+0xec>)
 8000c28:	400a      	ands	r2, r1
 8000c2a:	621a      	str	r2, [r3, #32]
	GPIOA->AFR[0] |= (0x01 << 2*4);
 8000c2c:	2390      	movs	r3, #144	; 0x90
 8000c2e:	05db      	lsls	r3, r3, #23
 8000c30:	2290      	movs	r2, #144	; 0x90
 8000c32:	05d2      	lsls	r2, r2, #23
 8000c34:	6a12      	ldr	r2, [r2, #32]
 8000c36:	2180      	movs	r1, #128	; 0x80
 8000c38:	0049      	lsls	r1, r1, #1
 8000c3a:	430a      	orrs	r2, r1
 8000c3c:	621a      	str	r2, [r3, #32]

	// INIT RX (PA3) Alternative OPEN DRAIN INPUT
	GPIOA ->MODER |= GPIO_MODER_MODER3_1; //Alternative
 8000c3e:	2390      	movs	r3, #144	; 0x90
 8000c40:	05db      	lsls	r3, r3, #23
 8000c42:	2290      	movs	r2, #144	; 0x90
 8000c44:	05d2      	lsls	r2, r2, #23
 8000c46:	6812      	ldr	r2, [r2, #0]
 8000c48:	2180      	movs	r1, #128	; 0x80
 8000c4a:	430a      	orrs	r2, r1
 8000c4c:	601a      	str	r2, [r3, #0]
	GPIOA ->OTYPER |= GPIO_OTYPER_OT_3; // "RX" - OPEN DRAIN
 8000c4e:	2390      	movs	r3, #144	; 0x90
 8000c50:	05db      	lsls	r3, r3, #23
 8000c52:	2290      	movs	r2, #144	; 0x90
 8000c54:	05d2      	lsls	r2, r2, #23
 8000c56:	6852      	ldr	r2, [r2, #4]
 8000c58:	2108      	movs	r1, #8
 8000c5a:	430a      	orrs	r2, r1
 8000c5c:	605a      	str	r2, [r3, #4]
	GPIOA->AFR[0] &= ~GPIO_AFRL_AFSEL3_Msk;
 8000c5e:	2390      	movs	r3, #144	; 0x90
 8000c60:	05db      	lsls	r3, r3, #23
 8000c62:	2290      	movs	r2, #144	; 0x90
 8000c64:	05d2      	lsls	r2, r2, #23
 8000c66:	6a12      	ldr	r2, [r2, #32]
 8000c68:	4918      	ldr	r1, [pc, #96]	; (8000ccc <MP3_Init+0xf0>)
 8000c6a:	400a      	ands	r2, r1
 8000c6c:	621a      	str	r2, [r3, #32]
	GPIOA->AFR[0] |= (0x01<< 3*4);
 8000c6e:	2390      	movs	r3, #144	; 0x90
 8000c70:	05db      	lsls	r3, r3, #23
 8000c72:	2290      	movs	r2, #144	; 0x90
 8000c74:	05d2      	lsls	r2, r2, #23
 8000c76:	6a12      	ldr	r2, [r2, #32]
 8000c78:	2180      	movs	r1, #128	; 0x80
 8000c7a:	0149      	lsls	r1, r1, #5
 8000c7c:	430a      	orrs	r2, r1
 8000c7e:	621a      	str	r2, [r3, #32]

	//UART_BRR = (Fck + baudrate/2)/baudrate;  Fck - clock AHBENR
	//(8 000 000 + 4800)/9600 = 833 (0x341)
	USART2->BRR = 0x1388; //Baud rate 9600.
 8000c80:	4b13      	ldr	r3, [pc, #76]	; (8000cd0 <MP3_Init+0xf4>)
 8000c82:	4a14      	ldr	r2, [pc, #80]	; (8000cd4 <MP3_Init+0xf8>)
 8000c84:	60da      	str	r2, [r3, #12]

	USART2->CR1 |= USART_CR1_RE; //Receiver Enable
 8000c86:	4b12      	ldr	r3, [pc, #72]	; (8000cd0 <MP3_Init+0xf4>)
 8000c88:	4a11      	ldr	r2, [pc, #68]	; (8000cd0 <MP3_Init+0xf4>)
 8000c8a:	6812      	ldr	r2, [r2, #0]
 8000c8c:	2104      	movs	r1, #4
 8000c8e:	430a      	orrs	r2, r1
 8000c90:	601a      	str	r2, [r3, #0]
	USART2->CR1 |= USART_CR1_TE; //Transmitter Enable
 8000c92:	4b0f      	ldr	r3, [pc, #60]	; (8000cd0 <MP3_Init+0xf4>)
 8000c94:	4a0e      	ldr	r2, [pc, #56]	; (8000cd0 <MP3_Init+0xf4>)
 8000c96:	6812      	ldr	r2, [r2, #0]
 8000c98:	2108      	movs	r1, #8
 8000c9a:	430a      	orrs	r2, r1
 8000c9c:	601a      	str	r2, [r3, #0]
	USART2->CR1 |= USART_CR1_UE; //USART Enable
 8000c9e:	4b0c      	ldr	r3, [pc, #48]	; (8000cd0 <MP3_Init+0xf4>)
 8000ca0:	4a0b      	ldr	r2, [pc, #44]	; (8000cd0 <MP3_Init+0xf4>)
 8000ca2:	6812      	ldr	r2, [r2, #0]
 8000ca4:	2101      	movs	r1, #1
 8000ca6:	430a      	orrs	r2, r1
 8000ca8:	601a      	str	r2, [r3, #0]

	USART2->CR1 |= USART_CR1_RXNEIE;//Interrupt Enable Byte receive
 8000caa:	4b09      	ldr	r3, [pc, #36]	; (8000cd0 <MP3_Init+0xf4>)
 8000cac:	4a08      	ldr	r2, [pc, #32]	; (8000cd0 <MP3_Init+0xf4>)
 8000cae:	6812      	ldr	r2, [r2, #0]
 8000cb0:	2120      	movs	r1, #32
 8000cb2:	430a      	orrs	r2, r1
 8000cb4:	601a      	str	r2, [r3, #0]
	//USART2->ICR |= USART_ICR_TCCF;
	//USART2->
	//USART2->RQR |= USART_RQR_RXFRQ;
	//USART2->ISR &= ~USART_ISR_RXNE;
	//--------------------------------------------------
	NVIC_EnableIRQ (USART2_IRQn);   //= 28    USART2 global Interrupt
 8000cb6:	201c      	movs	r0, #28
 8000cb8:	f7ff ff76 	bl	8000ba8 <__NVIC_EnableIRQ>
//	USART2_Send('2');
//	USART2_Send('3');

	//USART2->ICR |= USART_ICR_TCCF;

}
 8000cbc:	46c0      	nop			; (mov r8, r8)
 8000cbe:	46bd      	mov	sp, r7
 8000cc0:	bd80      	pop	{r7, pc}
 8000cc2:	46c0      	nop			; (mov r8, r8)
 8000cc4:	40021000 	.word	0x40021000
 8000cc8:	fffff0ff 	.word	0xfffff0ff
 8000ccc:	ffff0fff 	.word	0xffff0fff
 8000cd0:	40004400 	.word	0x40004400
 8000cd4:	00001388 	.word	0x00001388

08000cd8 <MP3_CheckSum>:
//------------------------------    Calculate checksum    --------------------------------------------------
uint16_t MP3_CheckSum (void) {
 8000cd8:	b580      	push	{r7, lr}
 8000cda:	b082      	sub	sp, #8
 8000cdc:	af00      	add	r7, sp, #0
	uint16_t sum = 0;
 8000cde:	1dbb      	adds	r3, r7, #6
 8000ce0:	2200      	movs	r2, #0
 8000ce2:	801a      	strh	r2, [r3, #0]
	uint8_t i;
	for (i = 1; i < 7; i ++) {
 8000ce4:	1d7b      	adds	r3, r7, #5
 8000ce6:	2201      	movs	r2, #1
 8000ce8:	701a      	strb	r2, [r3, #0]
 8000cea:	e00f      	b.n	8000d0c <MP3_CheckSum+0x34>
		sum += mp3_cmd_buf[i];
 8000cec:	1d7b      	adds	r3, r7, #5
 8000cee:	781b      	ldrb	r3, [r3, #0]
 8000cf0:	4a0c      	ldr	r2, [pc, #48]	; (8000d24 <MP3_CheckSum+0x4c>)
 8000cf2:	5cd3      	ldrb	r3, [r2, r3]
 8000cf4:	b2db      	uxtb	r3, r3
 8000cf6:	b299      	uxth	r1, r3
 8000cf8:	1dbb      	adds	r3, r7, #6
 8000cfa:	1dba      	adds	r2, r7, #6
 8000cfc:	8812      	ldrh	r2, [r2, #0]
 8000cfe:	188a      	adds	r2, r1, r2
 8000d00:	801a      	strh	r2, [r3, #0]
	for (i = 1; i < 7; i ++) {
 8000d02:	1d7b      	adds	r3, r7, #5
 8000d04:	781a      	ldrb	r2, [r3, #0]
 8000d06:	1d7b      	adds	r3, r7, #5
 8000d08:	3201      	adds	r2, #1
 8000d0a:	701a      	strb	r2, [r3, #0]
 8000d0c:	1d7b      	adds	r3, r7, #5
 8000d0e:	781b      	ldrb	r3, [r3, #0]
 8000d10:	2b06      	cmp	r3, #6
 8000d12:	d9eb      	bls.n	8000cec <MP3_CheckSum+0x14>
	}
	return -sum;
 8000d14:	1dbb      	adds	r3, r7, #6
 8000d16:	881b      	ldrh	r3, [r3, #0]
 8000d18:	425b      	negs	r3, r3
 8000d1a:	b29b      	uxth	r3, r3
}
 8000d1c:	0018      	movs	r0, r3
 8000d1e:	46bd      	mov	sp, r7
 8000d20:	b002      	add	sp, #8
 8000d22:	bd80      	pop	{r7, pc}
 8000d24:	2000004c 	.word	0x2000004c

08000d28 <MP3_SendCmd>:
//------------------------------    SendCmd    --------------------------------------------------
/* Send command to DFPlayer
 */
void MP3_SendCmd (uint8_t cmd, uint16_t high_arg, uint16_t low_arg) {
 8000d28:	b590      	push	{r4, r7, lr}
 8000d2a:	b085      	sub	sp, #20
 8000d2c:	af00      	add	r7, sp, #0
 8000d2e:	0004      	movs	r4, r0
 8000d30:	0008      	movs	r0, r1
 8000d32:	0011      	movs	r1, r2
 8000d34:	1dfb      	adds	r3, r7, #7
 8000d36:	1c22      	adds	r2, r4, #0
 8000d38:	701a      	strb	r2, [r3, #0]
 8000d3a:	1d3b      	adds	r3, r7, #4
 8000d3c:	1c02      	adds	r2, r0, #0
 8000d3e:	801a      	strh	r2, [r3, #0]
 8000d40:	1cbb      	adds	r3, r7, #2
 8000d42:	1c0a      	adds	r2, r1, #0
 8000d44:	801a      	strh	r2, [r3, #0]
	uint8_t i;
	uint16_t checksum;

	mp3_cmd_buf[3] = cmd;
 8000d46:	4b20      	ldr	r3, [pc, #128]	; (8000dc8 <MP3_SendCmd+0xa0>)
 8000d48:	1dfa      	adds	r2, r7, #7
 8000d4a:	7812      	ldrb	r2, [r2, #0]
 8000d4c:	70da      	strb	r2, [r3, #3]

	mp3_cmd_buf[5] = high_arg;
 8000d4e:	1d3b      	adds	r3, r7, #4
 8000d50:	881b      	ldrh	r3, [r3, #0]
 8000d52:	b2da      	uxtb	r2, r3
 8000d54:	4b1c      	ldr	r3, [pc, #112]	; (8000dc8 <MP3_SendCmd+0xa0>)
 8000d56:	715a      	strb	r2, [r3, #5]
	mp3_cmd_buf[6] = low_arg;
 8000d58:	1cbb      	adds	r3, r7, #2
 8000d5a:	881b      	ldrh	r3, [r3, #0]
 8000d5c:	b2da      	uxtb	r2, r3
 8000d5e:	4b1a      	ldr	r3, [pc, #104]	; (8000dc8 <MP3_SendCmd+0xa0>)
 8000d60:	719a      	strb	r2, [r3, #6]

	checksum = MP3_CheckSum();
 8000d62:	230c      	movs	r3, #12
 8000d64:	18fc      	adds	r4, r7, r3
 8000d66:	f7ff ffb7 	bl	8000cd8 <MP3_CheckSum>
 8000d6a:	0003      	movs	r3, r0
 8000d6c:	8023      	strh	r3, [r4, #0]
	mp3_cmd_buf[7] = (uint8_t) ((checksum >> 8) & 0x00FF);
 8000d6e:	230c      	movs	r3, #12
 8000d70:	18fb      	adds	r3, r7, r3
 8000d72:	881b      	ldrh	r3, [r3, #0]
 8000d74:	0a1b      	lsrs	r3, r3, #8
 8000d76:	b29b      	uxth	r3, r3
 8000d78:	b2da      	uxtb	r2, r3
 8000d7a:	4b13      	ldr	r3, [pc, #76]	; (8000dc8 <MP3_SendCmd+0xa0>)
 8000d7c:	71da      	strb	r2, [r3, #7]
	mp3_cmd_buf[8] = (uint8_t) (checksum & 0x00FF);
 8000d7e:	230c      	movs	r3, #12
 8000d80:	18fb      	adds	r3, r7, r3
 8000d82:	881b      	ldrh	r3, [r3, #0]
 8000d84:	b2da      	uxtb	r2, r3
 8000d86:	4b10      	ldr	r3, [pc, #64]	; (8000dc8 <MP3_SendCmd+0xa0>)
 8000d88:	721a      	strb	r2, [r3, #8]

	// Send command to UART2
	for (i = 0; i < 10; i ++) {
 8000d8a:	230f      	movs	r3, #15
 8000d8c:	18fb      	adds	r3, r7, r3
 8000d8e:	2200      	movs	r2, #0
 8000d90:	701a      	strb	r2, [r3, #0]
 8000d92:	e00f      	b.n	8000db4 <MP3_SendCmd+0x8c>
		USART2_Send(mp3_cmd_buf[i]); // Проверить!!!
 8000d94:	230f      	movs	r3, #15
 8000d96:	18fb      	adds	r3, r7, r3
 8000d98:	781b      	ldrb	r3, [r3, #0]
 8000d9a:	4a0b      	ldr	r2, [pc, #44]	; (8000dc8 <MP3_SendCmd+0xa0>)
 8000d9c:	5cd3      	ldrb	r3, [r2, r3]
 8000d9e:	b2db      	uxtb	r3, r3
 8000da0:	0018      	movs	r0, r3
 8000da2:	f006 f94d 	bl	8007040 <USART2_Send>
	for (i = 0; i < 10; i ++) {
 8000da6:	230f      	movs	r3, #15
 8000da8:	18fb      	adds	r3, r7, r3
 8000daa:	781a      	ldrb	r2, [r3, #0]
 8000dac:	230f      	movs	r3, #15
 8000dae:	18fb      	adds	r3, r7, r3
 8000db0:	3201      	adds	r2, #1
 8000db2:	701a      	strb	r2, [r3, #0]
 8000db4:	230f      	movs	r3, #15
 8000db6:	18fb      	adds	r3, r7, r3
 8000db8:	781b      	ldrb	r3, [r3, #0]
 8000dba:	2b09      	cmp	r3, #9
 8000dbc:	d9ea      	bls.n	8000d94 <MP3_SendCmd+0x6c>
    }

}
 8000dbe:	46c0      	nop			; (mov r8, r8)
 8000dc0:	46bd      	mov	sp, r7
 8000dc2:	b005      	add	sp, #20
 8000dc4:	bd90      	pop	{r4, r7, pc}
 8000dc6:	46c0      	nop			; (mov r8, r8)
 8000dc8:	2000004c 	.word	0x2000004c

08000dcc <MP3_SetFolder>:
//------------------------------    MP3_set_folder    --------------------------------------------------
void MP3_SetFolder (uint8_t folder) {
 8000dcc:	b580      	push	{r7, lr}
 8000dce:	b082      	sub	sp, #8
 8000dd0:	af00      	add	r7, sp, #0
 8000dd2:	0002      	movs	r2, r0
 8000dd4:	1dfb      	adds	r3, r7, #7
 8000dd6:	701a      	strb	r2, [r3, #0]
	mp3_folder = folder;
 8000dd8:	4b03      	ldr	r3, [pc, #12]	; (8000de8 <MP3_SetFolder+0x1c>)
 8000dda:	1dfa      	adds	r2, r7, #7
 8000ddc:	7812      	ldrb	r2, [r2, #0]
 8000dde:	701a      	strb	r2, [r3, #0]
}
 8000de0:	46c0      	nop			; (mov r8, r8)
 8000de2:	46bd      	mov	sp, r7
 8000de4:	b002      	add	sp, #8
 8000de6:	bd80      	pop	{r7, pc}
 8000de8:	20000048 	.word	0x20000048

08000dec <MP3_ClearRXBuffer>:
//------------------------------    ClearRXBuffer    --------------------------------------------------
/* Clear receive data buffer.
 * DFPlayer sends messages when certain events.
 * This buffer is used to receive messages from the player.
*/
void MP3_ClearRXBuffer(void) {
 8000dec:	b580      	push	{r7, lr}
 8000dee:	af00      	add	r7, sp, #0
	for (mp3_RXi = 0; mp3_RXi < MP3_RX_BUF_SIZE; mp3_RXi ++)
 8000df0:	4b0e      	ldr	r3, [pc, #56]	; (8000e2c <MP3_ClearRXBuffer+0x40>)
 8000df2:	2200      	movs	r2, #0
 8000df4:	701a      	strb	r2, [r3, #0]
 8000df6:	e00d      	b.n	8000e14 <MP3_ClearRXBuffer+0x28>
		mp3_RX_Buf[mp3_RXi] = '\0';
 8000df8:	4b0c      	ldr	r3, [pc, #48]	; (8000e2c <MP3_ClearRXBuffer+0x40>)
 8000dfa:	781b      	ldrb	r3, [r3, #0]
 8000dfc:	b2db      	uxtb	r3, r3
 8000dfe:	001a      	movs	r2, r3
 8000e00:	4b0b      	ldr	r3, [pc, #44]	; (8000e30 <MP3_ClearRXBuffer+0x44>)
 8000e02:	2100      	movs	r1, #0
 8000e04:	5499      	strb	r1, [r3, r2]
	for (mp3_RXi = 0; mp3_RXi < MP3_RX_BUF_SIZE; mp3_RXi ++)
 8000e06:	4b09      	ldr	r3, [pc, #36]	; (8000e2c <MP3_ClearRXBuffer+0x40>)
 8000e08:	781b      	ldrb	r3, [r3, #0]
 8000e0a:	b2db      	uxtb	r3, r3
 8000e0c:	3301      	adds	r3, #1
 8000e0e:	b2da      	uxtb	r2, r3
 8000e10:	4b06      	ldr	r3, [pc, #24]	; (8000e2c <MP3_ClearRXBuffer+0x40>)
 8000e12:	701a      	strb	r2, [r3, #0]
 8000e14:	4b05      	ldr	r3, [pc, #20]	; (8000e2c <MP3_ClearRXBuffer+0x40>)
 8000e16:	781b      	ldrb	r3, [r3, #0]
 8000e18:	b2db      	uxtb	r3, r3
 8000e1a:	2b13      	cmp	r3, #19
 8000e1c:	d9ec      	bls.n	8000df8 <MP3_ClearRXBuffer+0xc>
	mp3_RXi = 0;
 8000e1e:	4b03      	ldr	r3, [pc, #12]	; (8000e2c <MP3_ClearRXBuffer+0x40>)
 8000e20:	2200      	movs	r2, #0
 8000e22:	701a      	strb	r2, [r3, #0]
}
 8000e24:	46c0      	nop			; (mov r8, r8)
 8000e26:	46bd      	mov	sp, r7
 8000e28:	bd80      	pop	{r7, pc}
 8000e2a:	46c0      	nop			; (mov r8, r8)
 8000e2c:	20000dd9 	.word	0x20000dd9
 8000e30:	20000078 	.word	0x20000078

08000e34 <USART2_IRQHandler>:

void USART2_IRQHandler(void){
 8000e34:	b580      	push	{r7, lr}
 8000e36:	af00      	add	r7, sp, #0

	if (USART2->ISR & USART_ISR_RXNE){      //Флаг приема байта
 8000e38:	4b22      	ldr	r3, [pc, #136]	; (8000ec4 <USART2_IRQHandler+0x90>)
 8000e3a:	69db      	ldr	r3, [r3, #28]
 8000e3c:	2220      	movs	r2, #32
 8000e3e:	4013      	ands	r3, r2
 8000e40:	d032      	beq.n	8000ea8 <USART2_IRQHandler+0x74>
		USART2->RQR |= USART_RQR_RXFRQ;
 8000e42:	4b20      	ldr	r3, [pc, #128]	; (8000ec4 <USART2_IRQHandler+0x90>)
 8000e44:	4a1f      	ldr	r2, [pc, #124]	; (8000ec4 <USART2_IRQHandler+0x90>)
 8000e46:	6992      	ldr	r2, [r2, #24]
 8000e48:	2108      	movs	r1, #8
 8000e4a:	430a      	orrs	r2, r1
 8000e4c:	619a      	str	r2, [r3, #24]
		//USART2_Send((USART2->RDR)+1);

		mp3_RXc = USART2->RDR;//USART_ReceiveData(USART2);
 8000e4e:	4b1d      	ldr	r3, [pc, #116]	; (8000ec4 <USART2_IRQHandler+0x90>)
 8000e50:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 8000e52:	b29b      	uxth	r3, r3
 8000e54:	b2da      	uxtb	r2, r3
 8000e56:	4b1c      	ldr	r3, [pc, #112]	; (8000ec8 <USART2_IRQHandler+0x94>)
 8000e58:	701a      	strb	r2, [r3, #0]
		mp3_RX_Buf[mp3_RXi] = mp3_RXc;
 8000e5a:	4b1c      	ldr	r3, [pc, #112]	; (8000ecc <USART2_IRQHandler+0x98>)
 8000e5c:	781b      	ldrb	r3, [r3, #0]
 8000e5e:	b2db      	uxtb	r3, r3
 8000e60:	001a      	movs	r2, r3
 8000e62:	4b19      	ldr	r3, [pc, #100]	; (8000ec8 <USART2_IRQHandler+0x94>)
 8000e64:	781b      	ldrb	r3, [r3, #0]
 8000e66:	b2d9      	uxtb	r1, r3
 8000e68:	4b19      	ldr	r3, [pc, #100]	; (8000ed0 <USART2_IRQHandler+0x9c>)
 8000e6a:	5499      	strb	r1, [r3, r2]
		mp3_RXi++;
 8000e6c:	4b17      	ldr	r3, [pc, #92]	; (8000ecc <USART2_IRQHandler+0x98>)
 8000e6e:	781b      	ldrb	r3, [r3, #0]
 8000e70:	b2db      	uxtb	r3, r3
 8000e72:	3301      	adds	r3, #1
 8000e74:	b2da      	uxtb	r2, r3
 8000e76:	4b15      	ldr	r3, [pc, #84]	; (8000ecc <USART2_IRQHandler+0x98>)
 8000e78:	701a      	strb	r2, [r3, #0]

		if (mp3_RXc != 0xEF) { // End of DFPlayer message
 8000e7a:	4b13      	ldr	r3, [pc, #76]	; (8000ec8 <USART2_IRQHandler+0x94>)
 8000e7c:	781b      	ldrb	r3, [r3, #0]
 8000e7e:	b2db      	uxtb	r3, r3
 8000e80:	2bef      	cmp	r3, #239	; 0xef
 8000e82:	d007      	beq.n	8000e94 <USART2_IRQHandler+0x60>
			if (mp3_RXi > MP3_RX_BUF_SIZE-1) {
 8000e84:	4b11      	ldr	r3, [pc, #68]	; (8000ecc <USART2_IRQHandler+0x98>)
 8000e86:	781b      	ldrb	r3, [r3, #0]
 8000e88:	b2db      	uxtb	r3, r3
 8000e8a:	2b13      	cmp	r3, #19
 8000e8c:	d90c      	bls.n	8000ea8 <USART2_IRQHandler+0x74>
				MP3_ClearRXBuffer();
 8000e8e:	f7ff ffad 	bl	8000dec <MP3_ClearRXBuffer>
 8000e92:	e009      	b.n	8000ea8 <USART2_IRQHandler+0x74>
			}
		}
		else {
			//if (RX_BUF[3] == 0x3C) { // U-DISK finished playing tracks
			//if (RX_BUF[3] == 0x3E) { // FLASH finished playing tracks
			if (mp3_RX_Buf[3] == 0x3D) { // TF card finished playing tracks
 8000e94:	4b0e      	ldr	r3, [pc, #56]	; (8000ed0 <USART2_IRQHandler+0x9c>)
 8000e96:	78db      	ldrb	r3, [r3, #3]
 8000e98:	b2db      	uxtb	r3, r3
 8000e9a:	2b3d      	cmp	r3, #61	; 0x3d
 8000e9c:	d102      	bne.n	8000ea4 <USART2_IRQHandler+0x70>
				mp3_flag = 1;
 8000e9e:	4b0d      	ldr	r3, [pc, #52]	; (8000ed4 <USART2_IRQHandler+0xa0>)
 8000ea0:	2201      	movs	r2, #1
 8000ea2:	701a      	strb	r2, [r3, #0]
			}
			MP3_ClearRXBuffer();
 8000ea4:	f7ff ffa2 	bl	8000dec <MP3_ClearRXBuffer>
		}
	}
	//----------   framing error   -------------------
	if (USART2->ISR & USART_ISR_FE){
 8000ea8:	4b06      	ldr	r3, [pc, #24]	; (8000ec4 <USART2_IRQHandler+0x90>)
 8000eaa:	69db      	ldr	r3, [r3, #28]
 8000eac:	2202      	movs	r2, #2
 8000eae:	4013      	ands	r3, r2
 8000eb0:	d005      	beq.n	8000ebe <USART2_IRQHandler+0x8a>
		USART2->ICR |= USART_ICR_FECF;
 8000eb2:	4b04      	ldr	r3, [pc, #16]	; (8000ec4 <USART2_IRQHandler+0x90>)
 8000eb4:	4a03      	ldr	r2, [pc, #12]	; (8000ec4 <USART2_IRQHandler+0x90>)
 8000eb6:	6a12      	ldr	r2, [r2, #32]
 8000eb8:	2102      	movs	r1, #2
 8000eba:	430a      	orrs	r2, r1
 8000ebc:	621a      	str	r2, [r3, #32]
	}
}
 8000ebe:	46c0      	nop			; (mov r8, r8)
 8000ec0:	46bd      	mov	sp, r7
 8000ec2:	bd80      	pop	{r7, pc}
 8000ec4:	40004400 	.word	0x40004400
 8000ec8:	20000dd8 	.word	0x20000dd8
 8000ecc:	20000dd9 	.word	0x20000dd9
 8000ed0:	20000078 	.word	0x20000078
 8000ed4:	2000008c 	.word	0x2000008c

08000ed8 <xEventGroupCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	EventGroupHandle_t xEventGroupCreate( void )
	{
 8000ed8:	b580      	push	{r7, lr}
 8000eda:	b082      	sub	sp, #8
 8000edc:	af00      	add	r7, sp, #0
		TickType_t alignment requirements the cast is safe.  In other cases,
		where the natural word size of the architecture is less than
		sizeof( TickType_t ), the TickType_t variables will be accessed in two
		or more reads operations, and the alignment requirements is only that
		of each individual read. */
		pxEventBits = ( EventGroup_t * ) pvPortMalloc( sizeof( EventGroup_t ) ); /*lint !e9087 !e9079 see comment above. */
 8000ede:	201c      	movs	r0, #28
 8000ee0:	f000 fa82 	bl	80013e8 <pvPortMalloc>
 8000ee4:	0003      	movs	r3, r0
 8000ee6:	607b      	str	r3, [r7, #4]

		if( pxEventBits != NULL )
 8000ee8:	687b      	ldr	r3, [r7, #4]
 8000eea:	2b00      	cmp	r3, #0
 8000eec:	d007      	beq.n	8000efe <xEventGroupCreate+0x26>
		{
			pxEventBits->uxEventBits = 0;
 8000eee:	687b      	ldr	r3, [r7, #4]
 8000ef0:	2200      	movs	r2, #0
 8000ef2:	601a      	str	r2, [r3, #0]
			vListInitialise( &( pxEventBits->xTasksWaitingForBits ) );
 8000ef4:	687b      	ldr	r3, [r7, #4]
 8000ef6:	3304      	adds	r3, #4
 8000ef8:	0018      	movs	r0, r3
 8000efa:	f000 fae5 	bl	80014c8 <vListInitialise>
		else
		{
			traceEVENT_GROUP_CREATE_FAILED(); /*lint !e9063 Else branch only exists to allow tracing and does not generate code if trace macros are not defined. */
		}

		return pxEventBits;
 8000efe:	687b      	ldr	r3, [r7, #4]
	}
 8000f00:	0018      	movs	r0, r3
 8000f02:	46bd      	mov	sp, r7
 8000f04:	b002      	add	sp, #8
 8000f06:	bd80      	pop	{r7, pc}

08000f08 <xEventGroupSync>:

#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
/*-----------------------------------------------------------*/

EventBits_t xEventGroupSync( EventGroupHandle_t xEventGroup, const EventBits_t uxBitsToSet, const EventBits_t uxBitsToWaitFor, TickType_t xTicksToWait )
{
 8000f08:	b580      	push	{r7, lr}
 8000f0a:	b08a      	sub	sp, #40	; 0x28
 8000f0c:	af00      	add	r7, sp, #0
 8000f0e:	60f8      	str	r0, [r7, #12]
 8000f10:	60b9      	str	r1, [r7, #8]
 8000f12:	607a      	str	r2, [r7, #4]
 8000f14:	603b      	str	r3, [r7, #0]
EventBits_t uxOriginalBitValue, uxReturn;
EventGroup_t *pxEventBits = xEventGroup;
 8000f16:	68fb      	ldr	r3, [r7, #12]
 8000f18:	623b      	str	r3, [r7, #32]
BaseType_t xAlreadyYielded;
BaseType_t xTimeoutOccurred = pdFALSE;
 8000f1a:	2300      	movs	r3, #0
 8000f1c:	61fb      	str	r3, [r7, #28]

	configASSERT( ( uxBitsToWaitFor & eventEVENT_BITS_CONTROL_BYTES ) == 0 );
 8000f1e:	687b      	ldr	r3, [r7, #4]
 8000f20:	0e1b      	lsrs	r3, r3, #24
 8000f22:	061b      	lsls	r3, r3, #24
 8000f24:	d001      	beq.n	8000f2a <xEventGroupSync+0x22>
 8000f26:	b672      	cpsid	i
 8000f28:	e7fe      	b.n	8000f28 <xEventGroupSync+0x20>
	configASSERT( uxBitsToWaitFor != 0 );
 8000f2a:	687b      	ldr	r3, [r7, #4]
 8000f2c:	2b00      	cmp	r3, #0
 8000f2e:	d101      	bne.n	8000f34 <xEventGroupSync+0x2c>
 8000f30:	b672      	cpsid	i
 8000f32:	e7fe      	b.n	8000f32 <xEventGroupSync+0x2a>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8000f34:	f003 fe5c 	bl	8004bf0 <xTaskGetSchedulerState>
 8000f38:	1e03      	subs	r3, r0, #0
 8000f3a:	d102      	bne.n	8000f42 <xEventGroupSync+0x3a>
 8000f3c:	683b      	ldr	r3, [r7, #0]
 8000f3e:	2b00      	cmp	r3, #0
 8000f40:	d101      	bne.n	8000f46 <xEventGroupSync+0x3e>
 8000f42:	2301      	movs	r3, #1
 8000f44:	e000      	b.n	8000f48 <xEventGroupSync+0x40>
 8000f46:	2300      	movs	r3, #0
 8000f48:	2b00      	cmp	r3, #0
 8000f4a:	d101      	bne.n	8000f50 <xEventGroupSync+0x48>
 8000f4c:	b672      	cpsid	i
 8000f4e:	e7fe      	b.n	8000f4e <xEventGroupSync+0x46>
	}
	#endif

	vTaskSuspendAll();
 8000f50:	f003 f82a 	bl	8003fa8 <vTaskSuspendAll>
	{
		uxOriginalBitValue = pxEventBits->uxEventBits;
 8000f54:	6a3b      	ldr	r3, [r7, #32]
 8000f56:	681b      	ldr	r3, [r3, #0]
 8000f58:	61bb      	str	r3, [r7, #24]

		( void ) xEventGroupSetBits( xEventGroup, uxBitsToSet );
 8000f5a:	68ba      	ldr	r2, [r7, #8]
 8000f5c:	68fb      	ldr	r3, [r7, #12]
 8000f5e:	0011      	movs	r1, r2
 8000f60:	0018      	movs	r0, r3
 8000f62:	f000 f940 	bl	80011e6 <xEventGroupSetBits>

		if( ( ( uxOriginalBitValue | uxBitsToSet ) & uxBitsToWaitFor ) == uxBitsToWaitFor )
 8000f66:	69ba      	ldr	r2, [r7, #24]
 8000f68:	68bb      	ldr	r3, [r7, #8]
 8000f6a:	4313      	orrs	r3, r2
 8000f6c:	687a      	ldr	r2, [r7, #4]
 8000f6e:	401a      	ands	r2, r3
 8000f70:	687b      	ldr	r3, [r7, #4]
 8000f72:	429a      	cmp	r2, r3
 8000f74:	d10d      	bne.n	8000f92 <xEventGroupSync+0x8a>
		{
			/* All the rendezvous bits are now set - no need to block. */
			uxReturn = ( uxOriginalBitValue | uxBitsToSet );
 8000f76:	69ba      	ldr	r2, [r7, #24]
 8000f78:	68bb      	ldr	r3, [r7, #8]
 8000f7a:	4313      	orrs	r3, r2
 8000f7c:	627b      	str	r3, [r7, #36]	; 0x24

			/* Rendezvous always clear the bits.  They will have been cleared
			already unless this is the only task in the rendezvous. */
			pxEventBits->uxEventBits &= ~uxBitsToWaitFor;
 8000f7e:	6a3b      	ldr	r3, [r7, #32]
 8000f80:	681b      	ldr	r3, [r3, #0]
 8000f82:	687a      	ldr	r2, [r7, #4]
 8000f84:	43d2      	mvns	r2, r2
 8000f86:	401a      	ands	r2, r3
 8000f88:	6a3b      	ldr	r3, [r7, #32]
 8000f8a:	601a      	str	r2, [r3, #0]

			xTicksToWait = 0;
 8000f8c:	2300      	movs	r3, #0
 8000f8e:	603b      	str	r3, [r7, #0]
 8000f90:	e014      	b.n	8000fbc <xEventGroupSync+0xb4>
		}
		else
		{
			if( xTicksToWait != ( TickType_t ) 0 )
 8000f92:	683b      	ldr	r3, [r7, #0]
 8000f94:	2b00      	cmp	r3, #0
 8000f96:	d00c      	beq.n	8000fb2 <xEventGroupSync+0xaa>
				traceEVENT_GROUP_SYNC_BLOCK( xEventGroup, uxBitsToSet, uxBitsToWaitFor );

				/* Store the bits that the calling task is waiting for in the
				task's event list item so the kernel knows when a match is
				found.  Then enter the blocked state. */
				vTaskPlaceOnUnorderedEventList( &( pxEventBits->xTasksWaitingForBits ), ( uxBitsToWaitFor | eventCLEAR_EVENTS_ON_EXIT_BIT | eventWAIT_FOR_ALL_BITS ), xTicksToWait );
 8000f98:	6a3b      	ldr	r3, [r7, #32]
 8000f9a:	1d18      	adds	r0, r3, #4
 8000f9c:	687b      	ldr	r3, [r7, #4]
 8000f9e:	22a0      	movs	r2, #160	; 0xa0
 8000fa0:	04d2      	lsls	r2, r2, #19
 8000fa2:	4313      	orrs	r3, r2
 8000fa4:	683a      	ldr	r2, [r7, #0]
 8000fa6:	0019      	movs	r1, r3
 8000fa8:	f003 fad8 	bl	800455c <vTaskPlaceOnUnorderedEventList>

				/* This assignment is obsolete as uxReturn will get set after
				the task unblocks, but some compilers mistakenly generate a
				warning about uxReturn being returned without being set if the
				assignment is omitted. */
				uxReturn = 0;
 8000fac:	2300      	movs	r3, #0
 8000fae:	627b      	str	r3, [r7, #36]	; 0x24
 8000fb0:	e004      	b.n	8000fbc <xEventGroupSync+0xb4>
			}
			else
			{
				/* The rendezvous bits were not set, but no block time was
				specified - just return the current event bit value. */
				uxReturn = pxEventBits->uxEventBits;
 8000fb2:	6a3b      	ldr	r3, [r7, #32]
 8000fb4:	681b      	ldr	r3, [r3, #0]
 8000fb6:	627b      	str	r3, [r7, #36]	; 0x24
				xTimeoutOccurred = pdTRUE;
 8000fb8:	2301      	movs	r3, #1
 8000fba:	61fb      	str	r3, [r7, #28]
			}
		}
	}
	xAlreadyYielded = xTaskResumeAll();
 8000fbc:	f003 f800 	bl	8003fc0 <xTaskResumeAll>
 8000fc0:	0003      	movs	r3, r0
 8000fc2:	617b      	str	r3, [r7, #20]

	if( xTicksToWait != ( TickType_t ) 0 )
 8000fc4:	683b      	ldr	r3, [r7, #0]
 8000fc6:	2b00      	cmp	r3, #0
 8000fc8:	d027      	beq.n	800101a <xEventGroupSync+0x112>
	{
		if( xAlreadyYielded == pdFALSE )
 8000fca:	697b      	ldr	r3, [r7, #20]
 8000fcc:	2b00      	cmp	r3, #0
 8000fce:	d101      	bne.n	8000fd4 <xEventGroupSync+0xcc>
		{
			portYIELD_WITHIN_API();
 8000fd0:	f000 fbb4 	bl	800173c <vPortYield>

		/* The task blocked to wait for its required bits to be set - at this
		point either the required bits were set or the block time expired.  If
		the required bits were set they will have been stored in the task's
		event list item, and they should now be retrieved then cleared. */
		uxReturn = uxTaskResetEventItemValue();
 8000fd4:	f003 ff5c 	bl	8004e90 <uxTaskResetEventItemValue>
 8000fd8:	0003      	movs	r3, r0
 8000fda:	627b      	str	r3, [r7, #36]	; 0x24

		if( ( uxReturn & eventUNBLOCKED_DUE_TO_BIT_SET ) == ( EventBits_t ) 0 )
 8000fdc:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8000fde:	2380      	movs	r3, #128	; 0x80
 8000fe0:	049b      	lsls	r3, r3, #18
 8000fe2:	4013      	ands	r3, r2
 8000fe4:	d115      	bne.n	8001012 <xEventGroupSync+0x10a>
		{
			/* The task timed out, just return the current event bit value. */
			taskENTER_CRITICAL();
 8000fe6:	f000 fbb9 	bl	800175c <vPortEnterCritical>
			{
				uxReturn = pxEventBits->uxEventBits;
 8000fea:	6a3b      	ldr	r3, [r7, #32]
 8000fec:	681b      	ldr	r3, [r3, #0]
 8000fee:	627b      	str	r3, [r7, #36]	; 0x24

				/* Although the task got here because it timed out before the
				bits it was waiting for were set, it is possible that since it
				unblocked another task has set the bits.  If this is the case
				then it needs to clear the bits before exiting. */
				if( ( uxReturn & uxBitsToWaitFor ) == uxBitsToWaitFor )
 8000ff0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000ff2:	687a      	ldr	r2, [r7, #4]
 8000ff4:	401a      	ands	r2, r3
 8000ff6:	687b      	ldr	r3, [r7, #4]
 8000ff8:	429a      	cmp	r2, r3
 8000ffa:	d106      	bne.n	800100a <xEventGroupSync+0x102>
				{
					pxEventBits->uxEventBits &= ~uxBitsToWaitFor;
 8000ffc:	6a3b      	ldr	r3, [r7, #32]
 8000ffe:	681b      	ldr	r3, [r3, #0]
 8001000:	687a      	ldr	r2, [r7, #4]
 8001002:	43d2      	mvns	r2, r2
 8001004:	401a      	ands	r2, r3
 8001006:	6a3b      	ldr	r3, [r7, #32]
 8001008:	601a      	str	r2, [r3, #0]
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}
			}
			taskEXIT_CRITICAL();
 800100a:	f000 fbb9 	bl	8001780 <vPortExitCritical>

			xTimeoutOccurred = pdTRUE;
 800100e:	2301      	movs	r3, #1
 8001010:	61fb      	str	r3, [r7, #28]
			/* The task unblocked because the bits were set. */
		}

		/* Control bits might be set as the task had blocked should not be
		returned. */
		uxReturn &= ~eventEVENT_BITS_CONTROL_BYTES;
 8001012:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001014:	021b      	lsls	r3, r3, #8
 8001016:	0a1b      	lsrs	r3, r3, #8
 8001018:	627b      	str	r3, [r7, #36]	; 0x24
	traceEVENT_GROUP_SYNC_END( xEventGroup, uxBitsToSet, uxBitsToWaitFor, xTimeoutOccurred );

	/* Prevent compiler warnings when trace macros are not used. */
	( void ) xTimeoutOccurred;

	return uxReturn;
 800101a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 800101c:	0018      	movs	r0, r3
 800101e:	46bd      	mov	sp, r7
 8001020:	b00a      	add	sp, #40	; 0x28
 8001022:	bd80      	pop	{r7, pc}

08001024 <xEventGroupWaitBits>:
/*-----------------------------------------------------------*/

EventBits_t xEventGroupWaitBits( EventGroupHandle_t xEventGroup, const EventBits_t uxBitsToWaitFor, const BaseType_t xClearOnExit, const BaseType_t xWaitForAllBits, TickType_t xTicksToWait )
{
 8001024:	b580      	push	{r7, lr}
 8001026:	b08c      	sub	sp, #48	; 0x30
 8001028:	af00      	add	r7, sp, #0
 800102a:	60f8      	str	r0, [r7, #12]
 800102c:	60b9      	str	r1, [r7, #8]
 800102e:	607a      	str	r2, [r7, #4]
 8001030:	603b      	str	r3, [r7, #0]
EventGroup_t *pxEventBits = xEventGroup;
 8001032:	68fb      	ldr	r3, [r7, #12]
 8001034:	627b      	str	r3, [r7, #36]	; 0x24
EventBits_t uxReturn, uxControlBits = 0;
 8001036:	2300      	movs	r3, #0
 8001038:	62bb      	str	r3, [r7, #40]	; 0x28
BaseType_t xWaitConditionMet, xAlreadyYielded;
BaseType_t xTimeoutOccurred = pdFALSE;
 800103a:	2300      	movs	r3, #0
 800103c:	623b      	str	r3, [r7, #32]

	/* Check the user is not attempting to wait on the bits used by the kernel
	itself, and that at least one bit is being requested. */
	configASSERT( xEventGroup );
 800103e:	68fb      	ldr	r3, [r7, #12]
 8001040:	2b00      	cmp	r3, #0
 8001042:	d101      	bne.n	8001048 <xEventGroupWaitBits+0x24>
 8001044:	b672      	cpsid	i
 8001046:	e7fe      	b.n	8001046 <xEventGroupWaitBits+0x22>
	configASSERT( ( uxBitsToWaitFor & eventEVENT_BITS_CONTROL_BYTES ) == 0 );
 8001048:	68bb      	ldr	r3, [r7, #8]
 800104a:	0e1b      	lsrs	r3, r3, #24
 800104c:	061b      	lsls	r3, r3, #24
 800104e:	d001      	beq.n	8001054 <xEventGroupWaitBits+0x30>
 8001050:	b672      	cpsid	i
 8001052:	e7fe      	b.n	8001052 <xEventGroupWaitBits+0x2e>
	configASSERT( uxBitsToWaitFor != 0 );
 8001054:	68bb      	ldr	r3, [r7, #8]
 8001056:	2b00      	cmp	r3, #0
 8001058:	d101      	bne.n	800105e <xEventGroupWaitBits+0x3a>
 800105a:	b672      	cpsid	i
 800105c:	e7fe      	b.n	800105c <xEventGroupWaitBits+0x38>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800105e:	f003 fdc7 	bl	8004bf0 <xTaskGetSchedulerState>
 8001062:	1e03      	subs	r3, r0, #0
 8001064:	d102      	bne.n	800106c <xEventGroupWaitBits+0x48>
 8001066:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8001068:	2b00      	cmp	r3, #0
 800106a:	d101      	bne.n	8001070 <xEventGroupWaitBits+0x4c>
 800106c:	2301      	movs	r3, #1
 800106e:	e000      	b.n	8001072 <xEventGroupWaitBits+0x4e>
 8001070:	2300      	movs	r3, #0
 8001072:	2b00      	cmp	r3, #0
 8001074:	d101      	bne.n	800107a <xEventGroupWaitBits+0x56>
 8001076:	b672      	cpsid	i
 8001078:	e7fe      	b.n	8001078 <xEventGroupWaitBits+0x54>
	}
	#endif

	vTaskSuspendAll();
 800107a:	f002 ff95 	bl	8003fa8 <vTaskSuspendAll>
	{
		const EventBits_t uxCurrentEventBits = pxEventBits->uxEventBits;
 800107e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001080:	681b      	ldr	r3, [r3, #0]
 8001082:	61fb      	str	r3, [r7, #28]

		/* Check to see if the wait condition is already met or not. */
		xWaitConditionMet = prvTestWaitCondition( uxCurrentEventBits, uxBitsToWaitFor, xWaitForAllBits );
 8001084:	683a      	ldr	r2, [r7, #0]
 8001086:	68b9      	ldr	r1, [r7, #8]
 8001088:	69fb      	ldr	r3, [r7, #28]
 800108a:	0018      	movs	r0, r3
 800108c:	f000 f96c 	bl	8001368 <prvTestWaitCondition>
 8001090:	0003      	movs	r3, r0
 8001092:	61bb      	str	r3, [r7, #24]

		if( xWaitConditionMet != pdFALSE )
 8001094:	69bb      	ldr	r3, [r7, #24]
 8001096:	2b00      	cmp	r3, #0
 8001098:	d00e      	beq.n	80010b8 <xEventGroupWaitBits+0x94>
		{
			/* The wait condition has already been met so there is no need to
			block. */
			uxReturn = uxCurrentEventBits;
 800109a:	69fb      	ldr	r3, [r7, #28]
 800109c:	62fb      	str	r3, [r7, #44]	; 0x2c
			xTicksToWait = ( TickType_t ) 0;
 800109e:	2300      	movs	r3, #0
 80010a0:	63bb      	str	r3, [r7, #56]	; 0x38

			/* Clear the wait bits if requested to do so. */
			if( xClearOnExit != pdFALSE )
 80010a2:	687b      	ldr	r3, [r7, #4]
 80010a4:	2b00      	cmp	r3, #0
 80010a6:	d02a      	beq.n	80010fe <xEventGroupWaitBits+0xda>
			{
				pxEventBits->uxEventBits &= ~uxBitsToWaitFor;
 80010a8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80010aa:	681b      	ldr	r3, [r3, #0]
 80010ac:	68ba      	ldr	r2, [r7, #8]
 80010ae:	43d2      	mvns	r2, r2
 80010b0:	401a      	ands	r2, r3
 80010b2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80010b4:	601a      	str	r2, [r3, #0]
 80010b6:	e022      	b.n	80010fe <xEventGroupWaitBits+0xda>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
		else if( xTicksToWait == ( TickType_t ) 0 )
 80010b8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80010ba:	2b00      	cmp	r3, #0
 80010bc:	d104      	bne.n	80010c8 <xEventGroupWaitBits+0xa4>
		{
			/* The wait condition has not been met, but no block time was
			specified, so just return the current value. */
			uxReturn = uxCurrentEventBits;
 80010be:	69fb      	ldr	r3, [r7, #28]
 80010c0:	62fb      	str	r3, [r7, #44]	; 0x2c
			xTimeoutOccurred = pdTRUE;
 80010c2:	2301      	movs	r3, #1
 80010c4:	623b      	str	r3, [r7, #32]
 80010c6:	e01a      	b.n	80010fe <xEventGroupWaitBits+0xda>
		{
			/* The task is going to block to wait for its required bits to be
			set.  uxControlBits are used to remember the specified behaviour of
			this call to xEventGroupWaitBits() - for use when the event bits
			unblock the task. */
			if( xClearOnExit != pdFALSE )
 80010c8:	687b      	ldr	r3, [r7, #4]
 80010ca:	2b00      	cmp	r3, #0
 80010cc:	d004      	beq.n	80010d8 <xEventGroupWaitBits+0xb4>
			{
				uxControlBits |= eventCLEAR_EVENTS_ON_EXIT_BIT;
 80010ce:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80010d0:	2280      	movs	r2, #128	; 0x80
 80010d2:	0452      	lsls	r2, r2, #17
 80010d4:	4313      	orrs	r3, r2
 80010d6:	62bb      	str	r3, [r7, #40]	; 0x28
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( xWaitForAllBits != pdFALSE )
 80010d8:	683b      	ldr	r3, [r7, #0]
 80010da:	2b00      	cmp	r3, #0
 80010dc:	d004      	beq.n	80010e8 <xEventGroupWaitBits+0xc4>
			{
				uxControlBits |= eventWAIT_FOR_ALL_BITS;
 80010de:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80010e0:	2280      	movs	r2, #128	; 0x80
 80010e2:	04d2      	lsls	r2, r2, #19
 80010e4:	4313      	orrs	r3, r2
 80010e6:	62bb      	str	r3, [r7, #40]	; 0x28
			}

			/* Store the bits that the calling task is waiting for in the
			task's event list item so the kernel knows when a match is
			found.  Then enter the blocked state. */
			vTaskPlaceOnUnorderedEventList( &( pxEventBits->xTasksWaitingForBits ), ( uxBitsToWaitFor | uxControlBits ), xTicksToWait );
 80010e8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80010ea:	1d18      	adds	r0, r3, #4
 80010ec:	68ba      	ldr	r2, [r7, #8]
 80010ee:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80010f0:	4313      	orrs	r3, r2
 80010f2:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80010f4:	0019      	movs	r1, r3
 80010f6:	f003 fa31 	bl	800455c <vTaskPlaceOnUnorderedEventList>

			/* This is obsolete as it will get set after the task unblocks, but
			some compilers mistakenly generate a warning about the variable
			being returned without being set if it is not done. */
			uxReturn = 0;
 80010fa:	2300      	movs	r3, #0
 80010fc:	62fb      	str	r3, [r7, #44]	; 0x2c

			traceEVENT_GROUP_WAIT_BITS_BLOCK( xEventGroup, uxBitsToWaitFor );
		}
	}
	xAlreadyYielded = xTaskResumeAll();
 80010fe:	f002 ff5f 	bl	8003fc0 <xTaskResumeAll>
 8001102:	0003      	movs	r3, r0
 8001104:	617b      	str	r3, [r7, #20]

	if( xTicksToWait != ( TickType_t ) 0 )
 8001106:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8001108:	2b00      	cmp	r3, #0
 800110a:	d02c      	beq.n	8001166 <xEventGroupWaitBits+0x142>
	{
		if( xAlreadyYielded == pdFALSE )
 800110c:	697b      	ldr	r3, [r7, #20]
 800110e:	2b00      	cmp	r3, #0
 8001110:	d101      	bne.n	8001116 <xEventGroupWaitBits+0xf2>
		{
			portYIELD_WITHIN_API();
 8001112:	f000 fb13 	bl	800173c <vPortYield>

		/* The task blocked to wait for its required bits to be set - at this
		point either the required bits were set or the block time expired.  If
		the required bits were set they will have been stored in the task's
		event list item, and they should now be retrieved then cleared. */
		uxReturn = uxTaskResetEventItemValue();
 8001116:	f003 febb 	bl	8004e90 <uxTaskResetEventItemValue>
 800111a:	0003      	movs	r3, r0
 800111c:	62fb      	str	r3, [r7, #44]	; 0x2c

		if( ( uxReturn & eventUNBLOCKED_DUE_TO_BIT_SET ) == ( EventBits_t ) 0 )
 800111e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8001120:	2380      	movs	r3, #128	; 0x80
 8001122:	049b      	lsls	r3, r3, #18
 8001124:	4013      	ands	r3, r2
 8001126:	d11a      	bne.n	800115e <xEventGroupWaitBits+0x13a>
		{
			taskENTER_CRITICAL();
 8001128:	f000 fb18 	bl	800175c <vPortEnterCritical>
			{
				/* The task timed out, just return the current event bit value. */
				uxReturn = pxEventBits->uxEventBits;
 800112c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800112e:	681b      	ldr	r3, [r3, #0]
 8001130:	62fb      	str	r3, [r7, #44]	; 0x2c

				/* It is possible that the event bits were updated between this
				task leaving the Blocked state and running again. */
				if( prvTestWaitCondition( uxReturn, uxBitsToWaitFor, xWaitForAllBits ) != pdFALSE )
 8001132:	683a      	ldr	r2, [r7, #0]
 8001134:	68b9      	ldr	r1, [r7, #8]
 8001136:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001138:	0018      	movs	r0, r3
 800113a:	f000 f915 	bl	8001368 <prvTestWaitCondition>
 800113e:	1e03      	subs	r3, r0, #0
 8001140:	d009      	beq.n	8001156 <xEventGroupWaitBits+0x132>
				{
					if( xClearOnExit != pdFALSE )
 8001142:	687b      	ldr	r3, [r7, #4]
 8001144:	2b00      	cmp	r3, #0
 8001146:	d006      	beq.n	8001156 <xEventGroupWaitBits+0x132>
					{
						pxEventBits->uxEventBits &= ~uxBitsToWaitFor;
 8001148:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800114a:	681b      	ldr	r3, [r3, #0]
 800114c:	68ba      	ldr	r2, [r7, #8]
 800114e:	43d2      	mvns	r2, r2
 8001150:	401a      	ands	r2, r3
 8001152:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001154:	601a      	str	r2, [r3, #0]
				}
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}
				xTimeoutOccurred = pdTRUE;
 8001156:	2301      	movs	r3, #1
 8001158:	623b      	str	r3, [r7, #32]
			}
			taskEXIT_CRITICAL();
 800115a:	f000 fb11 	bl	8001780 <vPortExitCritical>
		{
			/* The task unblocked because the bits were set. */
		}

		/* The task blocked so control bits may have been set. */
		uxReturn &= ~eventEVENT_BITS_CONTROL_BYTES;
 800115e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001160:	021b      	lsls	r3, r3, #8
 8001162:	0a1b      	lsrs	r3, r3, #8
 8001164:	62fb      	str	r3, [r7, #44]	; 0x2c
	traceEVENT_GROUP_WAIT_BITS_END( xEventGroup, uxBitsToWaitFor, xTimeoutOccurred );

	/* Prevent compiler warnings when trace macros are not used. */
	( void ) xTimeoutOccurred;

	return uxReturn;
 8001166:	6afb      	ldr	r3, [r7, #44]	; 0x2c
}
 8001168:	0018      	movs	r0, r3
 800116a:	46bd      	mov	sp, r7
 800116c:	b00c      	add	sp, #48	; 0x30
 800116e:	bd80      	pop	{r7, pc}

08001170 <xEventGroupClearBits>:
/*-----------------------------------------------------------*/

EventBits_t xEventGroupClearBits( EventGroupHandle_t xEventGroup, const EventBits_t uxBitsToClear )
{
 8001170:	b580      	push	{r7, lr}
 8001172:	b084      	sub	sp, #16
 8001174:	af00      	add	r7, sp, #0
 8001176:	6078      	str	r0, [r7, #4]
 8001178:	6039      	str	r1, [r7, #0]
EventGroup_t *pxEventBits = xEventGroup;
 800117a:	687b      	ldr	r3, [r7, #4]
 800117c:	60fb      	str	r3, [r7, #12]
EventBits_t uxReturn;

	/* Check the user is not attempting to clear the bits used by the kernel
	itself. */
	configASSERT( xEventGroup );
 800117e:	687b      	ldr	r3, [r7, #4]
 8001180:	2b00      	cmp	r3, #0
 8001182:	d101      	bne.n	8001188 <xEventGroupClearBits+0x18>
 8001184:	b672      	cpsid	i
 8001186:	e7fe      	b.n	8001186 <xEventGroupClearBits+0x16>
	configASSERT( ( uxBitsToClear & eventEVENT_BITS_CONTROL_BYTES ) == 0 );
 8001188:	683b      	ldr	r3, [r7, #0]
 800118a:	0e1b      	lsrs	r3, r3, #24
 800118c:	061b      	lsls	r3, r3, #24
 800118e:	d001      	beq.n	8001194 <xEventGroupClearBits+0x24>
 8001190:	b672      	cpsid	i
 8001192:	e7fe      	b.n	8001192 <xEventGroupClearBits+0x22>

	taskENTER_CRITICAL();
 8001194:	f000 fae2 	bl	800175c <vPortEnterCritical>
	{
		traceEVENT_GROUP_CLEAR_BITS( xEventGroup, uxBitsToClear );

		/* The value returned is the event group value prior to the bits being
		cleared. */
		uxReturn = pxEventBits->uxEventBits;
 8001198:	68fb      	ldr	r3, [r7, #12]
 800119a:	681b      	ldr	r3, [r3, #0]
 800119c:	60bb      	str	r3, [r7, #8]

		/* Clear the bits. */
		pxEventBits->uxEventBits &= ~uxBitsToClear;
 800119e:	68fb      	ldr	r3, [r7, #12]
 80011a0:	681b      	ldr	r3, [r3, #0]
 80011a2:	683a      	ldr	r2, [r7, #0]
 80011a4:	43d2      	mvns	r2, r2
 80011a6:	401a      	ands	r2, r3
 80011a8:	68fb      	ldr	r3, [r7, #12]
 80011aa:	601a      	str	r2, [r3, #0]
	}
	taskEXIT_CRITICAL();
 80011ac:	f000 fae8 	bl	8001780 <vPortExitCritical>

	return uxReturn;
 80011b0:	68bb      	ldr	r3, [r7, #8]
}
 80011b2:	0018      	movs	r0, r3
 80011b4:	46bd      	mov	sp, r7
 80011b6:	b004      	add	sp, #16
 80011b8:	bd80      	pop	{r7, pc}

080011ba <xEventGroupGetBitsFromISR>:

#endif
/*-----------------------------------------------------------*/

EventBits_t xEventGroupGetBitsFromISR( EventGroupHandle_t xEventGroup )
{
 80011ba:	b580      	push	{r7, lr}
 80011bc:	b086      	sub	sp, #24
 80011be:	af00      	add	r7, sp, #0
 80011c0:	6078      	str	r0, [r7, #4]
UBaseType_t uxSavedInterruptStatus;
EventGroup_t const * const pxEventBits = xEventGroup;
 80011c2:	687b      	ldr	r3, [r7, #4]
 80011c4:	617b      	str	r3, [r7, #20]
EventBits_t uxReturn;

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 80011c6:	f000 faf3 	bl	80017b0 <ulSetInterruptMaskFromISR>
 80011ca:	0003      	movs	r3, r0
 80011cc:	613b      	str	r3, [r7, #16]
	{
		uxReturn = pxEventBits->uxEventBits;
 80011ce:	697b      	ldr	r3, [r7, #20]
 80011d0:	681b      	ldr	r3, [r3, #0]
 80011d2:	60fb      	str	r3, [r7, #12]
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );
 80011d4:	693b      	ldr	r3, [r7, #16]
 80011d6:	0018      	movs	r0, r3
 80011d8:	f000 faf0 	bl	80017bc <vClearInterruptMaskFromISR>

	return uxReturn;
 80011dc:	68fb      	ldr	r3, [r7, #12]
} /*lint !e818 EventGroupHandle_t is a typedef used in other functions to so can't be pointer to const. */
 80011de:	0018      	movs	r0, r3
 80011e0:	46bd      	mov	sp, r7
 80011e2:	b006      	add	sp, #24
 80011e4:	bd80      	pop	{r7, pc}

080011e6 <xEventGroupSetBits>:
/*-----------------------------------------------------------*/

EventBits_t xEventGroupSetBits( EventGroupHandle_t xEventGroup, const EventBits_t uxBitsToSet )
{
 80011e6:	b580      	push	{r7, lr}
 80011e8:	b08c      	sub	sp, #48	; 0x30
 80011ea:	af00      	add	r7, sp, #0
 80011ec:	6078      	str	r0, [r7, #4]
 80011ee:	6039      	str	r1, [r7, #0]
ListItem_t *pxListItem, *pxNext;
ListItem_t const *pxListEnd;
List_t const * pxList;
EventBits_t uxBitsToClear = 0, uxBitsWaitedFor, uxControlBits;
 80011f0:	2300      	movs	r3, #0
 80011f2:	62bb      	str	r3, [r7, #40]	; 0x28
EventGroup_t *pxEventBits = xEventGroup;
 80011f4:	687b      	ldr	r3, [r7, #4]
 80011f6:	623b      	str	r3, [r7, #32]
BaseType_t xMatchFound = pdFALSE;
 80011f8:	2300      	movs	r3, #0
 80011fa:	627b      	str	r3, [r7, #36]	; 0x24

	/* Check the user is not attempting to set the bits used by the kernel
	itself. */
	configASSERT( xEventGroup );
 80011fc:	687b      	ldr	r3, [r7, #4]
 80011fe:	2b00      	cmp	r3, #0
 8001200:	d101      	bne.n	8001206 <xEventGroupSetBits+0x20>
 8001202:	b672      	cpsid	i
 8001204:	e7fe      	b.n	8001204 <xEventGroupSetBits+0x1e>
	configASSERT( ( uxBitsToSet & eventEVENT_BITS_CONTROL_BYTES ) == 0 );
 8001206:	683b      	ldr	r3, [r7, #0]
 8001208:	0e1b      	lsrs	r3, r3, #24
 800120a:	061b      	lsls	r3, r3, #24
 800120c:	d001      	beq.n	8001212 <xEventGroupSetBits+0x2c>
 800120e:	b672      	cpsid	i
 8001210:	e7fe      	b.n	8001210 <xEventGroupSetBits+0x2a>

	pxList = &( pxEventBits->xTasksWaitingForBits );
 8001212:	6a3b      	ldr	r3, [r7, #32]
 8001214:	3304      	adds	r3, #4
 8001216:	61fb      	str	r3, [r7, #28]
	pxListEnd = listGET_END_MARKER( pxList ); /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8001218:	69fb      	ldr	r3, [r7, #28]
 800121a:	3308      	adds	r3, #8
 800121c:	61bb      	str	r3, [r7, #24]
	vTaskSuspendAll();
 800121e:	f002 fec3 	bl	8003fa8 <vTaskSuspendAll>
	{
		traceEVENT_GROUP_SET_BITS( xEventGroup, uxBitsToSet );

		pxListItem = listGET_HEAD_ENTRY( pxList );
 8001222:	69fb      	ldr	r3, [r7, #28]
 8001224:	68db      	ldr	r3, [r3, #12]
 8001226:	62fb      	str	r3, [r7, #44]	; 0x2c

		/* Set the bits. */
		pxEventBits->uxEventBits |= uxBitsToSet;
 8001228:	6a3b      	ldr	r3, [r7, #32]
 800122a:	681a      	ldr	r2, [r3, #0]
 800122c:	683b      	ldr	r3, [r7, #0]
 800122e:	431a      	orrs	r2, r3
 8001230:	6a3b      	ldr	r3, [r7, #32]
 8001232:	601a      	str	r2, [r3, #0]

		/* See if the new bit value should unblock any tasks. */
		while( pxListItem != pxListEnd )
 8001234:	e03d      	b.n	80012b2 <xEventGroupSetBits+0xcc>
		{
			pxNext = listGET_NEXT( pxListItem );
 8001236:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001238:	685b      	ldr	r3, [r3, #4]
 800123a:	617b      	str	r3, [r7, #20]
			uxBitsWaitedFor = listGET_LIST_ITEM_VALUE( pxListItem );
 800123c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800123e:	681b      	ldr	r3, [r3, #0]
 8001240:	613b      	str	r3, [r7, #16]
			xMatchFound = pdFALSE;
 8001242:	2300      	movs	r3, #0
 8001244:	627b      	str	r3, [r7, #36]	; 0x24

			/* Split the bits waited for from the control bits. */
			uxControlBits = uxBitsWaitedFor & eventEVENT_BITS_CONTROL_BYTES;
 8001246:	693b      	ldr	r3, [r7, #16]
 8001248:	0e1b      	lsrs	r3, r3, #24
 800124a:	061b      	lsls	r3, r3, #24
 800124c:	60fb      	str	r3, [r7, #12]
			uxBitsWaitedFor &= ~eventEVENT_BITS_CONTROL_BYTES;
 800124e:	693b      	ldr	r3, [r7, #16]
 8001250:	021b      	lsls	r3, r3, #8
 8001252:	0a1b      	lsrs	r3, r3, #8
 8001254:	613b      	str	r3, [r7, #16]

			if( ( uxControlBits & eventWAIT_FOR_ALL_BITS ) == ( EventBits_t ) 0 )
 8001256:	68fa      	ldr	r2, [r7, #12]
 8001258:	2380      	movs	r3, #128	; 0x80
 800125a:	04db      	lsls	r3, r3, #19
 800125c:	4013      	ands	r3, r2
 800125e:	d107      	bne.n	8001270 <xEventGroupSetBits+0x8a>
			{
				/* Just looking for single bit being set. */
				if( ( uxBitsWaitedFor & pxEventBits->uxEventBits ) != ( EventBits_t ) 0 )
 8001260:	6a3b      	ldr	r3, [r7, #32]
 8001262:	681b      	ldr	r3, [r3, #0]
 8001264:	693a      	ldr	r2, [r7, #16]
 8001266:	4013      	ands	r3, r2
 8001268:	d00b      	beq.n	8001282 <xEventGroupSetBits+0x9c>
				{
					xMatchFound = pdTRUE;
 800126a:	2301      	movs	r3, #1
 800126c:	627b      	str	r3, [r7, #36]	; 0x24
 800126e:	e008      	b.n	8001282 <xEventGroupSetBits+0x9c>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}
			}
			else if( ( uxBitsWaitedFor & pxEventBits->uxEventBits ) == uxBitsWaitedFor )
 8001270:	6a3b      	ldr	r3, [r7, #32]
 8001272:	681b      	ldr	r3, [r3, #0]
 8001274:	693a      	ldr	r2, [r7, #16]
 8001276:	401a      	ands	r2, r3
 8001278:	693b      	ldr	r3, [r7, #16]
 800127a:	429a      	cmp	r2, r3
 800127c:	d101      	bne.n	8001282 <xEventGroupSetBits+0x9c>
			{
				/* All bits are set. */
				xMatchFound = pdTRUE;
 800127e:	2301      	movs	r3, #1
 8001280:	627b      	str	r3, [r7, #36]	; 0x24
			else
			{
				/* Need all bits to be set, but not all the bits were set. */
			}

			if( xMatchFound != pdFALSE )
 8001282:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001284:	2b00      	cmp	r3, #0
 8001286:	d012      	beq.n	80012ae <xEventGroupSetBits+0xc8>
			{
				/* The bits match.  Should the bits be cleared on exit? */
				if( ( uxControlBits & eventCLEAR_EVENTS_ON_EXIT_BIT ) != ( EventBits_t ) 0 )
 8001288:	68fa      	ldr	r2, [r7, #12]
 800128a:	2380      	movs	r3, #128	; 0x80
 800128c:	045b      	lsls	r3, r3, #17
 800128e:	4013      	ands	r3, r2
 8001290:	d003      	beq.n	800129a <xEventGroupSetBits+0xb4>
				{
					uxBitsToClear |= uxBitsWaitedFor;
 8001292:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8001294:	693b      	ldr	r3, [r7, #16]
 8001296:	4313      	orrs	r3, r2
 8001298:	62bb      	str	r3, [r7, #40]	; 0x28
				/* Store the actual event flag value in the task's event list
				item before removing the task from the event list.  The
				eventUNBLOCKED_DUE_TO_BIT_SET bit is set so the task knows
				that is was unblocked due to its required bits matching, rather
				than because it timed out. */
				vTaskRemoveFromUnorderedEventList( pxListItem, pxEventBits->uxEventBits | eventUNBLOCKED_DUE_TO_BIT_SET );
 800129a:	6a3b      	ldr	r3, [r7, #32]
 800129c:	681b      	ldr	r3, [r3, #0]
 800129e:	2280      	movs	r2, #128	; 0x80
 80012a0:	0492      	lsls	r2, r2, #18
 80012a2:	431a      	orrs	r2, r3
 80012a4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80012a6:	0011      	movs	r1, r2
 80012a8:	0018      	movs	r0, r3
 80012aa:	f003 fa07 	bl	80046bc <vTaskRemoveFromUnorderedEventList>
			}

			/* Move onto the next list item.  Note pxListItem->pxNext is not
			used here as the list item may have been removed from the event list
			and inserted into the ready/pending reading list. */
			pxListItem = pxNext;
 80012ae:	697b      	ldr	r3, [r7, #20]
 80012b0:	62fb      	str	r3, [r7, #44]	; 0x2c
		while( pxListItem != pxListEnd )
 80012b2:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80012b4:	69bb      	ldr	r3, [r7, #24]
 80012b6:	429a      	cmp	r2, r3
 80012b8:	d1bd      	bne.n	8001236 <xEventGroupSetBits+0x50>
		}

		/* Clear any bits that matched when the eventCLEAR_EVENTS_ON_EXIT_BIT
		bit was set in the control word. */
		pxEventBits->uxEventBits &= ~uxBitsToClear;
 80012ba:	6a3b      	ldr	r3, [r7, #32]
 80012bc:	681b      	ldr	r3, [r3, #0]
 80012be:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80012c0:	43d2      	mvns	r2, r2
 80012c2:	401a      	ands	r2, r3
 80012c4:	6a3b      	ldr	r3, [r7, #32]
 80012c6:	601a      	str	r2, [r3, #0]
	}
	( void ) xTaskResumeAll();
 80012c8:	f002 fe7a 	bl	8003fc0 <xTaskResumeAll>

	return pxEventBits->uxEventBits;
 80012cc:	6a3b      	ldr	r3, [r7, #32]
 80012ce:	681b      	ldr	r3, [r3, #0]
}
 80012d0:	0018      	movs	r0, r3
 80012d2:	46bd      	mov	sp, r7
 80012d4:	b00c      	add	sp, #48	; 0x30
 80012d6:	bd80      	pop	{r7, pc}

080012d8 <vEventGroupDelete>:
/*-----------------------------------------------------------*/

void vEventGroupDelete( EventGroupHandle_t xEventGroup )
{
 80012d8:	b580      	push	{r7, lr}
 80012da:	b084      	sub	sp, #16
 80012dc:	af00      	add	r7, sp, #0
 80012de:	6078      	str	r0, [r7, #4]
EventGroup_t *pxEventBits = xEventGroup;
 80012e0:	687b      	ldr	r3, [r7, #4]
 80012e2:	60fb      	str	r3, [r7, #12]
const List_t *pxTasksWaitingForBits = &( pxEventBits->xTasksWaitingForBits );
 80012e4:	68fb      	ldr	r3, [r7, #12]
 80012e6:	3304      	adds	r3, #4
 80012e8:	60bb      	str	r3, [r7, #8]

	vTaskSuspendAll();
 80012ea:	f002 fe5d 	bl	8003fa8 <vTaskSuspendAll>
	{
		traceEVENT_GROUP_DELETE( xEventGroup );

		while( listCURRENT_LIST_LENGTH( pxTasksWaitingForBits ) > ( UBaseType_t ) 0 )
 80012ee:	e00f      	b.n	8001310 <vEventGroupDelete+0x38>
		{
			/* Unblock the task, returning 0 as the event list is being deleted
			and cannot therefore have any bits set. */
			configASSERT( pxTasksWaitingForBits->xListEnd.pxNext != ( const ListItem_t * ) &( pxTasksWaitingForBits->xListEnd ) );
 80012f0:	68bb      	ldr	r3, [r7, #8]
 80012f2:	68da      	ldr	r2, [r3, #12]
 80012f4:	68bb      	ldr	r3, [r7, #8]
 80012f6:	3308      	adds	r3, #8
 80012f8:	429a      	cmp	r2, r3
 80012fa:	d101      	bne.n	8001300 <vEventGroupDelete+0x28>
 80012fc:	b672      	cpsid	i
 80012fe:	e7fe      	b.n	80012fe <vEventGroupDelete+0x26>
			vTaskRemoveFromUnorderedEventList( pxTasksWaitingForBits->xListEnd.pxNext, eventUNBLOCKED_DUE_TO_BIT_SET );
 8001300:	68bb      	ldr	r3, [r7, #8]
 8001302:	68da      	ldr	r2, [r3, #12]
 8001304:	2380      	movs	r3, #128	; 0x80
 8001306:	049b      	lsls	r3, r3, #18
 8001308:	0019      	movs	r1, r3
 800130a:	0010      	movs	r0, r2
 800130c:	f003 f9d6 	bl	80046bc <vTaskRemoveFromUnorderedEventList>
		while( listCURRENT_LIST_LENGTH( pxTasksWaitingForBits ) > ( UBaseType_t ) 0 )
 8001310:	68bb      	ldr	r3, [r7, #8]
 8001312:	681b      	ldr	r3, [r3, #0]
 8001314:	2b00      	cmp	r3, #0
 8001316:	d1eb      	bne.n	80012f0 <vEventGroupDelete+0x18>

		#if( ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 0 ) )
		{
			/* The event group can only have been allocated dynamically - free
			it again. */
			vPortFree( pxEventBits );
 8001318:	68fb      	ldr	r3, [r7, #12]
 800131a:	0018      	movs	r0, r3
 800131c:	f000 f8ae 	bl	800147c <vPortFree>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
	( void ) xTaskResumeAll();
 8001320:	f002 fe4e 	bl	8003fc0 <xTaskResumeAll>
}
 8001324:	46c0      	nop			; (mov r8, r8)
 8001326:	46bd      	mov	sp, r7
 8001328:	b004      	add	sp, #16
 800132a:	bd80      	pop	{r7, pc}

0800132c <vEventGroupSetBitsCallback>:
/*-----------------------------------------------------------*/

/* For internal use only - execute a 'set bits' command that was pended from
an interrupt. */
void vEventGroupSetBitsCallback( void *pvEventGroup, const uint32_t ulBitsToSet )
{
 800132c:	b580      	push	{r7, lr}
 800132e:	b082      	sub	sp, #8
 8001330:	af00      	add	r7, sp, #0
 8001332:	6078      	str	r0, [r7, #4]
 8001334:	6039      	str	r1, [r7, #0]
	( void ) xEventGroupSetBits( pvEventGroup, ( EventBits_t ) ulBitsToSet ); /*lint !e9079 Can't avoid cast to void* as a generic timer callback prototype. Callback casts back to original type so safe. */
 8001336:	683a      	ldr	r2, [r7, #0]
 8001338:	687b      	ldr	r3, [r7, #4]
 800133a:	0011      	movs	r1, r2
 800133c:	0018      	movs	r0, r3
 800133e:	f7ff ff52 	bl	80011e6 <xEventGroupSetBits>
}
 8001342:	46c0      	nop			; (mov r8, r8)
 8001344:	46bd      	mov	sp, r7
 8001346:	b002      	add	sp, #8
 8001348:	bd80      	pop	{r7, pc}

0800134a <vEventGroupClearBitsCallback>:
/*-----------------------------------------------------------*/

/* For internal use only - execute a 'clear bits' command that was pended from
an interrupt. */
void vEventGroupClearBitsCallback( void *pvEventGroup, const uint32_t ulBitsToClear )
{
 800134a:	b580      	push	{r7, lr}
 800134c:	b082      	sub	sp, #8
 800134e:	af00      	add	r7, sp, #0
 8001350:	6078      	str	r0, [r7, #4]
 8001352:	6039      	str	r1, [r7, #0]
	( void ) xEventGroupClearBits( pvEventGroup, ( EventBits_t ) ulBitsToClear ); /*lint !e9079 Can't avoid cast to void* as a generic timer callback prototype. Callback casts back to original type so safe. */
 8001354:	683a      	ldr	r2, [r7, #0]
 8001356:	687b      	ldr	r3, [r7, #4]
 8001358:	0011      	movs	r1, r2
 800135a:	0018      	movs	r0, r3
 800135c:	f7ff ff08 	bl	8001170 <xEventGroupClearBits>
}
 8001360:	46c0      	nop			; (mov r8, r8)
 8001362:	46bd      	mov	sp, r7
 8001364:	b002      	add	sp, #8
 8001366:	bd80      	pop	{r7, pc}

08001368 <prvTestWaitCondition>:
/*-----------------------------------------------------------*/

static BaseType_t prvTestWaitCondition( const EventBits_t uxCurrentEventBits, const EventBits_t uxBitsToWaitFor, const BaseType_t xWaitForAllBits )
{
 8001368:	b580      	push	{r7, lr}
 800136a:	b086      	sub	sp, #24
 800136c:	af00      	add	r7, sp, #0
 800136e:	60f8      	str	r0, [r7, #12]
 8001370:	60b9      	str	r1, [r7, #8]
 8001372:	607a      	str	r2, [r7, #4]
BaseType_t xWaitConditionMet = pdFALSE;
 8001374:	2300      	movs	r3, #0
 8001376:	617b      	str	r3, [r7, #20]

	if( xWaitForAllBits == pdFALSE )
 8001378:	687b      	ldr	r3, [r7, #4]
 800137a:	2b00      	cmp	r3, #0
 800137c:	d106      	bne.n	800138c <prvTestWaitCondition+0x24>
	{
		/* Task only has to wait for one bit within uxBitsToWaitFor to be
		set.  Is one already set? */
		if( ( uxCurrentEventBits & uxBitsToWaitFor ) != ( EventBits_t ) 0 )
 800137e:	68fb      	ldr	r3, [r7, #12]
 8001380:	68ba      	ldr	r2, [r7, #8]
 8001382:	4013      	ands	r3, r2
 8001384:	d00a      	beq.n	800139c <prvTestWaitCondition+0x34>
		{
			xWaitConditionMet = pdTRUE;
 8001386:	2301      	movs	r3, #1
 8001388:	617b      	str	r3, [r7, #20]
 800138a:	e007      	b.n	800139c <prvTestWaitCondition+0x34>
	}
	else
	{
		/* Task has to wait for all the bits in uxBitsToWaitFor to be set.
		Are they set already? */
		if( ( uxCurrentEventBits & uxBitsToWaitFor ) == uxBitsToWaitFor )
 800138c:	68fb      	ldr	r3, [r7, #12]
 800138e:	68ba      	ldr	r2, [r7, #8]
 8001390:	401a      	ands	r2, r3
 8001392:	68bb      	ldr	r3, [r7, #8]
 8001394:	429a      	cmp	r2, r3
 8001396:	d101      	bne.n	800139c <prvTestWaitCondition+0x34>
		{
			xWaitConditionMet = pdTRUE;
 8001398:	2301      	movs	r3, #1
 800139a:	617b      	str	r3, [r7, #20]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	return xWaitConditionMet;
 800139c:	697b      	ldr	r3, [r7, #20]
}
 800139e:	0018      	movs	r0, r3
 80013a0:	46bd      	mov	sp, r7
 80013a2:	b006      	add	sp, #24
 80013a4:	bd80      	pop	{r7, pc}

080013a6 <uxEventGroupGetNumber>:
/*-----------------------------------------------------------*/

#if (configUSE_TRACE_FACILITY == 1)

	UBaseType_t uxEventGroupGetNumber( void* xEventGroup )
	{
 80013a6:	b580      	push	{r7, lr}
 80013a8:	b084      	sub	sp, #16
 80013aa:	af00      	add	r7, sp, #0
 80013ac:	6078      	str	r0, [r7, #4]
	UBaseType_t xReturn;
	EventGroup_t const *pxEventBits = ( EventGroup_t * ) xEventGroup; /*lint !e9087 !e9079 EventGroupHandle_t is a pointer to an EventGroup_t, but EventGroupHandle_t is kept opaque outside of this file for data hiding purposes. */
 80013ae:	687b      	ldr	r3, [r7, #4]
 80013b0:	60bb      	str	r3, [r7, #8]

		if( xEventGroup == NULL )
 80013b2:	687b      	ldr	r3, [r7, #4]
 80013b4:	2b00      	cmp	r3, #0
 80013b6:	d102      	bne.n	80013be <uxEventGroupGetNumber+0x18>
		{
			xReturn = 0;
 80013b8:	2300      	movs	r3, #0
 80013ba:	60fb      	str	r3, [r7, #12]
 80013bc:	e002      	b.n	80013c4 <uxEventGroupGetNumber+0x1e>
		}
		else
		{
			xReturn = pxEventBits->uxEventGroupNumber;
 80013be:	68bb      	ldr	r3, [r7, #8]
 80013c0:	699b      	ldr	r3, [r3, #24]
 80013c2:	60fb      	str	r3, [r7, #12]
		}

		return xReturn;
 80013c4:	68fb      	ldr	r3, [r7, #12]
	}
 80013c6:	0018      	movs	r0, r3
 80013c8:	46bd      	mov	sp, r7
 80013ca:	b004      	add	sp, #16
 80013cc:	bd80      	pop	{r7, pc}

080013ce <vEventGroupSetNumber>:
/*-----------------------------------------------------------*/

#if ( configUSE_TRACE_FACILITY == 1 )

	void vEventGroupSetNumber( void * xEventGroup, UBaseType_t uxEventGroupNumber )
	{
 80013ce:	b580      	push	{r7, lr}
 80013d0:	b082      	sub	sp, #8
 80013d2:	af00      	add	r7, sp, #0
 80013d4:	6078      	str	r0, [r7, #4]
 80013d6:	6039      	str	r1, [r7, #0]
		( ( EventGroup_t * ) xEventGroup )->uxEventGroupNumber = uxEventGroupNumber; /*lint !e9087 !e9079 EventGroupHandle_t is a pointer to an EventGroup_t, but EventGroupHandle_t is kept opaque outside of this file for data hiding purposes. */
 80013d8:	687b      	ldr	r3, [r7, #4]
 80013da:	683a      	ldr	r2, [r7, #0]
 80013dc:	619a      	str	r2, [r3, #24]
	}
 80013de:	46c0      	nop			; (mov r8, r8)
 80013e0:	46bd      	mov	sp, r7
 80013e2:	b002      	add	sp, #8
 80013e4:	bd80      	pop	{r7, pc}
	...

080013e8 <pvPortMalloc>:
static size_t xNextFreeByte = ( size_t ) 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 80013e8:	b580      	push	{r7, lr}
 80013ea:	b084      	sub	sp, #16
 80013ec:	af00      	add	r7, sp, #0
 80013ee:	6078      	str	r0, [r7, #4]
void *pvReturn = NULL;
 80013f0:	2300      	movs	r3, #0
 80013f2:	60fb      	str	r3, [r7, #12]
static uint8_t *pucAlignedHeap = NULL;

	/* Ensure that blocks are always aligned to the required number of bytes. */
	#if( portBYTE_ALIGNMENT != 1 )
	{
		if( xWantedSize & portBYTE_ALIGNMENT_MASK )
 80013f4:	687b      	ldr	r3, [r7, #4]
 80013f6:	2207      	movs	r2, #7
 80013f8:	4013      	ands	r3, r2
 80013fa:	d004      	beq.n	8001406 <pvPortMalloc+0x1e>
		{
			/* Byte alignment required. */
			xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 80013fc:	687b      	ldr	r3, [r7, #4]
 80013fe:	2207      	movs	r2, #7
 8001400:	4393      	bics	r3, r2
 8001402:	3308      	adds	r3, #8
 8001404:	607b      	str	r3, [r7, #4]
		}
	}
	#endif

	vTaskSuspendAll();
 8001406:	f002 fdcf 	bl	8003fa8 <vTaskSuspendAll>
	{
		if( pucAlignedHeap == NULL )
 800140a:	4b18      	ldr	r3, [pc, #96]	; (800146c <pvPortMalloc+0x84>)
 800140c:	681b      	ldr	r3, [r3, #0]
 800140e:	2b00      	cmp	r3, #0
 8001410:	d105      	bne.n	800141e <pvPortMalloc+0x36>
		{
			/* Ensure the heap starts on a correctly aligned boundary. */
			pucAlignedHeap = ( uint8_t * ) ( ( ( portPOINTER_SIZE_TYPE ) &ucHeap[ portBYTE_ALIGNMENT ] ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) );
 8001412:	4b17      	ldr	r3, [pc, #92]	; (8001470 <pvPortMalloc+0x88>)
 8001414:	2207      	movs	r2, #7
 8001416:	4393      	bics	r3, r2
 8001418:	001a      	movs	r2, r3
 800141a:	4b14      	ldr	r3, [pc, #80]	; (800146c <pvPortMalloc+0x84>)
 800141c:	601a      	str	r2, [r3, #0]
		}

		/* Check there is enough room left for the allocation. */
		if( ( ( xNextFreeByte + xWantedSize ) < configADJUSTED_HEAP_SIZE ) &&
 800141e:	4b15      	ldr	r3, [pc, #84]	; (8001474 <pvPortMalloc+0x8c>)
 8001420:	681a      	ldr	r2, [r3, #0]
 8001422:	687b      	ldr	r3, [r7, #4]
 8001424:	18d3      	adds	r3, r2, r3
 8001426:	4a14      	ldr	r2, [pc, #80]	; (8001478 <pvPortMalloc+0x90>)
 8001428:	4293      	cmp	r3, r2
 800142a:	d813      	bhi.n	8001454 <pvPortMalloc+0x6c>
			( ( xNextFreeByte + xWantedSize ) > xNextFreeByte )	)/* Check for overflow. */
 800142c:	4b11      	ldr	r3, [pc, #68]	; (8001474 <pvPortMalloc+0x8c>)
 800142e:	681a      	ldr	r2, [r3, #0]
 8001430:	687b      	ldr	r3, [r7, #4]
 8001432:	18d2      	adds	r2, r2, r3
 8001434:	4b0f      	ldr	r3, [pc, #60]	; (8001474 <pvPortMalloc+0x8c>)
 8001436:	681b      	ldr	r3, [r3, #0]
		if( ( ( xNextFreeByte + xWantedSize ) < configADJUSTED_HEAP_SIZE ) &&
 8001438:	429a      	cmp	r2, r3
 800143a:	d90b      	bls.n	8001454 <pvPortMalloc+0x6c>
		{
			/* Return the next free byte then increment the index past this
			block. */
			pvReturn = pucAlignedHeap + xNextFreeByte;
 800143c:	4b0b      	ldr	r3, [pc, #44]	; (800146c <pvPortMalloc+0x84>)
 800143e:	681a      	ldr	r2, [r3, #0]
 8001440:	4b0c      	ldr	r3, [pc, #48]	; (8001474 <pvPortMalloc+0x8c>)
 8001442:	681b      	ldr	r3, [r3, #0]
 8001444:	18d3      	adds	r3, r2, r3
 8001446:	60fb      	str	r3, [r7, #12]
			xNextFreeByte += xWantedSize;
 8001448:	4b0a      	ldr	r3, [pc, #40]	; (8001474 <pvPortMalloc+0x8c>)
 800144a:	681a      	ldr	r2, [r3, #0]
 800144c:	687b      	ldr	r3, [r7, #4]
 800144e:	18d2      	adds	r2, r2, r3
 8001450:	4b08      	ldr	r3, [pc, #32]	; (8001474 <pvPortMalloc+0x8c>)
 8001452:	601a      	str	r2, [r3, #0]
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 8001454:	f002 fdb4 	bl	8003fc0 <xTaskResumeAll>

	#if( configUSE_MALLOC_FAILED_HOOK == 1 )
	{
		if( pvReturn == NULL )
 8001458:	68fb      	ldr	r3, [r7, #12]
 800145a:	2b00      	cmp	r3, #0
 800145c:	d101      	bne.n	8001462 <pvPortMalloc+0x7a>
		{
			extern void vApplicationMallocFailedHook( void );
			vApplicationMallocFailedHook();
 800145e:	f005 fd7e 	bl	8006f5e <vApplicationMallocFailedHook>
		}
	}
	#endif

	return pvReturn;
 8001462:	68fb      	ldr	r3, [r7, #12]
}
 8001464:	0018      	movs	r0, r3
 8001466:	46bd      	mov	sp, r7
 8001468:	b004      	add	sp, #16
 800146a:	bd80      	pop	{r7, pc}
 800146c:	20000c94 	.word	0x20000c94
 8001470:	20000098 	.word	0x20000098
 8001474:	20000c90 	.word	0x20000c90
 8001478:	00000bf7 	.word	0x00000bf7

0800147c <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 800147c:	b580      	push	{r7, lr}
 800147e:	b082      	sub	sp, #8
 8001480:	af00      	add	r7, sp, #0
 8001482:	6078      	str	r0, [r7, #4]
	heap_4.c for alternative implementations, and the memory management pages of
	http://www.FreeRTOS.org for more information. */
	( void ) pv;

	/* Force an assert as it is invalid to call this function. */
	configASSERT( pv == NULL );
 8001484:	687b      	ldr	r3, [r7, #4]
 8001486:	2b00      	cmp	r3, #0
 8001488:	d001      	beq.n	800148e <vPortFree+0x12>
 800148a:	b672      	cpsid	i
 800148c:	e7fe      	b.n	800148c <vPortFree+0x10>
}
 800148e:	46c0      	nop			; (mov r8, r8)
 8001490:	46bd      	mov	sp, r7
 8001492:	b002      	add	sp, #8
 8001494:	bd80      	pop	{r7, pc}

08001496 <vPortInitialiseBlocks>:
/*-----------------------------------------------------------*/

void vPortInitialiseBlocks( void )
{
 8001496:	b580      	push	{r7, lr}
 8001498:	af00      	add	r7, sp, #0
	/* Only required when static memory is not cleared. */
	xNextFreeByte = ( size_t ) 0;
 800149a:	4b03      	ldr	r3, [pc, #12]	; (80014a8 <vPortInitialiseBlocks+0x12>)
 800149c:	2200      	movs	r2, #0
 800149e:	601a      	str	r2, [r3, #0]
}
 80014a0:	46c0      	nop			; (mov r8, r8)
 80014a2:	46bd      	mov	sp, r7
 80014a4:	bd80      	pop	{r7, pc}
 80014a6:	46c0      	nop			; (mov r8, r8)
 80014a8:	20000c90 	.word	0x20000c90

080014ac <xPortGetFreeHeapSize>:
/*-----------------------------------------------------------*/

size_t xPortGetFreeHeapSize( void )
{
 80014ac:	b580      	push	{r7, lr}
 80014ae:	af00      	add	r7, sp, #0
	return ( configADJUSTED_HEAP_SIZE - xNextFreeByte );
 80014b0:	4b03      	ldr	r3, [pc, #12]	; (80014c0 <xPortGetFreeHeapSize+0x14>)
 80014b2:	681b      	ldr	r3, [r3, #0]
 80014b4:	4a03      	ldr	r2, [pc, #12]	; (80014c4 <xPortGetFreeHeapSize+0x18>)
 80014b6:	1ad3      	subs	r3, r2, r3
}
 80014b8:	0018      	movs	r0, r3
 80014ba:	46bd      	mov	sp, r7
 80014bc:	bd80      	pop	{r7, pc}
 80014be:	46c0      	nop			; (mov r8, r8)
 80014c0:	20000c90 	.word	0x20000c90
 80014c4:	00000bf8 	.word	0x00000bf8

080014c8 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 80014c8:	b580      	push	{r7, lr}
 80014ca:	b082      	sub	sp, #8
 80014cc:	af00      	add	r7, sp, #0
 80014ce:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80014d0:	687b      	ldr	r3, [r7, #4]
 80014d2:	3308      	adds	r3, #8
 80014d4:	001a      	movs	r2, r3
 80014d6:	687b      	ldr	r3, [r7, #4]
 80014d8:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 80014da:	687b      	ldr	r3, [r7, #4]
 80014dc:	2201      	movs	r2, #1
 80014de:	4252      	negs	r2, r2
 80014e0:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80014e2:	687b      	ldr	r3, [r7, #4]
 80014e4:	3308      	adds	r3, #8
 80014e6:	001a      	movs	r2, r3
 80014e8:	687b      	ldr	r3, [r7, #4]
 80014ea:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80014ec:	687b      	ldr	r3, [r7, #4]
 80014ee:	3308      	adds	r3, #8
 80014f0:	001a      	movs	r2, r3
 80014f2:	687b      	ldr	r3, [r7, #4]
 80014f4:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 80014f6:	687b      	ldr	r3, [r7, #4]
 80014f8:	2200      	movs	r2, #0
 80014fa:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 80014fc:	46c0      	nop			; (mov r8, r8)
 80014fe:	46bd      	mov	sp, r7
 8001500:	b002      	add	sp, #8
 8001502:	bd80      	pop	{r7, pc}

08001504 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8001504:	b580      	push	{r7, lr}
 8001506:	b082      	sub	sp, #8
 8001508:	af00      	add	r7, sp, #0
 800150a:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 800150c:	687b      	ldr	r3, [r7, #4]
 800150e:	2200      	movs	r2, #0
 8001510:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 8001512:	46c0      	nop			; (mov r8, r8)
 8001514:	46bd      	mov	sp, r7
 8001516:	b002      	add	sp, #8
 8001518:	bd80      	pop	{r7, pc}

0800151a <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800151a:	b580      	push	{r7, lr}
 800151c:	b084      	sub	sp, #16
 800151e:	af00      	add	r7, sp, #0
 8001520:	6078      	str	r0, [r7, #4]
 8001522:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 8001524:	687b      	ldr	r3, [r7, #4]
 8001526:	685b      	ldr	r3, [r3, #4]
 8001528:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 800152a:	683b      	ldr	r3, [r7, #0]
 800152c:	68fa      	ldr	r2, [r7, #12]
 800152e:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8001530:	68fb      	ldr	r3, [r7, #12]
 8001532:	689a      	ldr	r2, [r3, #8]
 8001534:	683b      	ldr	r3, [r7, #0]
 8001536:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8001538:	68fb      	ldr	r3, [r7, #12]
 800153a:	689b      	ldr	r3, [r3, #8]
 800153c:	683a      	ldr	r2, [r7, #0]
 800153e:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8001540:	68fb      	ldr	r3, [r7, #12]
 8001542:	683a      	ldr	r2, [r7, #0]
 8001544:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 8001546:	683b      	ldr	r3, [r7, #0]
 8001548:	687a      	ldr	r2, [r7, #4]
 800154a:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800154c:	687b      	ldr	r3, [r7, #4]
 800154e:	681b      	ldr	r3, [r3, #0]
 8001550:	1c5a      	adds	r2, r3, #1
 8001552:	687b      	ldr	r3, [r7, #4]
 8001554:	601a      	str	r2, [r3, #0]
}
 8001556:	46c0      	nop			; (mov r8, r8)
 8001558:	46bd      	mov	sp, r7
 800155a:	b004      	add	sp, #16
 800155c:	bd80      	pop	{r7, pc}

0800155e <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800155e:	b580      	push	{r7, lr}
 8001560:	b084      	sub	sp, #16
 8001562:	af00      	add	r7, sp, #0
 8001564:	6078      	str	r0, [r7, #4]
 8001566:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8001568:	683b      	ldr	r3, [r7, #0]
 800156a:	681b      	ldr	r3, [r3, #0]
 800156c:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 800156e:	68bb      	ldr	r3, [r7, #8]
 8001570:	3301      	adds	r3, #1
 8001572:	d103      	bne.n	800157c <vListInsert+0x1e>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 8001574:	687b      	ldr	r3, [r7, #4]
 8001576:	691b      	ldr	r3, [r3, #16]
 8001578:	60fb      	str	r3, [r7, #12]
 800157a:	e00c      	b.n	8001596 <vListInsert+0x38>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 800157c:	687b      	ldr	r3, [r7, #4]
 800157e:	3308      	adds	r3, #8
 8001580:	60fb      	str	r3, [r7, #12]
 8001582:	e002      	b.n	800158a <vListInsert+0x2c>
 8001584:	68fb      	ldr	r3, [r7, #12]
 8001586:	685b      	ldr	r3, [r3, #4]
 8001588:	60fb      	str	r3, [r7, #12]
 800158a:	68fb      	ldr	r3, [r7, #12]
 800158c:	685b      	ldr	r3, [r3, #4]
 800158e:	681a      	ldr	r2, [r3, #0]
 8001590:	68bb      	ldr	r3, [r7, #8]
 8001592:	429a      	cmp	r2, r3
 8001594:	d9f6      	bls.n	8001584 <vListInsert+0x26>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 8001596:	68fb      	ldr	r3, [r7, #12]
 8001598:	685a      	ldr	r2, [r3, #4]
 800159a:	683b      	ldr	r3, [r7, #0]
 800159c:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 800159e:	683b      	ldr	r3, [r7, #0]
 80015a0:	685b      	ldr	r3, [r3, #4]
 80015a2:	683a      	ldr	r2, [r7, #0]
 80015a4:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 80015a6:	683b      	ldr	r3, [r7, #0]
 80015a8:	68fa      	ldr	r2, [r7, #12]
 80015aa:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 80015ac:	68fb      	ldr	r3, [r7, #12]
 80015ae:	683a      	ldr	r2, [r7, #0]
 80015b0:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 80015b2:	683b      	ldr	r3, [r7, #0]
 80015b4:	687a      	ldr	r2, [r7, #4]
 80015b6:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 80015b8:	687b      	ldr	r3, [r7, #4]
 80015ba:	681b      	ldr	r3, [r3, #0]
 80015bc:	1c5a      	adds	r2, r3, #1
 80015be:	687b      	ldr	r3, [r7, #4]
 80015c0:	601a      	str	r2, [r3, #0]
}
 80015c2:	46c0      	nop			; (mov r8, r8)
 80015c4:	46bd      	mov	sp, r7
 80015c6:	b004      	add	sp, #16
 80015c8:	bd80      	pop	{r7, pc}

080015ca <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 80015ca:	b580      	push	{r7, lr}
 80015cc:	b084      	sub	sp, #16
 80015ce:	af00      	add	r7, sp, #0
 80015d0:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 80015d2:	687b      	ldr	r3, [r7, #4]
 80015d4:	691b      	ldr	r3, [r3, #16]
 80015d6:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 80015d8:	687b      	ldr	r3, [r7, #4]
 80015da:	685b      	ldr	r3, [r3, #4]
 80015dc:	687a      	ldr	r2, [r7, #4]
 80015de:	6892      	ldr	r2, [r2, #8]
 80015e0:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 80015e2:	687b      	ldr	r3, [r7, #4]
 80015e4:	689b      	ldr	r3, [r3, #8]
 80015e6:	687a      	ldr	r2, [r7, #4]
 80015e8:	6852      	ldr	r2, [r2, #4]
 80015ea:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 80015ec:	68fb      	ldr	r3, [r7, #12]
 80015ee:	685a      	ldr	r2, [r3, #4]
 80015f0:	687b      	ldr	r3, [r7, #4]
 80015f2:	429a      	cmp	r2, r3
 80015f4:	d103      	bne.n	80015fe <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 80015f6:	687b      	ldr	r3, [r7, #4]
 80015f8:	689a      	ldr	r2, [r3, #8]
 80015fa:	68fb      	ldr	r3, [r7, #12]
 80015fc:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 80015fe:	687b      	ldr	r3, [r7, #4]
 8001600:	2200      	movs	r2, #0
 8001602:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 8001604:	68fb      	ldr	r3, [r7, #12]
 8001606:	681b      	ldr	r3, [r3, #0]
 8001608:	1e5a      	subs	r2, r3, #1
 800160a:	68fb      	ldr	r3, [r7, #12]
 800160c:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 800160e:	68fb      	ldr	r3, [r7, #12]
 8001610:	681b      	ldr	r3, [r3, #0]
}
 8001612:	0018      	movs	r0, r3
 8001614:	46bd      	mov	sp, r7
 8001616:	b004      	add	sp, #16
 8001618:	bd80      	pop	{r7, pc}
 800161a:	0000      	movs	r0, r0
 800161c:	0000      	movs	r0, r0
	...

08001620 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 8001620:	b580      	push	{r7, lr}
 8001622:	b084      	sub	sp, #16
 8001624:	af00      	add	r7, sp, #0
 8001626:	60f8      	str	r0, [r7, #12]
 8001628:	60b9      	str	r1, [r7, #8]
 800162a:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */
	pxTopOfStack--; /* Offset added to account for the way the MCU uses the stack on entry/exit of interrupts. */
 800162c:	68fb      	ldr	r3, [r7, #12]
 800162e:	3b04      	subs	r3, #4
 8001630:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 8001632:	68fb      	ldr	r3, [r7, #12]
 8001634:	2280      	movs	r2, #128	; 0x80
 8001636:	0452      	lsls	r2, r2, #17
 8001638:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800163a:	68fb      	ldr	r3, [r7, #12]
 800163c:	3b04      	subs	r3, #4
 800163e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pxCode;	/* PC */
 8001640:	68ba      	ldr	r2, [r7, #8]
 8001642:	68fb      	ldr	r3, [r7, #12]
 8001644:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8001646:	68fb      	ldr	r3, [r7, #12]
 8001648:	3b04      	subs	r3, #4
 800164a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 800164c:	4a08      	ldr	r2, [pc, #32]	; (8001670 <pxPortInitialiseStack+0x50>)
 800164e:	68fb      	ldr	r3, [r7, #12]
 8001650:	601a      	str	r2, [r3, #0]
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 8001652:	68fb      	ldr	r3, [r7, #12]
 8001654:	3b14      	subs	r3, #20
 8001656:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 8001658:	687a      	ldr	r2, [r7, #4]
 800165a:	68fb      	ldr	r3, [r7, #12]
 800165c:	601a      	str	r2, [r3, #0]
	pxTopOfStack -= 8; /* R11..R4. */
 800165e:	68fb      	ldr	r3, [r7, #12]
 8001660:	3b20      	subs	r3, #32
 8001662:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 8001664:	68fb      	ldr	r3, [r7, #12]
}
 8001666:	0018      	movs	r0, r3
 8001668:	46bd      	mov	sp, r7
 800166a:	b004      	add	sp, #16
 800166c:	bd80      	pop	{r7, pc}
 800166e:	46c0      	nop			; (mov r8, r8)
 8001670:	08001675 	.word	0x08001675

08001674 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8001674:	b580      	push	{r7, lr}
 8001676:	b082      	sub	sp, #8
 8001678:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0UL;
 800167a:	2300      	movs	r3, #0
 800167c:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 800167e:	4b07      	ldr	r3, [pc, #28]	; (800169c <prvTaskExitError+0x28>)
 8001680:	681b      	ldr	r3, [r3, #0]
 8001682:	3301      	adds	r3, #1
 8001684:	d001      	beq.n	800168a <prvTaskExitError+0x16>
 8001686:	b672      	cpsid	i
 8001688:	e7fe      	b.n	8001688 <prvTaskExitError+0x14>
	portDISABLE_INTERRUPTS();
 800168a:	b672      	cpsid	i
	while( ulDummy == 0 )
 800168c:	46c0      	nop			; (mov r8, r8)
 800168e:	687b      	ldr	r3, [r7, #4]
 8001690:	2b00      	cmp	r3, #0
 8001692:	d0fc      	beq.n	800168e <prvTaskExitError+0x1a>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 8001694:	46c0      	nop			; (mov r8, r8)
 8001696:	46bd      	mov	sp, r7
 8001698:	b002      	add	sp, #8
 800169a:	bd80      	pop	{r7, pc}
 800169c:	20000058 	.word	0x20000058

080016a0 <vPortSVCHandler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
 80016a0:	b580      	push	{r7, lr}
 80016a2:	af00      	add	r7, sp, #0
	/* This function is no longer used, but retained for backward
	compatibility. */
}
 80016a4:	46c0      	nop			; (mov r8, r8)
 80016a6:	46bd      	mov	sp, r7
 80016a8:	bd80      	pop	{r7, pc}

080016aa <vPortStartFirstTask>:
void vPortStartFirstTask( void )
{
	/* The MSP stack is not reset as, unlike on M3/4 parts, there is no vector
	table offset register that can be used to locate the initial stack value.
	Not all M0 parts have the application vector table at address 0. */
	__asm volatile(
 80016aa:	4a09      	ldr	r2, [pc, #36]	; (80016d0 <pxCurrentTCBConst2>)
 80016ac:	6813      	ldr	r3, [r2, #0]
 80016ae:	6818      	ldr	r0, [r3, #0]
 80016b0:	3020      	adds	r0, #32
 80016b2:	f380 8809 	msr	PSP, r0
 80016b6:	2002      	movs	r0, #2
 80016b8:	f380 8814 	msr	CONTROL, r0
 80016bc:	f3bf 8f6f 	isb	sy
 80016c0:	bc3f      	pop	{r0, r1, r2, r3, r4, r5}
 80016c2:	46ae      	mov	lr, r5
 80016c4:	bc08      	pop	{r3}
 80016c6:	bc04      	pop	{r2}
 80016c8:	b662      	cpsie	i
 80016ca:	4718      	bx	r3
 80016cc:	46c0      	nop			; (mov r8, r8)
 80016ce:	46c0      	nop			; (mov r8, r8)

080016d0 <pxCurrentTCBConst2>:
 80016d0:	20000c98 	.word	0x20000c98
	"	bx   r3						\n" /* Finally, jump to the user defined task code. */
	"								\n"
	"	.align 4					\n"
	"pxCurrentTCBConst2: .word pxCurrentTCB	  "
				  );
}
 80016d4:	46c0      	nop			; (mov r8, r8)

080016d6 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 80016d6:	b580      	push	{r7, lr}
 80016d8:	af00      	add	r7, sp, #0
	/* Make PendSV, CallSV and SysTick the same priority as the kernel. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 80016da:	4b0e      	ldr	r3, [pc, #56]	; (8001714 <xPortStartScheduler+0x3e>)
 80016dc:	4a0d      	ldr	r2, [pc, #52]	; (8001714 <xPortStartScheduler+0x3e>)
 80016de:	6812      	ldr	r2, [r2, #0]
 80016e0:	21ff      	movs	r1, #255	; 0xff
 80016e2:	0409      	lsls	r1, r1, #16
 80016e4:	430a      	orrs	r2, r1
 80016e6:	601a      	str	r2, [r3, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 80016e8:	4b0a      	ldr	r3, [pc, #40]	; (8001714 <xPortStartScheduler+0x3e>)
 80016ea:	4a0a      	ldr	r2, [pc, #40]	; (8001714 <xPortStartScheduler+0x3e>)
 80016ec:	6812      	ldr	r2, [r2, #0]
 80016ee:	21ff      	movs	r1, #255	; 0xff
 80016f0:	0609      	lsls	r1, r1, #24
 80016f2:	430a      	orrs	r2, r1
 80016f4:	601a      	str	r2, [r3, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 80016f6:	f000 f8a7 	bl	8001848 <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 80016fa:	4b07      	ldr	r3, [pc, #28]	; (8001718 <xPortStartScheduler+0x42>)
 80016fc:	2200      	movs	r2, #0
 80016fe:	601a      	str	r2, [r3, #0]

	/* Start the first task. */
	vPortStartFirstTask();
 8001700:	f7ff ffd3 	bl	80016aa <vPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 8001704:	f002 fe92 	bl	800442c <vTaskSwitchContext>
	prvTaskExitError();
 8001708:	f7ff ffb4 	bl	8001674 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 800170c:	2300      	movs	r3, #0
}
 800170e:	0018      	movs	r0, r3
 8001710:	46bd      	mov	sp, r7
 8001712:	bd80      	pop	{r7, pc}
 8001714:	e000ed20 	.word	0xe000ed20
 8001718:	20000058 	.word	0x20000058

0800171c <vPortEndScheduler>:
/*-----------------------------------------------------------*/

void vPortEndScheduler( void )
{
 800171c:	b580      	push	{r7, lr}
 800171e:	af00      	add	r7, sp, #0
	/* Not implemented in ports where there is nothing to return to.
	Artificially force an assert. */
	configASSERT( uxCriticalNesting == 1000UL );
 8001720:	4b05      	ldr	r3, [pc, #20]	; (8001738 <vPortEndScheduler+0x1c>)
 8001722:	681a      	ldr	r2, [r3, #0]
 8001724:	23fa      	movs	r3, #250	; 0xfa
 8001726:	009b      	lsls	r3, r3, #2
 8001728:	429a      	cmp	r2, r3
 800172a:	d001      	beq.n	8001730 <vPortEndScheduler+0x14>
 800172c:	b672      	cpsid	i
 800172e:	e7fe      	b.n	800172e <vPortEndScheduler+0x12>
}
 8001730:	46c0      	nop			; (mov r8, r8)
 8001732:	46bd      	mov	sp, r7
 8001734:	bd80      	pop	{r7, pc}
 8001736:	46c0      	nop			; (mov r8, r8)
 8001738:	20000058 	.word	0x20000058

0800173c <vPortYield>:
/*-----------------------------------------------------------*/

void vPortYield( void )
{
 800173c:	b580      	push	{r7, lr}
 800173e:	af00      	add	r7, sp, #0
	/* Set a PendSV to request a context switch. */
	portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 8001740:	4b05      	ldr	r3, [pc, #20]	; (8001758 <vPortYield+0x1c>)
 8001742:	2280      	movs	r2, #128	; 0x80
 8001744:	0552      	lsls	r2, r2, #21
 8001746:	601a      	str	r2, [r3, #0]

	/* Barriers are normally not required but do ensure the code is completely
	within the specified behaviour for the architecture. */
	__asm volatile( "dsb" ::: "memory" );
 8001748:	f3bf 8f4f 	dsb	sy
	__asm volatile( "isb" );
 800174c:	f3bf 8f6f 	isb	sy
}
 8001750:	46c0      	nop			; (mov r8, r8)
 8001752:	46bd      	mov	sp, r7
 8001754:	bd80      	pop	{r7, pc}
 8001756:	46c0      	nop			; (mov r8, r8)
 8001758:	e000ed04 	.word	0xe000ed04

0800175c <vPortEnterCritical>:
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 800175c:	b580      	push	{r7, lr}
 800175e:	af00      	add	r7, sp, #0
	portDISABLE_INTERRUPTS();
 8001760:	b672      	cpsid	i
	uxCriticalNesting++;
 8001762:	4b06      	ldr	r3, [pc, #24]	; (800177c <vPortEnterCritical+0x20>)
 8001764:	681b      	ldr	r3, [r3, #0]
 8001766:	1c5a      	adds	r2, r3, #1
 8001768:	4b04      	ldr	r3, [pc, #16]	; (800177c <vPortEnterCritical+0x20>)
 800176a:	601a      	str	r2, [r3, #0]
	__asm volatile( "dsb" ::: "memory" );
 800176c:	f3bf 8f4f 	dsb	sy
	__asm volatile( "isb" );
 8001770:	f3bf 8f6f 	isb	sy
}
 8001774:	46c0      	nop			; (mov r8, r8)
 8001776:	46bd      	mov	sp, r7
 8001778:	bd80      	pop	{r7, pc}
 800177a:	46c0      	nop			; (mov r8, r8)
 800177c:	20000058 	.word	0x20000058

08001780 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 8001780:	b580      	push	{r7, lr}
 8001782:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 8001784:	4b09      	ldr	r3, [pc, #36]	; (80017ac <vPortExitCritical+0x2c>)
 8001786:	681b      	ldr	r3, [r3, #0]
 8001788:	2b00      	cmp	r3, #0
 800178a:	d101      	bne.n	8001790 <vPortExitCritical+0x10>
 800178c:	b672      	cpsid	i
 800178e:	e7fe      	b.n	800178e <vPortExitCritical+0xe>
	uxCriticalNesting--;
 8001790:	4b06      	ldr	r3, [pc, #24]	; (80017ac <vPortExitCritical+0x2c>)
 8001792:	681b      	ldr	r3, [r3, #0]
 8001794:	1e5a      	subs	r2, r3, #1
 8001796:	4b05      	ldr	r3, [pc, #20]	; (80017ac <vPortExitCritical+0x2c>)
 8001798:	601a      	str	r2, [r3, #0]
	if( uxCriticalNesting == 0 )
 800179a:	4b04      	ldr	r3, [pc, #16]	; (80017ac <vPortExitCritical+0x2c>)
 800179c:	681b      	ldr	r3, [r3, #0]
 800179e:	2b00      	cmp	r3, #0
 80017a0:	d100      	bne.n	80017a4 <vPortExitCritical+0x24>
	{
		portENABLE_INTERRUPTS();
 80017a2:	b662      	cpsie	i
	}
}
 80017a4:	46c0      	nop			; (mov r8, r8)
 80017a6:	46bd      	mov	sp, r7
 80017a8:	bd80      	pop	{r7, pc}
 80017aa:	46c0      	nop			; (mov r8, r8)
 80017ac:	20000058 	.word	0x20000058

080017b0 <ulSetInterruptMaskFromISR>:
/*-----------------------------------------------------------*/

uint32_t ulSetInterruptMaskFromISR( void )
{
	__asm volatile(
 80017b0:	f3ef 8010 	mrs	r0, PRIMASK
 80017b4:	b672      	cpsid	i
 80017b6:	4770      	bx	lr
					" mrs r0, PRIMASK	\n"
					" cpsid i			\n"
					" bx lr				  "
					::: "memory"
				  );
}
 80017b8:	46c0      	nop			; (mov r8, r8)
 80017ba:	0018      	movs	r0, r3

080017bc <vClearInterruptMaskFromISR>:
/*-----------------------------------------------------------*/

void vClearInterruptMaskFromISR( __attribute__( ( unused ) ) uint32_t ulMask )
{
	__asm volatile(
 80017bc:	f380 8810 	msr	PRIMASK, r0
 80017c0:	4770      	bx	lr
					" msr PRIMASK, r0	\n"
					" bx lr				  "
					::: "memory"
				  );
}
 80017c2:	46c0      	nop			; (mov r8, r8)

080017c4 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 80017c4:	f3ef 8009 	mrs	r0, PSP
 80017c8:	4b11      	ldr	r3, [pc, #68]	; (8001810 <pxCurrentTCBConst>)
 80017ca:	681a      	ldr	r2, [r3, #0]
 80017cc:	3820      	subs	r0, #32
 80017ce:	6010      	str	r0, [r2, #0]
 80017d0:	c0f0      	stmia	r0!, {r4, r5, r6, r7}
 80017d2:	4644      	mov	r4, r8
 80017d4:	464d      	mov	r5, r9
 80017d6:	4656      	mov	r6, sl
 80017d8:	465f      	mov	r7, fp
 80017da:	c0f0      	stmia	r0!, {r4, r5, r6, r7}
 80017dc:	b508      	push	{r3, lr}
 80017de:	b672      	cpsid	i
 80017e0:	f002 fe24 	bl	800442c <vTaskSwitchContext>
 80017e4:	b662      	cpsie	i
 80017e6:	bc0c      	pop	{r2, r3}
 80017e8:	6811      	ldr	r1, [r2, #0]
 80017ea:	6808      	ldr	r0, [r1, #0]
 80017ec:	3010      	adds	r0, #16
 80017ee:	c8f0      	ldmia	r0!, {r4, r5, r6, r7}
 80017f0:	46a0      	mov	r8, r4
 80017f2:	46a9      	mov	r9, r5
 80017f4:	46b2      	mov	sl, r6
 80017f6:	46bb      	mov	fp, r7
 80017f8:	f380 8809 	msr	PSP, r0
 80017fc:	3820      	subs	r0, #32
 80017fe:	c8f0      	ldmia	r0!, {r4, r5, r6, r7}
 8001800:	4718      	bx	r3
 8001802:	46c0      	nop			; (mov r8, r8)
 8001804:	46c0      	nop			; (mov r8, r8)
 8001806:	46c0      	nop			; (mov r8, r8)
 8001808:	46c0      	nop			; (mov r8, r8)
 800180a:	46c0      	nop			; (mov r8, r8)
 800180c:	46c0      	nop			; (mov r8, r8)
 800180e:	46c0      	nop			; (mov r8, r8)

08001810 <pxCurrentTCBConst>:
 8001810:	20000c98 	.word	0x20000c98
	"	bx r3								\n"
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	  "
	);
}
 8001814:	46c0      	nop			; (mov r8, r8)

08001816 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8001816:	b580      	push	{r7, lr}
 8001818:	b082      	sub	sp, #8
 800181a:	af00      	add	r7, sp, #0
uint32_t ulPreviousMask;

	ulPreviousMask = portSET_INTERRUPT_MASK_FROM_ISR();
 800181c:	f7ff ffc8 	bl	80017b0 <ulSetInterruptMaskFromISR>
 8001820:	0003      	movs	r3, r0
 8001822:	607b      	str	r3, [r7, #4]
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8001824:	f002 fd4a 	bl	80042bc <xTaskIncrementTick>
 8001828:	1e03      	subs	r3, r0, #0
 800182a:	d003      	beq.n	8001834 <SysTick_Handler+0x1e>
		{
			/* Pend a context switch. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 800182c:	4b05      	ldr	r3, [pc, #20]	; (8001844 <SysTick_Handler+0x2e>)
 800182e:	2280      	movs	r2, #128	; 0x80
 8001830:	0552      	lsls	r2, r2, #21
 8001832:	601a      	str	r2, [r3, #0]
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( ulPreviousMask );
 8001834:	687b      	ldr	r3, [r7, #4]
 8001836:	0018      	movs	r0, r3
 8001838:	f7ff ffc0 	bl	80017bc <vClearInterruptMaskFromISR>
}
 800183c:	46c0      	nop			; (mov r8, r8)
 800183e:	46bd      	mov	sp, r7
 8001840:	b002      	add	sp, #8
 8001842:	bd80      	pop	{r7, pc}
 8001844:	e000ed04 	.word	0xe000ed04

08001848 <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 8001848:	b5b0      	push	{r4, r5, r7, lr}
 800184a:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR;
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and reset the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 800184c:	4b0b      	ldr	r3, [pc, #44]	; (800187c <vPortSetupTimerInterrupt+0x34>)
 800184e:	2200      	movs	r2, #0
 8001850:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8001852:	4b0b      	ldr	r3, [pc, #44]	; (8001880 <vPortSetupTimerInterrupt+0x38>)
 8001854:	2200      	movs	r2, #0
 8001856:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configCPU_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 8001858:	4c0a      	ldr	r4, [pc, #40]	; (8001884 <vPortSetupTimerInterrupt+0x3c>)
 800185a:	4b0b      	ldr	r3, [pc, #44]	; (8001888 <vPortSetupTimerInterrupt+0x40>)
 800185c:	681a      	ldr	r2, [r3, #0]
 800185e:	23fa      	movs	r3, #250	; 0xfa
 8001860:	0099      	lsls	r1, r3, #2
 8001862:	0010      	movs	r0, r2
 8001864:	f005 fc40 	bl	80070e8 <__udivsi3>
 8001868:	0003      	movs	r3, r0
 800186a:	3b01      	subs	r3, #1
 800186c:	6023      	str	r3, [r4, #0]
	portNVIC_SYSTICK_CTRL_REG = portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT;
 800186e:	4b03      	ldr	r3, [pc, #12]	; (800187c <vPortSetupTimerInterrupt+0x34>)
 8001870:	2207      	movs	r2, #7
 8001872:	601a      	str	r2, [r3, #0]
}
 8001874:	46c0      	nop			; (mov r8, r8)
 8001876:	46bd      	mov	sp, r7
 8001878:	bdb0      	pop	{r4, r5, r7, pc}
 800187a:	46c0      	nop			; (mov r8, r8)
 800187c:	e000e010 	.word	0xe000e010
 8001880:	e000e018 	.word	0xe000e018
 8001884:	e000e014 	.word	0xe000e014
 8001888:	20000044 	.word	0x20000044

0800188c <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 800188c:	b580      	push	{r7, lr}
 800188e:	b084      	sub	sp, #16
 8001890:	af00      	add	r7, sp, #0
 8001892:	6078      	str	r0, [r7, #4]
 8001894:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 8001896:	687b      	ldr	r3, [r7, #4]
 8001898:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 800189a:	68fb      	ldr	r3, [r7, #12]
 800189c:	2b00      	cmp	r3, #0
 800189e:	d101      	bne.n	80018a4 <xQueueGenericReset+0x18>
 80018a0:	b672      	cpsid	i
 80018a2:	e7fe      	b.n	80018a2 <xQueueGenericReset+0x16>

	taskENTER_CRITICAL();
 80018a4:	f7ff ff5a 	bl	800175c <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 80018a8:	68fb      	ldr	r3, [r7, #12]
 80018aa:	681a      	ldr	r2, [r3, #0]
 80018ac:	68fb      	ldr	r3, [r7, #12]
 80018ae:	6bd9      	ldr	r1, [r3, #60]	; 0x3c
 80018b0:	68fb      	ldr	r3, [r7, #12]
 80018b2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80018b4:	434b      	muls	r3, r1
 80018b6:	18d2      	adds	r2, r2, r3
 80018b8:	68fb      	ldr	r3, [r7, #12]
 80018ba:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 80018bc:	68fb      	ldr	r3, [r7, #12]
 80018be:	2200      	movs	r2, #0
 80018c0:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 80018c2:	68fb      	ldr	r3, [r7, #12]
 80018c4:	681a      	ldr	r2, [r3, #0]
 80018c6:	68fb      	ldr	r3, [r7, #12]
 80018c8:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 80018ca:	68fb      	ldr	r3, [r7, #12]
 80018cc:	681a      	ldr	r2, [r3, #0]
 80018ce:	68fb      	ldr	r3, [r7, #12]
 80018d0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80018d2:	1e59      	subs	r1, r3, #1
 80018d4:	68fb      	ldr	r3, [r7, #12]
 80018d6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80018d8:	434b      	muls	r3, r1
 80018da:	18d2      	adds	r2, r2, r3
 80018dc:	68fb      	ldr	r3, [r7, #12]
 80018de:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 80018e0:	68fb      	ldr	r3, [r7, #12]
 80018e2:	2244      	movs	r2, #68	; 0x44
 80018e4:	21ff      	movs	r1, #255	; 0xff
 80018e6:	5499      	strb	r1, [r3, r2]
		pxQueue->cTxLock = queueUNLOCKED;
 80018e8:	68fb      	ldr	r3, [r7, #12]
 80018ea:	2245      	movs	r2, #69	; 0x45
 80018ec:	21ff      	movs	r1, #255	; 0xff
 80018ee:	5499      	strb	r1, [r3, r2]

		if( xNewQueue == pdFALSE )
 80018f0:	683b      	ldr	r3, [r7, #0]
 80018f2:	2b00      	cmp	r3, #0
 80018f4:	d10d      	bne.n	8001912 <xQueueGenericReset+0x86>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80018f6:	68fb      	ldr	r3, [r7, #12]
 80018f8:	691b      	ldr	r3, [r3, #16]
 80018fa:	2b00      	cmp	r3, #0
 80018fc:	d013      	beq.n	8001926 <xQueueGenericReset+0x9a>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80018fe:	68fb      	ldr	r3, [r7, #12]
 8001900:	3310      	adds	r3, #16
 8001902:	0018      	movs	r0, r3
 8001904:	f002 fe7e 	bl	8004604 <xTaskRemoveFromEventList>
 8001908:	1e03      	subs	r3, r0, #0
 800190a:	d00c      	beq.n	8001926 <xQueueGenericReset+0x9a>
				{
					queueYIELD_IF_USING_PREEMPTION();
 800190c:	f7ff ff16 	bl	800173c <vPortYield>
 8001910:	e009      	b.n	8001926 <xQueueGenericReset+0x9a>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 8001912:	68fb      	ldr	r3, [r7, #12]
 8001914:	3310      	adds	r3, #16
 8001916:	0018      	movs	r0, r3
 8001918:	f7ff fdd6 	bl	80014c8 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 800191c:	68fb      	ldr	r3, [r7, #12]
 800191e:	3324      	adds	r3, #36	; 0x24
 8001920:	0018      	movs	r0, r3
 8001922:	f7ff fdd1 	bl	80014c8 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 8001926:	f7ff ff2b 	bl	8001780 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 800192a:	2301      	movs	r3, #1
}
 800192c:	0018      	movs	r0, r3
 800192e:	46bd      	mov	sp, r7
 8001930:	b004      	add	sp, #16
 8001932:	bd80      	pop	{r7, pc}

08001934 <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 8001934:	b590      	push	{r4, r7, lr}
 8001936:	b08b      	sub	sp, #44	; 0x2c
 8001938:	af02      	add	r7, sp, #8
 800193a:	60f8      	str	r0, [r7, #12]
 800193c:	60b9      	str	r1, [r7, #8]
 800193e:	1dfb      	adds	r3, r7, #7
 8001940:	701a      	strb	r2, [r3, #0]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8001942:	68fb      	ldr	r3, [r7, #12]
 8001944:	2b00      	cmp	r3, #0
 8001946:	d101      	bne.n	800194c <xQueueGenericCreate+0x18>
 8001948:	b672      	cpsid	i
 800194a:	e7fe      	b.n	800194a <xQueueGenericCreate+0x16>

		/* Allocate enough space to hold the maximum number of items that
		can be in the queue at any time.  It is valid for uxItemSize to be
		zero in the case the queue is used as a semaphore. */
		xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800194c:	68fb      	ldr	r3, [r7, #12]
 800194e:	68ba      	ldr	r2, [r7, #8]
 8001950:	4353      	muls	r3, r2
 8001952:	61fb      	str	r3, [r7, #28]
		alignment requirements of the Queue_t structure - which in this case
		is an int8_t *.  Therefore, whenever the stack alignment requirements
		are greater than or equal to the pointer to char requirements the cast
		is safe.  In other cases alignment requirements are not strict (one or
		two bytes). */
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 8001954:	69fb      	ldr	r3, [r7, #28]
 8001956:	3354      	adds	r3, #84	; 0x54
 8001958:	0018      	movs	r0, r3
 800195a:	f7ff fd45 	bl	80013e8 <pvPortMalloc>
 800195e:	0003      	movs	r3, r0
 8001960:	61bb      	str	r3, [r7, #24]

		if( pxNewQueue != NULL )
 8001962:	69bb      	ldr	r3, [r7, #24]
 8001964:	2b00      	cmp	r3, #0
 8001966:	d00e      	beq.n	8001986 <xQueueGenericCreate+0x52>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( uint8_t * ) pxNewQueue;
 8001968:	69bb      	ldr	r3, [r7, #24]
 800196a:	617b      	str	r3, [r7, #20]
			pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800196c:	697b      	ldr	r3, [r7, #20]
 800196e:	3354      	adds	r3, #84	; 0x54
 8001970:	617b      	str	r3, [r7, #20]
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8001972:	1dfb      	adds	r3, r7, #7
 8001974:	781c      	ldrb	r4, [r3, #0]
 8001976:	697a      	ldr	r2, [r7, #20]
 8001978:	68b9      	ldr	r1, [r7, #8]
 800197a:	68f8      	ldr	r0, [r7, #12]
 800197c:	69bb      	ldr	r3, [r7, #24]
 800197e:	9300      	str	r3, [sp, #0]
 8001980:	0023      	movs	r3, r4
 8001982:	f000 f805 	bl	8001990 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 8001986:	69bb      	ldr	r3, [r7, #24]
	}
 8001988:	0018      	movs	r0, r3
 800198a:	46bd      	mov	sp, r7
 800198c:	b009      	add	sp, #36	; 0x24
 800198e:	bd90      	pop	{r4, r7, pc}

08001990 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 8001990:	b580      	push	{r7, lr}
 8001992:	b084      	sub	sp, #16
 8001994:	af00      	add	r7, sp, #0
 8001996:	60f8      	str	r0, [r7, #12]
 8001998:	60b9      	str	r1, [r7, #8]
 800199a:	607a      	str	r2, [r7, #4]
 800199c:	001a      	movs	r2, r3
 800199e:	1cfb      	adds	r3, r7, #3
 80019a0:	701a      	strb	r2, [r3, #0]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 80019a2:	68bb      	ldr	r3, [r7, #8]
 80019a4:	2b00      	cmp	r3, #0
 80019a6:	d103      	bne.n	80019b0 <prvInitialiseNewQueue+0x20>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 80019a8:	69bb      	ldr	r3, [r7, #24]
 80019aa:	69ba      	ldr	r2, [r7, #24]
 80019ac:	601a      	str	r2, [r3, #0]
 80019ae:	e002      	b.n	80019b6 <prvInitialiseNewQueue+0x26>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 80019b0:	69bb      	ldr	r3, [r7, #24]
 80019b2:	687a      	ldr	r2, [r7, #4]
 80019b4:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 80019b6:	69bb      	ldr	r3, [r7, #24]
 80019b8:	68fa      	ldr	r2, [r7, #12]
 80019ba:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 80019bc:	69bb      	ldr	r3, [r7, #24]
 80019be:	68ba      	ldr	r2, [r7, #8]
 80019c0:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 80019c2:	69bb      	ldr	r3, [r7, #24]
 80019c4:	2101      	movs	r1, #1
 80019c6:	0018      	movs	r0, r3
 80019c8:	f7ff ff60 	bl	800188c <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 80019cc:	69bb      	ldr	r3, [r7, #24]
 80019ce:	1cfa      	adds	r2, r7, #3
 80019d0:	2150      	movs	r1, #80	; 0x50
 80019d2:	7812      	ldrb	r2, [r2, #0]
 80019d4:	545a      	strb	r2, [r3, r1]
	}
	#endif /* configUSE_TRACE_FACILITY */

	#if( configUSE_QUEUE_SETS == 1 )
	{
		pxNewQueue->pxQueueSetContainer = NULL;
 80019d6:	69bb      	ldr	r3, [r7, #24]
 80019d8:	2200      	movs	r2, #0
 80019da:	649a      	str	r2, [r3, #72]	; 0x48
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 80019dc:	46c0      	nop			; (mov r8, r8)
 80019de:	46bd      	mov	sp, r7
 80019e0:	b004      	add	sp, #16
 80019e2:	bd80      	pop	{r7, pc}

080019e4 <prvInitialiseMutex>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static void prvInitialiseMutex( Queue_t *pxNewQueue )
	{
 80019e4:	b580      	push	{r7, lr}
 80019e6:	b082      	sub	sp, #8
 80019e8:	af00      	add	r7, sp, #0
 80019ea:	6078      	str	r0, [r7, #4]
		if( pxNewQueue != NULL )
 80019ec:	687b      	ldr	r3, [r7, #4]
 80019ee:	2b00      	cmp	r3, #0
 80019f0:	d00e      	beq.n	8001a10 <prvInitialiseMutex+0x2c>
		{
			/* The queue create function will set all the queue structure members
			correctly for a generic queue, but this function is creating a
			mutex.  Overwrite those members that need to be set differently -
			in particular the information required for priority inheritance. */
			pxNewQueue->u.xSemaphore.xMutexHolder = NULL;
 80019f2:	687b      	ldr	r3, [r7, #4]
 80019f4:	2200      	movs	r2, #0
 80019f6:	609a      	str	r2, [r3, #8]
			pxNewQueue->uxQueueType = queueQUEUE_IS_MUTEX;
 80019f8:	687b      	ldr	r3, [r7, #4]
 80019fa:	2200      	movs	r2, #0
 80019fc:	601a      	str	r2, [r3, #0]

			/* In case this is a recursive mutex. */
			pxNewQueue->u.xSemaphore.uxRecursiveCallCount = 0;
 80019fe:	687b      	ldr	r3, [r7, #4]
 8001a00:	2200      	movs	r2, #0
 8001a02:	60da      	str	r2, [r3, #12]

			traceCREATE_MUTEX( pxNewQueue );

			/* Start with the semaphore in the expected state. */
			( void ) xQueueGenericSend( pxNewQueue, NULL, ( TickType_t ) 0U, queueSEND_TO_BACK );
 8001a04:	6878      	ldr	r0, [r7, #4]
 8001a06:	2300      	movs	r3, #0
 8001a08:	2200      	movs	r2, #0
 8001a0a:	2100      	movs	r1, #0
 8001a0c:	f000 f89e 	bl	8001b4c <xQueueGenericSend>
		}
		else
		{
			traceCREATE_MUTEX_FAILED();
		}
	}
 8001a10:	46c0      	nop			; (mov r8, r8)
 8001a12:	46bd      	mov	sp, r7
 8001a14:	b002      	add	sp, #8
 8001a16:	bd80      	pop	{r7, pc}

08001a18 <xQueueCreateMutex>:
/*-----------------------------------------------------------*/

#if( ( configUSE_MUTEXES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateMutex( const uint8_t ucQueueType )
	{
 8001a18:	b580      	push	{r7, lr}
 8001a1a:	b086      	sub	sp, #24
 8001a1c:	af00      	add	r7, sp, #0
 8001a1e:	0002      	movs	r2, r0
 8001a20:	1dfb      	adds	r3, r7, #7
 8001a22:	701a      	strb	r2, [r3, #0]
	QueueHandle_t xNewQueue;
	const UBaseType_t uxMutexLength = ( UBaseType_t ) 1, uxMutexSize = ( UBaseType_t ) 0;
 8001a24:	2301      	movs	r3, #1
 8001a26:	617b      	str	r3, [r7, #20]
 8001a28:	2300      	movs	r3, #0
 8001a2a:	613b      	str	r3, [r7, #16]

		xNewQueue = xQueueGenericCreate( uxMutexLength, uxMutexSize, ucQueueType );
 8001a2c:	1dfb      	adds	r3, r7, #7
 8001a2e:	781a      	ldrb	r2, [r3, #0]
 8001a30:	6939      	ldr	r1, [r7, #16]
 8001a32:	697b      	ldr	r3, [r7, #20]
 8001a34:	0018      	movs	r0, r3
 8001a36:	f7ff ff7d 	bl	8001934 <xQueueGenericCreate>
 8001a3a:	0003      	movs	r3, r0
 8001a3c:	60fb      	str	r3, [r7, #12]
		prvInitialiseMutex( ( Queue_t * ) xNewQueue );
 8001a3e:	68fb      	ldr	r3, [r7, #12]
 8001a40:	0018      	movs	r0, r3
 8001a42:	f7ff ffcf 	bl	80019e4 <prvInitialiseMutex>

		return xNewQueue;
 8001a46:	68fb      	ldr	r3, [r7, #12]
	}
 8001a48:	0018      	movs	r0, r3
 8001a4a:	46bd      	mov	sp, r7
 8001a4c:	b006      	add	sp, #24
 8001a4e:	bd80      	pop	{r7, pc}

08001a50 <xQueueGiveMutexRecursive>:
/*-----------------------------------------------------------*/

#if ( configUSE_RECURSIVE_MUTEXES == 1 )

	BaseType_t xQueueGiveMutexRecursive( QueueHandle_t xMutex )
	{
 8001a50:	b590      	push	{r4, r7, lr}
 8001a52:	b085      	sub	sp, #20
 8001a54:	af00      	add	r7, sp, #0
 8001a56:	6078      	str	r0, [r7, #4]
	BaseType_t xReturn;
	Queue_t * const pxMutex = ( Queue_t * ) xMutex;
 8001a58:	687b      	ldr	r3, [r7, #4]
 8001a5a:	60bb      	str	r3, [r7, #8]

		configASSERT( pxMutex );
 8001a5c:	68bb      	ldr	r3, [r7, #8]
 8001a5e:	2b00      	cmp	r3, #0
 8001a60:	d101      	bne.n	8001a66 <xQueueGiveMutexRecursive+0x16>
 8001a62:	b672      	cpsid	i
 8001a64:	e7fe      	b.n	8001a64 <xQueueGiveMutexRecursive+0x14>
		change outside of this task.  If this task does not hold the mutex then
		pxMutexHolder can never coincidentally equal the tasks handle, and as
		this is the only condition we are interested in it does not matter if
		pxMutexHolder is accessed simultaneously by another task.  Therefore no
		mutual exclusion is required to test the pxMutexHolder variable. */
		if( pxMutex->u.xSemaphore.xMutexHolder == xTaskGetCurrentTaskHandle() )
 8001a66:	68bb      	ldr	r3, [r7, #8]
 8001a68:	689c      	ldr	r4, [r3, #8]
 8001a6a:	f003 f8b3 	bl	8004bd4 <xTaskGetCurrentTaskHandle>
 8001a6e:	0003      	movs	r3, r0
 8001a70:	429c      	cmp	r4, r3
 8001a72:	d111      	bne.n	8001a98 <xQueueGiveMutexRecursive+0x48>
			/* uxRecursiveCallCount cannot be zero if xMutexHolder is equal to
			the task handle, therefore no underflow check is required.  Also,
			uxRecursiveCallCount is only modified by the mutex holder, and as
			there can only be one, no mutual exclusion is required to modify the
			uxRecursiveCallCount member. */
			( pxMutex->u.xSemaphore.uxRecursiveCallCount )--;
 8001a74:	68bb      	ldr	r3, [r7, #8]
 8001a76:	68db      	ldr	r3, [r3, #12]
 8001a78:	1e5a      	subs	r2, r3, #1
 8001a7a:	68bb      	ldr	r3, [r7, #8]
 8001a7c:	60da      	str	r2, [r3, #12]

			/* Has the recursive call count unwound to 0? */
			if( pxMutex->u.xSemaphore.uxRecursiveCallCount == ( UBaseType_t ) 0 )
 8001a7e:	68bb      	ldr	r3, [r7, #8]
 8001a80:	68db      	ldr	r3, [r3, #12]
 8001a82:	2b00      	cmp	r3, #0
 8001a84:	d105      	bne.n	8001a92 <xQueueGiveMutexRecursive+0x42>
			{
				/* Return the mutex.  This will automatically unblock any other
				task that might be waiting to access the mutex. */
				( void ) xQueueGenericSend( pxMutex, NULL, queueMUTEX_GIVE_BLOCK_TIME, queueSEND_TO_BACK );
 8001a86:	68b8      	ldr	r0, [r7, #8]
 8001a88:	2300      	movs	r3, #0
 8001a8a:	2200      	movs	r2, #0
 8001a8c:	2100      	movs	r1, #0
 8001a8e:	f000 f85d 	bl	8001b4c <xQueueGenericSend>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			xReturn = pdPASS;
 8001a92:	2301      	movs	r3, #1
 8001a94:	60fb      	str	r3, [r7, #12]
 8001a96:	e001      	b.n	8001a9c <xQueueGiveMutexRecursive+0x4c>
		}
		else
		{
			/* The mutex cannot be given because the calling task is not the
			holder. */
			xReturn = pdFAIL;
 8001a98:	2300      	movs	r3, #0
 8001a9a:	60fb      	str	r3, [r7, #12]

			traceGIVE_MUTEX_RECURSIVE_FAILED( pxMutex );
		}

		return xReturn;
 8001a9c:	68fb      	ldr	r3, [r7, #12]
	}
 8001a9e:	0018      	movs	r0, r3
 8001aa0:	46bd      	mov	sp, r7
 8001aa2:	b005      	add	sp, #20
 8001aa4:	bd90      	pop	{r4, r7, pc}

08001aa6 <xQueueTakeMutexRecursive>:
/*-----------------------------------------------------------*/

#if ( configUSE_RECURSIVE_MUTEXES == 1 )

	BaseType_t xQueueTakeMutexRecursive( QueueHandle_t xMutex, TickType_t xTicksToWait )
	{
 8001aa6:	b590      	push	{r4, r7, lr}
 8001aa8:	b085      	sub	sp, #20
 8001aaa:	af00      	add	r7, sp, #0
 8001aac:	6078      	str	r0, [r7, #4]
 8001aae:	6039      	str	r1, [r7, #0]
	BaseType_t xReturn;
	Queue_t * const pxMutex = ( Queue_t * ) xMutex;
 8001ab0:	687b      	ldr	r3, [r7, #4]
 8001ab2:	60bb      	str	r3, [r7, #8]

		configASSERT( pxMutex );
 8001ab4:	68bb      	ldr	r3, [r7, #8]
 8001ab6:	2b00      	cmp	r3, #0
 8001ab8:	d101      	bne.n	8001abe <xQueueTakeMutexRecursive+0x18>
 8001aba:	b672      	cpsid	i
 8001abc:	e7fe      	b.n	8001abc <xQueueTakeMutexRecursive+0x16>
		/* Comments regarding mutual exclusion as per those within
		xQueueGiveMutexRecursive(). */

		traceTAKE_MUTEX_RECURSIVE( pxMutex );

		if( pxMutex->u.xSemaphore.xMutexHolder == xTaskGetCurrentTaskHandle() )
 8001abe:	68bb      	ldr	r3, [r7, #8]
 8001ac0:	689c      	ldr	r4, [r3, #8]
 8001ac2:	f003 f887 	bl	8004bd4 <xTaskGetCurrentTaskHandle>
 8001ac6:	0003      	movs	r3, r0
 8001ac8:	429c      	cmp	r4, r3
 8001aca:	d107      	bne.n	8001adc <xQueueTakeMutexRecursive+0x36>
		{
			( pxMutex->u.xSemaphore.uxRecursiveCallCount )++;
 8001acc:	68bb      	ldr	r3, [r7, #8]
 8001ace:	68db      	ldr	r3, [r3, #12]
 8001ad0:	1c5a      	adds	r2, r3, #1
 8001ad2:	68bb      	ldr	r3, [r7, #8]
 8001ad4:	60da      	str	r2, [r3, #12]
			xReturn = pdPASS;
 8001ad6:	2301      	movs	r3, #1
 8001ad8:	60fb      	str	r3, [r7, #12]
 8001ada:	e00f      	b.n	8001afc <xQueueTakeMutexRecursive+0x56>
		}
		else
		{
			xReturn = xQueueSemaphoreTake( pxMutex, xTicksToWait );
 8001adc:	683a      	ldr	r2, [r7, #0]
 8001ade:	68bb      	ldr	r3, [r7, #8]
 8001ae0:	0011      	movs	r1, r2
 8001ae2:	0018      	movs	r0, r3
 8001ae4:	f000 fac5 	bl	8002072 <xQueueSemaphoreTake>
 8001ae8:	0003      	movs	r3, r0
 8001aea:	60fb      	str	r3, [r7, #12]

			/* pdPASS will only be returned if the mutex was successfully
			obtained.  The calling task may have entered the Blocked state
			before reaching here. */
			if( xReturn != pdFAIL )
 8001aec:	68fb      	ldr	r3, [r7, #12]
 8001aee:	2b00      	cmp	r3, #0
 8001af0:	d004      	beq.n	8001afc <xQueueTakeMutexRecursive+0x56>
			{
				( pxMutex->u.xSemaphore.uxRecursiveCallCount )++;
 8001af2:	68bb      	ldr	r3, [r7, #8]
 8001af4:	68db      	ldr	r3, [r3, #12]
 8001af6:	1c5a      	adds	r2, r3, #1
 8001af8:	68bb      	ldr	r3, [r7, #8]
 8001afa:	60da      	str	r2, [r3, #12]
			{
				traceTAKE_MUTEX_RECURSIVE_FAILED( pxMutex );
			}
		}

		return xReturn;
 8001afc:	68fb      	ldr	r3, [r7, #12]
	}
 8001afe:	0018      	movs	r0, r3
 8001b00:	46bd      	mov	sp, r7
 8001b02:	b005      	add	sp, #20
 8001b04:	bd90      	pop	{r4, r7, pc}

08001b06 <xQueueCreateCountingSemaphore>:
/*-----------------------------------------------------------*/

#if( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateCountingSemaphore( const UBaseType_t uxMaxCount, const UBaseType_t uxInitialCount )
	{
 8001b06:	b580      	push	{r7, lr}
 8001b08:	b084      	sub	sp, #16
 8001b0a:	af00      	add	r7, sp, #0
 8001b0c:	6078      	str	r0, [r7, #4]
 8001b0e:	6039      	str	r1, [r7, #0]
	QueueHandle_t xHandle;

		configASSERT( uxMaxCount != 0 );
 8001b10:	687b      	ldr	r3, [r7, #4]
 8001b12:	2b00      	cmp	r3, #0
 8001b14:	d101      	bne.n	8001b1a <xQueueCreateCountingSemaphore+0x14>
 8001b16:	b672      	cpsid	i
 8001b18:	e7fe      	b.n	8001b18 <xQueueCreateCountingSemaphore+0x12>
		configASSERT( uxInitialCount <= uxMaxCount );
 8001b1a:	683a      	ldr	r2, [r7, #0]
 8001b1c:	687b      	ldr	r3, [r7, #4]
 8001b1e:	429a      	cmp	r2, r3
 8001b20:	d901      	bls.n	8001b26 <xQueueCreateCountingSemaphore+0x20>
 8001b22:	b672      	cpsid	i
 8001b24:	e7fe      	b.n	8001b24 <xQueueCreateCountingSemaphore+0x1e>

		xHandle = xQueueGenericCreate( uxMaxCount, queueSEMAPHORE_QUEUE_ITEM_LENGTH, queueQUEUE_TYPE_COUNTING_SEMAPHORE );
 8001b26:	687b      	ldr	r3, [r7, #4]
 8001b28:	2202      	movs	r2, #2
 8001b2a:	2100      	movs	r1, #0
 8001b2c:	0018      	movs	r0, r3
 8001b2e:	f7ff ff01 	bl	8001934 <xQueueGenericCreate>
 8001b32:	0003      	movs	r3, r0
 8001b34:	60fb      	str	r3, [r7, #12]

		if( xHandle != NULL )
 8001b36:	68fb      	ldr	r3, [r7, #12]
 8001b38:	2b00      	cmp	r3, #0
 8001b3a:	d002      	beq.n	8001b42 <xQueueCreateCountingSemaphore+0x3c>
		{
			( ( Queue_t * ) xHandle )->uxMessagesWaiting = uxInitialCount;
 8001b3c:	68fb      	ldr	r3, [r7, #12]
 8001b3e:	683a      	ldr	r2, [r7, #0]
 8001b40:	639a      	str	r2, [r3, #56]	; 0x38
		else
		{
			traceCREATE_COUNTING_SEMAPHORE_FAILED();
		}

		return xHandle;
 8001b42:	68fb      	ldr	r3, [r7, #12]
	}
 8001b44:	0018      	movs	r0, r3
 8001b46:	46bd      	mov	sp, r7
 8001b48:	b004      	add	sp, #16
 8001b4a:	bd80      	pop	{r7, pc}

08001b4c <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 8001b4c:	b580      	push	{r7, lr}
 8001b4e:	b08a      	sub	sp, #40	; 0x28
 8001b50:	af00      	add	r7, sp, #0
 8001b52:	60f8      	str	r0, [r7, #12]
 8001b54:	60b9      	str	r1, [r7, #8]
 8001b56:	607a      	str	r2, [r7, #4]
 8001b58:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 8001b5a:	2300      	movs	r3, #0
 8001b5c:	627b      	str	r3, [r7, #36]	; 0x24
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8001b5e:	68fb      	ldr	r3, [r7, #12]
 8001b60:	623b      	str	r3, [r7, #32]

	configASSERT( pxQueue );
 8001b62:	6a3b      	ldr	r3, [r7, #32]
 8001b64:	2b00      	cmp	r3, #0
 8001b66:	d101      	bne.n	8001b6c <xQueueGenericSend+0x20>
 8001b68:	b672      	cpsid	i
 8001b6a:	e7fe      	b.n	8001b6a <xQueueGenericSend+0x1e>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8001b6c:	68bb      	ldr	r3, [r7, #8]
 8001b6e:	2b00      	cmp	r3, #0
 8001b70:	d103      	bne.n	8001b7a <xQueueGenericSend+0x2e>
 8001b72:	6a3b      	ldr	r3, [r7, #32]
 8001b74:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001b76:	2b00      	cmp	r3, #0
 8001b78:	d101      	bne.n	8001b7e <xQueueGenericSend+0x32>
 8001b7a:	2301      	movs	r3, #1
 8001b7c:	e000      	b.n	8001b80 <xQueueGenericSend+0x34>
 8001b7e:	2300      	movs	r3, #0
 8001b80:	2b00      	cmp	r3, #0
 8001b82:	d101      	bne.n	8001b88 <xQueueGenericSend+0x3c>
 8001b84:	b672      	cpsid	i
 8001b86:	e7fe      	b.n	8001b86 <xQueueGenericSend+0x3a>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8001b88:	683b      	ldr	r3, [r7, #0]
 8001b8a:	2b02      	cmp	r3, #2
 8001b8c:	d103      	bne.n	8001b96 <xQueueGenericSend+0x4a>
 8001b8e:	6a3b      	ldr	r3, [r7, #32]
 8001b90:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001b92:	2b01      	cmp	r3, #1
 8001b94:	d101      	bne.n	8001b9a <xQueueGenericSend+0x4e>
 8001b96:	2301      	movs	r3, #1
 8001b98:	e000      	b.n	8001b9c <xQueueGenericSend+0x50>
 8001b9a:	2300      	movs	r3, #0
 8001b9c:	2b00      	cmp	r3, #0
 8001b9e:	d101      	bne.n	8001ba4 <xQueueGenericSend+0x58>
 8001ba0:	b672      	cpsid	i
 8001ba2:	e7fe      	b.n	8001ba2 <xQueueGenericSend+0x56>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8001ba4:	f003 f824 	bl	8004bf0 <xTaskGetSchedulerState>
 8001ba8:	1e03      	subs	r3, r0, #0
 8001baa:	d102      	bne.n	8001bb2 <xQueueGenericSend+0x66>
 8001bac:	687b      	ldr	r3, [r7, #4]
 8001bae:	2b00      	cmp	r3, #0
 8001bb0:	d101      	bne.n	8001bb6 <xQueueGenericSend+0x6a>
 8001bb2:	2301      	movs	r3, #1
 8001bb4:	e000      	b.n	8001bb8 <xQueueGenericSend+0x6c>
 8001bb6:	2300      	movs	r3, #0
 8001bb8:	2b00      	cmp	r3, #0
 8001bba:	d101      	bne.n	8001bc0 <xQueueGenericSend+0x74>
 8001bbc:	b672      	cpsid	i
 8001bbe:	e7fe      	b.n	8001bbe <xQueueGenericSend+0x72>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8001bc0:	f7ff fdcc 	bl	800175c <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8001bc4:	6a3b      	ldr	r3, [r7, #32]
 8001bc6:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8001bc8:	6a3b      	ldr	r3, [r7, #32]
 8001bca:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001bcc:	429a      	cmp	r2, r3
 8001bce:	d302      	bcc.n	8001bd6 <xQueueGenericSend+0x8a>
 8001bd0:	683b      	ldr	r3, [r7, #0]
 8001bd2:	2b02      	cmp	r3, #2
 8001bd4:	d134      	bne.n	8001c40 <xQueueGenericSend+0xf4>
			{
				traceQUEUE_SEND( pxQueue );

				#if ( configUSE_QUEUE_SETS == 1 )
				{
				const UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
 8001bd6:	6a3b      	ldr	r3, [r7, #32]
 8001bd8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001bda:	61fb      	str	r3, [r7, #28]

					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8001bdc:	683a      	ldr	r2, [r7, #0]
 8001bde:	68b9      	ldr	r1, [r7, #8]
 8001be0:	6a3b      	ldr	r3, [r7, #32]
 8001be2:	0018      	movs	r0, r3
 8001be4:	f000 fd0c 	bl	8002600 <prvCopyDataToQueue>
 8001be8:	0003      	movs	r3, r0
 8001bea:	61bb      	str	r3, [r7, #24]

					if( pxQueue->pxQueueSetContainer != NULL )
 8001bec:	6a3b      	ldr	r3, [r7, #32]
 8001bee:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001bf0:	2b00      	cmp	r3, #0
 8001bf2:	d00e      	beq.n	8001c12 <xQueueGenericSend+0xc6>
					{
						if( ( xCopyPosition == queueOVERWRITE ) && ( uxPreviousMessagesWaiting != ( UBaseType_t ) 0 ) )
 8001bf4:	683b      	ldr	r3, [r7, #0]
 8001bf6:	2b02      	cmp	r3, #2
 8001bf8:	d102      	bne.n	8001c00 <xQueueGenericSend+0xb4>
 8001bfa:	69fb      	ldr	r3, [r7, #28]
 8001bfc:	2b00      	cmp	r3, #0
 8001bfe:	d11b      	bne.n	8001c38 <xQueueGenericSend+0xec>
							/* Do not notify the queue set as an existing item
							was overwritten in the queue so the number of items
							in the queue has not changed. */
							mtCOVERAGE_TEST_MARKER();
						}
						else if( prvNotifyQueueSetContainer( pxQueue ) != pdFALSE )
 8001c00:	6a3b      	ldr	r3, [r7, #32]
 8001c02:	0018      	movs	r0, r3
 8001c04:	f000 ff82 	bl	8002b0c <prvNotifyQueueSetContainer>
 8001c08:	1e03      	subs	r3, r0, #0
 8001c0a:	d015      	beq.n	8001c38 <xQueueGenericSend+0xec>
						{
							/* The queue is a member of a queue set, and posting
							to the queue set caused a higher priority task to
							unblock. A context switch is required. */
							queueYIELD_IF_USING_PREEMPTION();
 8001c0c:	f7ff fd96 	bl	800173c <vPortYield>
 8001c10:	e012      	b.n	8001c38 <xQueueGenericSend+0xec>
					}
					else
					{
						/* If there was a task waiting for data to arrive on the
						queue then unblock it now. */
						if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8001c12:	6a3b      	ldr	r3, [r7, #32]
 8001c14:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001c16:	2b00      	cmp	r3, #0
 8001c18:	d009      	beq.n	8001c2e <xQueueGenericSend+0xe2>
						{
							if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8001c1a:	6a3b      	ldr	r3, [r7, #32]
 8001c1c:	3324      	adds	r3, #36	; 0x24
 8001c1e:	0018      	movs	r0, r3
 8001c20:	f002 fcf0 	bl	8004604 <xTaskRemoveFromEventList>
 8001c24:	1e03      	subs	r3, r0, #0
 8001c26:	d007      	beq.n	8001c38 <xQueueGenericSend+0xec>
							{
								/* The unblocked task has a priority higher than
								our own so yield immediately.  Yes it is ok to
								do this from within the critical section - the
								kernel takes care of that. */
								queueYIELD_IF_USING_PREEMPTION();
 8001c28:	f7ff fd88 	bl	800173c <vPortYield>
 8001c2c:	e004      	b.n	8001c38 <xQueueGenericSend+0xec>
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
						}
						else if( xYieldRequired != pdFALSE )
 8001c2e:	69bb      	ldr	r3, [r7, #24]
 8001c30:	2b00      	cmp	r3, #0
 8001c32:	d001      	beq.n	8001c38 <xQueueGenericSend+0xec>
						{
							/* This path is a special case that will only get
							executed if the task was holding multiple mutexes
							and the mutexes were given back in an order that is
							different to that in which they were taken. */
							queueYIELD_IF_USING_PREEMPTION();
 8001c34:	f7ff fd82 	bl	800173c <vPortYield>
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 8001c38:	f7ff fda2 	bl	8001780 <vPortExitCritical>
				return pdPASS;
 8001c3c:	2301      	movs	r3, #1
 8001c3e:	e05c      	b.n	8001cfa <xQueueGenericSend+0x1ae>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8001c40:	687b      	ldr	r3, [r7, #4]
 8001c42:	2b00      	cmp	r3, #0
 8001c44:	d103      	bne.n	8001c4e <xQueueGenericSend+0x102>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8001c46:	f7ff fd9b 	bl	8001780 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 8001c4a:	2300      	movs	r3, #0
 8001c4c:	e055      	b.n	8001cfa <xQueueGenericSend+0x1ae>
				}
				else if( xEntryTimeSet == pdFALSE )
 8001c4e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001c50:	2b00      	cmp	r3, #0
 8001c52:	d106      	bne.n	8001c62 <xQueueGenericSend+0x116>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8001c54:	2310      	movs	r3, #16
 8001c56:	18fb      	adds	r3, r7, r3
 8001c58:	0018      	movs	r0, r3
 8001c5a:	f002 fd9f 	bl	800479c <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8001c5e:	2301      	movs	r3, #1
 8001c60:	627b      	str	r3, [r7, #36]	; 0x24
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8001c62:	f7ff fd8d 	bl	8001780 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8001c66:	f002 f99f 	bl	8003fa8 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8001c6a:	f7ff fd77 	bl	800175c <vPortEnterCritical>
 8001c6e:	6a3b      	ldr	r3, [r7, #32]
 8001c70:	2244      	movs	r2, #68	; 0x44
 8001c72:	5c9b      	ldrb	r3, [r3, r2]
 8001c74:	b25b      	sxtb	r3, r3
 8001c76:	3301      	adds	r3, #1
 8001c78:	d103      	bne.n	8001c82 <xQueueGenericSend+0x136>
 8001c7a:	6a3b      	ldr	r3, [r7, #32]
 8001c7c:	2244      	movs	r2, #68	; 0x44
 8001c7e:	2100      	movs	r1, #0
 8001c80:	5499      	strb	r1, [r3, r2]
 8001c82:	6a3b      	ldr	r3, [r7, #32]
 8001c84:	2245      	movs	r2, #69	; 0x45
 8001c86:	5c9b      	ldrb	r3, [r3, r2]
 8001c88:	b25b      	sxtb	r3, r3
 8001c8a:	3301      	adds	r3, #1
 8001c8c:	d103      	bne.n	8001c96 <xQueueGenericSend+0x14a>
 8001c8e:	6a3b      	ldr	r3, [r7, #32]
 8001c90:	2245      	movs	r2, #69	; 0x45
 8001c92:	2100      	movs	r1, #0
 8001c94:	5499      	strb	r1, [r3, r2]
 8001c96:	f7ff fd73 	bl	8001780 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8001c9a:	1d3a      	adds	r2, r7, #4
 8001c9c:	2310      	movs	r3, #16
 8001c9e:	18fb      	adds	r3, r7, r3
 8001ca0:	0011      	movs	r1, r2
 8001ca2:	0018      	movs	r0, r3
 8001ca4:	f002 fd8e 	bl	80047c4 <xTaskCheckForTimeOut>
 8001ca8:	1e03      	subs	r3, r0, #0
 8001caa:	d11f      	bne.n	8001cec <xQueueGenericSend+0x1a0>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 8001cac:	6a3b      	ldr	r3, [r7, #32]
 8001cae:	0018      	movs	r0, r3
 8001cb0:	f000 fdd3 	bl	800285a <prvIsQueueFull>
 8001cb4:	1e03      	subs	r3, r0, #0
 8001cb6:	d012      	beq.n	8001cde <xQueueGenericSend+0x192>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 8001cb8:	6a3b      	ldr	r3, [r7, #32]
 8001cba:	3310      	adds	r3, #16
 8001cbc:	687a      	ldr	r2, [r7, #4]
 8001cbe:	0011      	movs	r1, r2
 8001cc0:	0018      	movs	r0, r3
 8001cc2:	f002 fc2d 	bl	8004520 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 8001cc6:	6a3b      	ldr	r3, [r7, #32]
 8001cc8:	0018      	movs	r0, r3
 8001cca:	f000 fd2a 	bl	8002722 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 8001cce:	f002 f977 	bl	8003fc0 <xTaskResumeAll>
 8001cd2:	1e03      	subs	r3, r0, #0
 8001cd4:	d000      	beq.n	8001cd8 <xQueueGenericSend+0x18c>
 8001cd6:	e773      	b.n	8001bc0 <xQueueGenericSend+0x74>
				{
					portYIELD_WITHIN_API();
 8001cd8:	f7ff fd30 	bl	800173c <vPortYield>
 8001cdc:	e770      	b.n	8001bc0 <xQueueGenericSend+0x74>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 8001cde:	6a3b      	ldr	r3, [r7, #32]
 8001ce0:	0018      	movs	r0, r3
 8001ce2:	f000 fd1e 	bl	8002722 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8001ce6:	f002 f96b 	bl	8003fc0 <xTaskResumeAll>
 8001cea:	e769      	b.n	8001bc0 <xQueueGenericSend+0x74>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 8001cec:	6a3b      	ldr	r3, [r7, #32]
 8001cee:	0018      	movs	r0, r3
 8001cf0:	f000 fd17 	bl	8002722 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8001cf4:	f002 f964 	bl	8003fc0 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 8001cf8:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 8001cfa:	0018      	movs	r0, r3
 8001cfc:	46bd      	mov	sp, r7
 8001cfe:	b00a      	add	sp, #40	; 0x28
 8001d00:	bd80      	pop	{r7, pc}

08001d02 <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 8001d02:	b580      	push	{r7, lr}
 8001d04:	b08a      	sub	sp, #40	; 0x28
 8001d06:	af00      	add	r7, sp, #0
 8001d08:	60f8      	str	r0, [r7, #12]
 8001d0a:	60b9      	str	r1, [r7, #8]
 8001d0c:	607a      	str	r2, [r7, #4]
 8001d0e:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 8001d10:	68fb      	ldr	r3, [r7, #12]
 8001d12:	623b      	str	r3, [r7, #32]

	configASSERT( pxQueue );
 8001d14:	6a3b      	ldr	r3, [r7, #32]
 8001d16:	2b00      	cmp	r3, #0
 8001d18:	d101      	bne.n	8001d1e <xQueueGenericSendFromISR+0x1c>
 8001d1a:	b672      	cpsid	i
 8001d1c:	e7fe      	b.n	8001d1c <xQueueGenericSendFromISR+0x1a>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8001d1e:	68bb      	ldr	r3, [r7, #8]
 8001d20:	2b00      	cmp	r3, #0
 8001d22:	d103      	bne.n	8001d2c <xQueueGenericSendFromISR+0x2a>
 8001d24:	6a3b      	ldr	r3, [r7, #32]
 8001d26:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001d28:	2b00      	cmp	r3, #0
 8001d2a:	d101      	bne.n	8001d30 <xQueueGenericSendFromISR+0x2e>
 8001d2c:	2301      	movs	r3, #1
 8001d2e:	e000      	b.n	8001d32 <xQueueGenericSendFromISR+0x30>
 8001d30:	2300      	movs	r3, #0
 8001d32:	2b00      	cmp	r3, #0
 8001d34:	d101      	bne.n	8001d3a <xQueueGenericSendFromISR+0x38>
 8001d36:	b672      	cpsid	i
 8001d38:	e7fe      	b.n	8001d38 <xQueueGenericSendFromISR+0x36>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8001d3a:	683b      	ldr	r3, [r7, #0]
 8001d3c:	2b02      	cmp	r3, #2
 8001d3e:	d103      	bne.n	8001d48 <xQueueGenericSendFromISR+0x46>
 8001d40:	6a3b      	ldr	r3, [r7, #32]
 8001d42:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001d44:	2b01      	cmp	r3, #1
 8001d46:	d101      	bne.n	8001d4c <xQueueGenericSendFromISR+0x4a>
 8001d48:	2301      	movs	r3, #1
 8001d4a:	e000      	b.n	8001d4e <xQueueGenericSendFromISR+0x4c>
 8001d4c:	2300      	movs	r3, #0
 8001d4e:	2b00      	cmp	r3, #0
 8001d50:	d101      	bne.n	8001d56 <xQueueGenericSendFromISR+0x54>
 8001d52:	b672      	cpsid	i
 8001d54:	e7fe      	b.n	8001d54 <xQueueGenericSendFromISR+0x52>
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8001d56:	f7ff fd2b 	bl	80017b0 <ulSetInterruptMaskFromISR>
 8001d5a:	0003      	movs	r3, r0
 8001d5c:	61fb      	str	r3, [r7, #28]
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8001d5e:	6a3b      	ldr	r3, [r7, #32]
 8001d60:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8001d62:	6a3b      	ldr	r3, [r7, #32]
 8001d64:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001d66:	429a      	cmp	r2, r3
 8001d68:	d302      	bcc.n	8001d70 <xQueueGenericSendFromISR+0x6e>
 8001d6a:	683b      	ldr	r3, [r7, #0]
 8001d6c:	2b02      	cmp	r3, #2
 8001d6e:	d149      	bne.n	8001e04 <xQueueGenericSendFromISR+0x102>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 8001d70:	231b      	movs	r3, #27
 8001d72:	18fb      	adds	r3, r7, r3
 8001d74:	6a3a      	ldr	r2, [r7, #32]
 8001d76:	2145      	movs	r1, #69	; 0x45
 8001d78:	5c52      	ldrb	r2, [r2, r1]
 8001d7a:	701a      	strb	r2, [r3, #0]
			const UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
 8001d7c:	6a3b      	ldr	r3, [r7, #32]
 8001d7e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001d80:	617b      	str	r3, [r7, #20]
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8001d82:	683a      	ldr	r2, [r7, #0]
 8001d84:	68b9      	ldr	r1, [r7, #8]
 8001d86:	6a3b      	ldr	r3, [r7, #32]
 8001d88:	0018      	movs	r0, r3
 8001d8a:	f000 fc39 	bl	8002600 <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 8001d8e:	231b      	movs	r3, #27
 8001d90:	18fb      	adds	r3, r7, r3
 8001d92:	781b      	ldrb	r3, [r3, #0]
 8001d94:	b25b      	sxtb	r3, r3
 8001d96:	3301      	adds	r3, #1
 8001d98:	d128      	bne.n	8001dec <xQueueGenericSendFromISR+0xea>
			{
				#if ( configUSE_QUEUE_SETS == 1 )
				{
					if( pxQueue->pxQueueSetContainer != NULL )
 8001d9a:	6a3b      	ldr	r3, [r7, #32]
 8001d9c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001d9e:	2b00      	cmp	r3, #0
 8001da0:	d012      	beq.n	8001dc8 <xQueueGenericSendFromISR+0xc6>
					{
						if( ( xCopyPosition == queueOVERWRITE ) && ( uxPreviousMessagesWaiting != ( UBaseType_t ) 0 ) )
 8001da2:	683b      	ldr	r3, [r7, #0]
 8001da4:	2b02      	cmp	r3, #2
 8001da6:	d102      	bne.n	8001dae <xQueueGenericSendFromISR+0xac>
 8001da8:	697b      	ldr	r3, [r7, #20]
 8001daa:	2b00      	cmp	r3, #0
 8001dac:	d127      	bne.n	8001dfe <xQueueGenericSendFromISR+0xfc>
							/* Do not notify the queue set as an existing item
							was overwritten in the queue so the number of items
							in the queue has not changed. */
							mtCOVERAGE_TEST_MARKER();
						}
						else if( prvNotifyQueueSetContainer( pxQueue ) != pdFALSE )
 8001dae:	6a3b      	ldr	r3, [r7, #32]
 8001db0:	0018      	movs	r0, r3
 8001db2:	f000 feab 	bl	8002b0c <prvNotifyQueueSetContainer>
 8001db6:	1e03      	subs	r3, r0, #0
 8001db8:	d021      	beq.n	8001dfe <xQueueGenericSendFromISR+0xfc>
						{
							/* The queue is a member of a queue set, and posting
							to the queue set caused a higher priority task to
							unblock.  A context switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 8001dba:	687b      	ldr	r3, [r7, #4]
 8001dbc:	2b00      	cmp	r3, #0
 8001dbe:	d01e      	beq.n	8001dfe <xQueueGenericSendFromISR+0xfc>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 8001dc0:	687b      	ldr	r3, [r7, #4]
 8001dc2:	2201      	movs	r2, #1
 8001dc4:	601a      	str	r2, [r3, #0]
 8001dc6:	e01a      	b.n	8001dfe <xQueueGenericSendFromISR+0xfc>
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else
					{
						if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8001dc8:	6a3b      	ldr	r3, [r7, #32]
 8001dca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001dcc:	2b00      	cmp	r3, #0
 8001dce:	d016      	beq.n	8001dfe <xQueueGenericSendFromISR+0xfc>
						{
							if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8001dd0:	6a3b      	ldr	r3, [r7, #32]
 8001dd2:	3324      	adds	r3, #36	; 0x24
 8001dd4:	0018      	movs	r0, r3
 8001dd6:	f002 fc15 	bl	8004604 <xTaskRemoveFromEventList>
 8001dda:	1e03      	subs	r3, r0, #0
 8001ddc:	d00f      	beq.n	8001dfe <xQueueGenericSendFromISR+0xfc>
							{
								/* The task waiting has a higher priority so
								record that a context switch is required. */
								if( pxHigherPriorityTaskWoken != NULL )
 8001dde:	687b      	ldr	r3, [r7, #4]
 8001de0:	2b00      	cmp	r3, #0
 8001de2:	d00c      	beq.n	8001dfe <xQueueGenericSendFromISR+0xfc>
								{
									*pxHigherPriorityTaskWoken = pdTRUE;
 8001de4:	687b      	ldr	r3, [r7, #4]
 8001de6:	2201      	movs	r2, #1
 8001de8:	601a      	str	r2, [r3, #0]
 8001dea:	e008      	b.n	8001dfe <xQueueGenericSendFromISR+0xfc>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8001dec:	231b      	movs	r3, #27
 8001dee:	18fb      	adds	r3, r7, r3
 8001df0:	781b      	ldrb	r3, [r3, #0]
 8001df2:	3301      	adds	r3, #1
 8001df4:	b2db      	uxtb	r3, r3
 8001df6:	b259      	sxtb	r1, r3
 8001df8:	6a3b      	ldr	r3, [r7, #32]
 8001dfa:	2245      	movs	r2, #69	; 0x45
 8001dfc:	5499      	strb	r1, [r3, r2]
			}

			xReturn = pdPASS;
 8001dfe:	2301      	movs	r3, #1
 8001e00:	627b      	str	r3, [r7, #36]	; 0x24
		{
 8001e02:	e001      	b.n	8001e08 <xQueueGenericSendFromISR+0x106>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 8001e04:	2300      	movs	r3, #0
 8001e06:	627b      	str	r3, [r7, #36]	; 0x24
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );
 8001e08:	69fb      	ldr	r3, [r7, #28]
 8001e0a:	0018      	movs	r0, r3
 8001e0c:	f7ff fcd6 	bl	80017bc <vClearInterruptMaskFromISR>

	return xReturn;
 8001e10:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8001e12:	0018      	movs	r0, r3
 8001e14:	46bd      	mov	sp, r7
 8001e16:	b00a      	add	sp, #40	; 0x28
 8001e18:	bd80      	pop	{r7, pc}

08001e1a <xQueueGiveFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGiveFromISR( QueueHandle_t xQueue, BaseType_t * const pxHigherPriorityTaskWoken )
{
 8001e1a:	b580      	push	{r7, lr}
 8001e1c:	b088      	sub	sp, #32
 8001e1e:	af00      	add	r7, sp, #0
 8001e20:	6078      	str	r0, [r7, #4]
 8001e22:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 8001e24:	687b      	ldr	r3, [r7, #4]
 8001e26:	61bb      	str	r3, [r7, #24]
	item size is 0.  Don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */

	configASSERT( pxQueue );
 8001e28:	69bb      	ldr	r3, [r7, #24]
 8001e2a:	2b00      	cmp	r3, #0
 8001e2c:	d101      	bne.n	8001e32 <xQueueGiveFromISR+0x18>
 8001e2e:	b672      	cpsid	i
 8001e30:	e7fe      	b.n	8001e30 <xQueueGiveFromISR+0x16>

	/* xQueueGenericSendFromISR() should be used instead of xQueueGiveFromISR()
	if the item size is not 0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 8001e32:	69bb      	ldr	r3, [r7, #24]
 8001e34:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001e36:	2b00      	cmp	r3, #0
 8001e38:	d001      	beq.n	8001e3e <xQueueGiveFromISR+0x24>
 8001e3a:	b672      	cpsid	i
 8001e3c:	e7fe      	b.n	8001e3c <xQueueGiveFromISR+0x22>

	/* Normally a mutex would not be given from an interrupt, especially if
	there is a mutex holder, as priority inheritance makes no sense for an
	interrupts, only tasks. */
	configASSERT( !( ( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX ) && ( pxQueue->u.xSemaphore.xMutexHolder != NULL ) ) );
 8001e3e:	69bb      	ldr	r3, [r7, #24]
 8001e40:	681b      	ldr	r3, [r3, #0]
 8001e42:	2b00      	cmp	r3, #0
 8001e44:	d103      	bne.n	8001e4e <xQueueGiveFromISR+0x34>
 8001e46:	69bb      	ldr	r3, [r7, #24]
 8001e48:	689b      	ldr	r3, [r3, #8]
 8001e4a:	2b00      	cmp	r3, #0
 8001e4c:	d101      	bne.n	8001e52 <xQueueGiveFromISR+0x38>
 8001e4e:	2301      	movs	r3, #1
 8001e50:	e000      	b.n	8001e54 <xQueueGiveFromISR+0x3a>
 8001e52:	2300      	movs	r3, #0
 8001e54:	2b00      	cmp	r3, #0
 8001e56:	d101      	bne.n	8001e5c <xQueueGiveFromISR+0x42>
 8001e58:	b672      	cpsid	i
 8001e5a:	e7fe      	b.n	8001e5a <xQueueGiveFromISR+0x40>
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8001e5c:	f7ff fca8 	bl	80017b0 <ulSetInterruptMaskFromISR>
 8001e60:	0003      	movs	r3, r0
 8001e62:	617b      	str	r3, [r7, #20]
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8001e64:	69bb      	ldr	r3, [r7, #24]
 8001e66:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001e68:	613b      	str	r3, [r7, #16]

		/* When the queue is used to implement a semaphore no data is ever
		moved through the queue but it is still valid to see if the queue 'has
		space'. */
		if( uxMessagesWaiting < pxQueue->uxLength )
 8001e6a:	69bb      	ldr	r3, [r7, #24]
 8001e6c:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8001e6e:	693b      	ldr	r3, [r7, #16]
 8001e70:	429a      	cmp	r2, r3
 8001e72:	d93e      	bls.n	8001ef2 <xQueueGiveFromISR+0xd8>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 8001e74:	230f      	movs	r3, #15
 8001e76:	18fb      	adds	r3, r7, r3
 8001e78:	69ba      	ldr	r2, [r7, #24]
 8001e7a:	2145      	movs	r1, #69	; 0x45
 8001e7c:	5c52      	ldrb	r2, [r2, r1]
 8001e7e:	701a      	strb	r2, [r3, #0]
			holder - and if there is a mutex holder then the mutex cannot be
			given from an ISR.  As this is the ISR version of the function it
			can be assumed there is no mutex holder and no need to determine if
			priority disinheritance is needed.  Simply increase the count of
			messages (semaphores) available. */
			pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8001e80:	693b      	ldr	r3, [r7, #16]
 8001e82:	1c5a      	adds	r2, r3, #1
 8001e84:	69bb      	ldr	r3, [r7, #24]
 8001e86:	639a      	str	r2, [r3, #56]	; 0x38

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 8001e88:	230f      	movs	r3, #15
 8001e8a:	18fb      	adds	r3, r7, r3
 8001e8c:	781b      	ldrb	r3, [r3, #0]
 8001e8e:	b25b      	sxtb	r3, r3
 8001e90:	3301      	adds	r3, #1
 8001e92:	d122      	bne.n	8001eda <xQueueGiveFromISR+0xc0>
			{
				#if ( configUSE_QUEUE_SETS == 1 )
				{
					if( pxQueue->pxQueueSetContainer != NULL )
 8001e94:	69bb      	ldr	r3, [r7, #24]
 8001e96:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001e98:	2b00      	cmp	r3, #0
 8001e9a:	d00c      	beq.n	8001eb6 <xQueueGiveFromISR+0x9c>
					{
						if( prvNotifyQueueSetContainer( pxQueue ) != pdFALSE )
 8001e9c:	69bb      	ldr	r3, [r7, #24]
 8001e9e:	0018      	movs	r0, r3
 8001ea0:	f000 fe34 	bl	8002b0c <prvNotifyQueueSetContainer>
 8001ea4:	1e03      	subs	r3, r0, #0
 8001ea6:	d021      	beq.n	8001eec <xQueueGiveFromISR+0xd2>
						{
							/* The semaphore is a member of a queue set, and
							posting	to the queue set caused a higher priority
							task to	unblock.  A context switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 8001ea8:	683b      	ldr	r3, [r7, #0]
 8001eaa:	2b00      	cmp	r3, #0
 8001eac:	d01e      	beq.n	8001eec <xQueueGiveFromISR+0xd2>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 8001eae:	683b      	ldr	r3, [r7, #0]
 8001eb0:	2201      	movs	r2, #1
 8001eb2:	601a      	str	r2, [r3, #0]
 8001eb4:	e01a      	b.n	8001eec <xQueueGiveFromISR+0xd2>
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else
					{
						if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8001eb6:	69bb      	ldr	r3, [r7, #24]
 8001eb8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001eba:	2b00      	cmp	r3, #0
 8001ebc:	d016      	beq.n	8001eec <xQueueGiveFromISR+0xd2>
						{
							if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8001ebe:	69bb      	ldr	r3, [r7, #24]
 8001ec0:	3324      	adds	r3, #36	; 0x24
 8001ec2:	0018      	movs	r0, r3
 8001ec4:	f002 fb9e 	bl	8004604 <xTaskRemoveFromEventList>
 8001ec8:	1e03      	subs	r3, r0, #0
 8001eca:	d00f      	beq.n	8001eec <xQueueGiveFromISR+0xd2>
							{
								/* The task waiting has a higher priority so
								record that a context switch is required. */
								if( pxHigherPriorityTaskWoken != NULL )
 8001ecc:	683b      	ldr	r3, [r7, #0]
 8001ece:	2b00      	cmp	r3, #0
 8001ed0:	d00c      	beq.n	8001eec <xQueueGiveFromISR+0xd2>
								{
									*pxHigherPriorityTaskWoken = pdTRUE;
 8001ed2:	683b      	ldr	r3, [r7, #0]
 8001ed4:	2201      	movs	r2, #1
 8001ed6:	601a      	str	r2, [r3, #0]
 8001ed8:	e008      	b.n	8001eec <xQueueGiveFromISR+0xd2>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8001eda:	230f      	movs	r3, #15
 8001edc:	18fb      	adds	r3, r7, r3
 8001ede:	781b      	ldrb	r3, [r3, #0]
 8001ee0:	3301      	adds	r3, #1
 8001ee2:	b2db      	uxtb	r3, r3
 8001ee4:	b259      	sxtb	r1, r3
 8001ee6:	69bb      	ldr	r3, [r7, #24]
 8001ee8:	2245      	movs	r2, #69	; 0x45
 8001eea:	5499      	strb	r1, [r3, r2]
			}

			xReturn = pdPASS;
 8001eec:	2301      	movs	r3, #1
 8001eee:	61fb      	str	r3, [r7, #28]
 8001ef0:	e001      	b.n	8001ef6 <xQueueGiveFromISR+0xdc>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 8001ef2:	2300      	movs	r3, #0
 8001ef4:	61fb      	str	r3, [r7, #28]
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );
 8001ef6:	697b      	ldr	r3, [r7, #20]
 8001ef8:	0018      	movs	r0, r3
 8001efa:	f7ff fc5f 	bl	80017bc <vClearInterruptMaskFromISR>

	return xReturn;
 8001efe:	69fb      	ldr	r3, [r7, #28]
}
 8001f00:	0018      	movs	r0, r3
 8001f02:	46bd      	mov	sp, r7
 8001f04:	b008      	add	sp, #32
 8001f06:	bd80      	pop	{r7, pc}

08001f08 <xQueueReceive>:
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 8001f08:	b580      	push	{r7, lr}
 8001f0a:	b08a      	sub	sp, #40	; 0x28
 8001f0c:	af00      	add	r7, sp, #0
 8001f0e:	60f8      	str	r0, [r7, #12]
 8001f10:	60b9      	str	r1, [r7, #8]
 8001f12:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 8001f14:	2300      	movs	r3, #0
 8001f16:	627b      	str	r3, [r7, #36]	; 0x24
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8001f18:	68fb      	ldr	r3, [r7, #12]
 8001f1a:	623b      	str	r3, [r7, #32]

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 8001f1c:	6a3b      	ldr	r3, [r7, #32]
 8001f1e:	2b00      	cmp	r3, #0
 8001f20:	d101      	bne.n	8001f26 <xQueueReceive+0x1e>
 8001f22:	b672      	cpsid	i
 8001f24:	e7fe      	b.n	8001f24 <xQueueReceive+0x1c>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8001f26:	68bb      	ldr	r3, [r7, #8]
 8001f28:	2b00      	cmp	r3, #0
 8001f2a:	d103      	bne.n	8001f34 <xQueueReceive+0x2c>
 8001f2c:	6a3b      	ldr	r3, [r7, #32]
 8001f2e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001f30:	2b00      	cmp	r3, #0
 8001f32:	d101      	bne.n	8001f38 <xQueueReceive+0x30>
 8001f34:	2301      	movs	r3, #1
 8001f36:	e000      	b.n	8001f3a <xQueueReceive+0x32>
 8001f38:	2300      	movs	r3, #0
 8001f3a:	2b00      	cmp	r3, #0
 8001f3c:	d101      	bne.n	8001f42 <xQueueReceive+0x3a>
 8001f3e:	b672      	cpsid	i
 8001f40:	e7fe      	b.n	8001f40 <xQueueReceive+0x38>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8001f42:	f002 fe55 	bl	8004bf0 <xTaskGetSchedulerState>
 8001f46:	1e03      	subs	r3, r0, #0
 8001f48:	d102      	bne.n	8001f50 <xQueueReceive+0x48>
 8001f4a:	687b      	ldr	r3, [r7, #4]
 8001f4c:	2b00      	cmp	r3, #0
 8001f4e:	d101      	bne.n	8001f54 <xQueueReceive+0x4c>
 8001f50:	2301      	movs	r3, #1
 8001f52:	e000      	b.n	8001f56 <xQueueReceive+0x4e>
 8001f54:	2300      	movs	r3, #0
 8001f56:	2b00      	cmp	r3, #0
 8001f58:	d101      	bne.n	8001f5e <xQueueReceive+0x56>
 8001f5a:	b672      	cpsid	i
 8001f5c:	e7fe      	b.n	8001f5c <xQueueReceive+0x54>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8001f5e:	f7ff fbfd 	bl	800175c <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8001f62:	6a3b      	ldr	r3, [r7, #32]
 8001f64:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001f66:	61fb      	str	r3, [r7, #28]

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8001f68:	69fb      	ldr	r3, [r7, #28]
 8001f6a:	2b00      	cmp	r3, #0
 8001f6c:	d01a      	beq.n	8001fa4 <xQueueReceive+0x9c>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 8001f6e:	68ba      	ldr	r2, [r7, #8]
 8001f70:	6a3b      	ldr	r3, [r7, #32]
 8001f72:	0011      	movs	r1, r2
 8001f74:	0018      	movs	r0, r3
 8001f76:	f000 fbae 	bl	80026d6 <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8001f7a:	69fb      	ldr	r3, [r7, #28]
 8001f7c:	1e5a      	subs	r2, r3, #1
 8001f7e:	6a3b      	ldr	r3, [r7, #32]
 8001f80:	639a      	str	r2, [r3, #56]	; 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8001f82:	6a3b      	ldr	r3, [r7, #32]
 8001f84:	691b      	ldr	r3, [r3, #16]
 8001f86:	2b00      	cmp	r3, #0
 8001f88:	d008      	beq.n	8001f9c <xQueueReceive+0x94>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8001f8a:	6a3b      	ldr	r3, [r7, #32]
 8001f8c:	3310      	adds	r3, #16
 8001f8e:	0018      	movs	r0, r3
 8001f90:	f002 fb38 	bl	8004604 <xTaskRemoveFromEventList>
 8001f94:	1e03      	subs	r3, r0, #0
 8001f96:	d001      	beq.n	8001f9c <xQueueReceive+0x94>
					{
						queueYIELD_IF_USING_PREEMPTION();
 8001f98:	f7ff fbd0 	bl	800173c <vPortYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 8001f9c:	f7ff fbf0 	bl	8001780 <vPortExitCritical>
				return pdPASS;
 8001fa0:	2301      	movs	r3, #1
 8001fa2:	e062      	b.n	800206a <xQueueReceive+0x162>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8001fa4:	687b      	ldr	r3, [r7, #4]
 8001fa6:	2b00      	cmp	r3, #0
 8001fa8:	d103      	bne.n	8001fb2 <xQueueReceive+0xaa>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8001faa:	f7ff fbe9 	bl	8001780 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 8001fae:	2300      	movs	r3, #0
 8001fb0:	e05b      	b.n	800206a <xQueueReceive+0x162>
				}
				else if( xEntryTimeSet == pdFALSE )
 8001fb2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001fb4:	2b00      	cmp	r3, #0
 8001fb6:	d106      	bne.n	8001fc6 <xQueueReceive+0xbe>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8001fb8:	2314      	movs	r3, #20
 8001fba:	18fb      	adds	r3, r7, r3
 8001fbc:	0018      	movs	r0, r3
 8001fbe:	f002 fbed 	bl	800479c <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8001fc2:	2301      	movs	r3, #1
 8001fc4:	627b      	str	r3, [r7, #36]	; 0x24
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8001fc6:	f7ff fbdb 	bl	8001780 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8001fca:	f001 ffed 	bl	8003fa8 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8001fce:	f7ff fbc5 	bl	800175c <vPortEnterCritical>
 8001fd2:	6a3b      	ldr	r3, [r7, #32]
 8001fd4:	2244      	movs	r2, #68	; 0x44
 8001fd6:	5c9b      	ldrb	r3, [r3, r2]
 8001fd8:	b25b      	sxtb	r3, r3
 8001fda:	3301      	adds	r3, #1
 8001fdc:	d103      	bne.n	8001fe6 <xQueueReceive+0xde>
 8001fde:	6a3b      	ldr	r3, [r7, #32]
 8001fe0:	2244      	movs	r2, #68	; 0x44
 8001fe2:	2100      	movs	r1, #0
 8001fe4:	5499      	strb	r1, [r3, r2]
 8001fe6:	6a3b      	ldr	r3, [r7, #32]
 8001fe8:	2245      	movs	r2, #69	; 0x45
 8001fea:	5c9b      	ldrb	r3, [r3, r2]
 8001fec:	b25b      	sxtb	r3, r3
 8001fee:	3301      	adds	r3, #1
 8001ff0:	d103      	bne.n	8001ffa <xQueueReceive+0xf2>
 8001ff2:	6a3b      	ldr	r3, [r7, #32]
 8001ff4:	2245      	movs	r2, #69	; 0x45
 8001ff6:	2100      	movs	r1, #0
 8001ff8:	5499      	strb	r1, [r3, r2]
 8001ffa:	f7ff fbc1 	bl	8001780 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8001ffe:	1d3a      	adds	r2, r7, #4
 8002000:	2314      	movs	r3, #20
 8002002:	18fb      	adds	r3, r7, r3
 8002004:	0011      	movs	r1, r2
 8002006:	0018      	movs	r0, r3
 8002008:	f002 fbdc 	bl	80047c4 <xTaskCheckForTimeOut>
 800200c:	1e03      	subs	r3, r0, #0
 800200e:	d11e      	bne.n	800204e <xQueueReceive+0x146>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8002010:	6a3b      	ldr	r3, [r7, #32]
 8002012:	0018      	movs	r0, r3
 8002014:	f000 fbf2 	bl	80027fc <prvIsQueueEmpty>
 8002018:	1e03      	subs	r3, r0, #0
 800201a:	d011      	beq.n	8002040 <xQueueReceive+0x138>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 800201c:	6a3b      	ldr	r3, [r7, #32]
 800201e:	3324      	adds	r3, #36	; 0x24
 8002020:	687a      	ldr	r2, [r7, #4]
 8002022:	0011      	movs	r1, r2
 8002024:	0018      	movs	r0, r3
 8002026:	f002 fa7b 	bl	8004520 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 800202a:	6a3b      	ldr	r3, [r7, #32]
 800202c:	0018      	movs	r0, r3
 800202e:	f000 fb78 	bl	8002722 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8002032:	f001 ffc5 	bl	8003fc0 <xTaskResumeAll>
 8002036:	1e03      	subs	r3, r0, #0
 8002038:	d191      	bne.n	8001f5e <xQueueReceive+0x56>
				{
					portYIELD_WITHIN_API();
 800203a:	f7ff fb7f 	bl	800173c <vPortYield>
 800203e:	e78e      	b.n	8001f5e <xQueueReceive+0x56>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 8002040:	6a3b      	ldr	r3, [r7, #32]
 8002042:	0018      	movs	r0, r3
 8002044:	f000 fb6d 	bl	8002722 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8002048:	f001 ffba 	bl	8003fc0 <xTaskResumeAll>
 800204c:	e787      	b.n	8001f5e <xQueueReceive+0x56>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 800204e:	6a3b      	ldr	r3, [r7, #32]
 8002050:	0018      	movs	r0, r3
 8002052:	f000 fb66 	bl	8002722 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8002056:	f001 ffb3 	bl	8003fc0 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800205a:	6a3b      	ldr	r3, [r7, #32]
 800205c:	0018      	movs	r0, r3
 800205e:	f000 fbcd 	bl	80027fc <prvIsQueueEmpty>
 8002062:	1e03      	subs	r3, r0, #0
 8002064:	d100      	bne.n	8002068 <xQueueReceive+0x160>
 8002066:	e77a      	b.n	8001f5e <xQueueReceive+0x56>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 8002068:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 800206a:	0018      	movs	r0, r3
 800206c:	46bd      	mov	sp, r7
 800206e:	b00a      	add	sp, #40	; 0x28
 8002070:	bd80      	pop	{r7, pc}

08002072 <xQueueSemaphoreTake>:
/*-----------------------------------------------------------*/

BaseType_t xQueueSemaphoreTake( QueueHandle_t xQueue, TickType_t xTicksToWait )
{
 8002072:	b580      	push	{r7, lr}
 8002074:	b08a      	sub	sp, #40	; 0x28
 8002076:	af00      	add	r7, sp, #0
 8002078:	6078      	str	r0, [r7, #4]
 800207a:	6039      	str	r1, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE;
 800207c:	2300      	movs	r3, #0
 800207e:	627b      	str	r3, [r7, #36]	; 0x24
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8002080:	687b      	ldr	r3, [r7, #4]
 8002082:	61fb      	str	r3, [r7, #28]

#if( configUSE_MUTEXES == 1 )
	BaseType_t xInheritanceOccurred = pdFALSE;
 8002084:	2300      	movs	r3, #0
 8002086:	623b      	str	r3, [r7, #32]
#endif

	/* Check the queue pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 8002088:	69fb      	ldr	r3, [r7, #28]
 800208a:	2b00      	cmp	r3, #0
 800208c:	d101      	bne.n	8002092 <xQueueSemaphoreTake+0x20>
 800208e:	b672      	cpsid	i
 8002090:	e7fe      	b.n	8002090 <xQueueSemaphoreTake+0x1e>

	/* Check this really is a semaphore, in which case the item size will be
	0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 8002092:	69fb      	ldr	r3, [r7, #28]
 8002094:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002096:	2b00      	cmp	r3, #0
 8002098:	d001      	beq.n	800209e <xQueueSemaphoreTake+0x2c>
 800209a:	b672      	cpsid	i
 800209c:	e7fe      	b.n	800209c <xQueueSemaphoreTake+0x2a>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800209e:	f002 fda7 	bl	8004bf0 <xTaskGetSchedulerState>
 80020a2:	1e03      	subs	r3, r0, #0
 80020a4:	d102      	bne.n	80020ac <xQueueSemaphoreTake+0x3a>
 80020a6:	683b      	ldr	r3, [r7, #0]
 80020a8:	2b00      	cmp	r3, #0
 80020aa:	d101      	bne.n	80020b0 <xQueueSemaphoreTake+0x3e>
 80020ac:	2301      	movs	r3, #1
 80020ae:	e000      	b.n	80020b2 <xQueueSemaphoreTake+0x40>
 80020b0:	2300      	movs	r3, #0
 80020b2:	2b00      	cmp	r3, #0
 80020b4:	d101      	bne.n	80020ba <xQueueSemaphoreTake+0x48>
 80020b6:	b672      	cpsid	i
 80020b8:	e7fe      	b.n	80020b8 <xQueueSemaphoreTake+0x46>
	/*lint -save -e904 This function relaxes the coding standard somewhat to allow return
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 80020ba:	f7ff fb4f 	bl	800175c <vPortEnterCritical>
		{
			/* Semaphores are queues with an item size of 0, and where the
			number of messages in the queue is the semaphore's count value. */
			const UBaseType_t uxSemaphoreCount = pxQueue->uxMessagesWaiting;
 80020be:	69fb      	ldr	r3, [r7, #28]
 80020c0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80020c2:	61bb      	str	r3, [r7, #24]

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxSemaphoreCount > ( UBaseType_t ) 0 )
 80020c4:	69bb      	ldr	r3, [r7, #24]
 80020c6:	2b00      	cmp	r3, #0
 80020c8:	d01d      	beq.n	8002106 <xQueueSemaphoreTake+0x94>
			{
				traceQUEUE_RECEIVE( pxQueue );

				/* Semaphores are queues with a data size of zero and where the
				messages waiting is the semaphore's count.  Reduce the count. */
				pxQueue->uxMessagesWaiting = uxSemaphoreCount - ( UBaseType_t ) 1;
 80020ca:	69bb      	ldr	r3, [r7, #24]
 80020cc:	1e5a      	subs	r2, r3, #1
 80020ce:	69fb      	ldr	r3, [r7, #28]
 80020d0:	639a      	str	r2, [r3, #56]	; 0x38

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 80020d2:	69fb      	ldr	r3, [r7, #28]
 80020d4:	681b      	ldr	r3, [r3, #0]
 80020d6:	2b00      	cmp	r3, #0
 80020d8:	d104      	bne.n	80020e4 <xQueueSemaphoreTake+0x72>
					{
						/* Record the information required to implement
						priority inheritance should it become necessary. */
						pxQueue->u.xSemaphore.xMutexHolder = pvTaskIncrementMutexHeldCount();
 80020da:	f002 feef 	bl	8004ebc <pvTaskIncrementMutexHeldCount>
 80020de:	0002      	movs	r2, r0
 80020e0:	69fb      	ldr	r3, [r7, #28]
 80020e2:	609a      	str	r2, [r3, #8]
				}
				#endif /* configUSE_MUTEXES */

				/* Check to see if other tasks are blocked waiting to give the
				semaphore, and if so, unblock the highest priority such task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80020e4:	69fb      	ldr	r3, [r7, #28]
 80020e6:	691b      	ldr	r3, [r3, #16]
 80020e8:	2b00      	cmp	r3, #0
 80020ea:	d008      	beq.n	80020fe <xQueueSemaphoreTake+0x8c>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80020ec:	69fb      	ldr	r3, [r7, #28]
 80020ee:	3310      	adds	r3, #16
 80020f0:	0018      	movs	r0, r3
 80020f2:	f002 fa87 	bl	8004604 <xTaskRemoveFromEventList>
 80020f6:	1e03      	subs	r3, r0, #0
 80020f8:	d001      	beq.n	80020fe <xQueueSemaphoreTake+0x8c>
					{
						queueYIELD_IF_USING_PREEMPTION();
 80020fa:	f7ff fb1f 	bl	800173c <vPortYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 80020fe:	f7ff fb3f 	bl	8001780 <vPortExitCritical>
				return pdPASS;
 8002102:	2301      	movs	r3, #1
 8002104:	e08b      	b.n	800221e <xQueueSemaphoreTake+0x1ac>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8002106:	683b      	ldr	r3, [r7, #0]
 8002108:	2b00      	cmp	r3, #0
 800210a:	d108      	bne.n	800211e <xQueueSemaphoreTake+0xac>
					/* For inheritance to have occurred there must have been an
					initial timeout, and an adjusted timeout cannot become 0, as
					if it were 0 the function would have exited. */
					#if( configUSE_MUTEXES == 1 )
					{
						configASSERT( xInheritanceOccurred == pdFALSE );
 800210c:	6a3b      	ldr	r3, [r7, #32]
 800210e:	2b00      	cmp	r3, #0
 8002110:	d001      	beq.n	8002116 <xQueueSemaphoreTake+0xa4>
 8002112:	b672      	cpsid	i
 8002114:	e7fe      	b.n	8002114 <xQueueSemaphoreTake+0xa2>
					}
					#endif /* configUSE_MUTEXES */

					/* The semaphore count was 0 and no block time is specified
					(or the block time has expired) so exit now. */
					taskEXIT_CRITICAL();
 8002116:	f7ff fb33 	bl	8001780 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 800211a:	2300      	movs	r3, #0
 800211c:	e07f      	b.n	800221e <xQueueSemaphoreTake+0x1ac>
				}
				else if( xEntryTimeSet == pdFALSE )
 800211e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002120:	2b00      	cmp	r3, #0
 8002122:	d106      	bne.n	8002132 <xQueueSemaphoreTake+0xc0>
				{
					/* The semaphore count was 0 and a block time was specified
					so configure the timeout structure ready to block. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8002124:	230c      	movs	r3, #12
 8002126:	18fb      	adds	r3, r7, r3
 8002128:	0018      	movs	r0, r3
 800212a:	f002 fb37 	bl	800479c <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800212e:	2301      	movs	r3, #1
 8002130:	627b      	str	r3, [r7, #36]	; 0x24
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8002132:	f7ff fb25 	bl	8001780 <vPortExitCritical>

		/* Interrupts and other tasks can give to and take from the semaphore
		now the critical section has been exited. */

		vTaskSuspendAll();
 8002136:	f001 ff37 	bl	8003fa8 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800213a:	f7ff fb0f 	bl	800175c <vPortEnterCritical>
 800213e:	69fb      	ldr	r3, [r7, #28]
 8002140:	2244      	movs	r2, #68	; 0x44
 8002142:	5c9b      	ldrb	r3, [r3, r2]
 8002144:	b25b      	sxtb	r3, r3
 8002146:	3301      	adds	r3, #1
 8002148:	d103      	bne.n	8002152 <xQueueSemaphoreTake+0xe0>
 800214a:	69fb      	ldr	r3, [r7, #28]
 800214c:	2244      	movs	r2, #68	; 0x44
 800214e:	2100      	movs	r1, #0
 8002150:	5499      	strb	r1, [r3, r2]
 8002152:	69fb      	ldr	r3, [r7, #28]
 8002154:	2245      	movs	r2, #69	; 0x45
 8002156:	5c9b      	ldrb	r3, [r3, r2]
 8002158:	b25b      	sxtb	r3, r3
 800215a:	3301      	adds	r3, #1
 800215c:	d103      	bne.n	8002166 <xQueueSemaphoreTake+0xf4>
 800215e:	69fb      	ldr	r3, [r7, #28]
 8002160:	2245      	movs	r2, #69	; 0x45
 8002162:	2100      	movs	r1, #0
 8002164:	5499      	strb	r1, [r3, r2]
 8002166:	f7ff fb0b 	bl	8001780 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800216a:	003a      	movs	r2, r7
 800216c:	230c      	movs	r3, #12
 800216e:	18fb      	adds	r3, r7, r3
 8002170:	0011      	movs	r1, r2
 8002172:	0018      	movs	r0, r3
 8002174:	f002 fb26 	bl	80047c4 <xTaskCheckForTimeOut>
 8002178:	1e03      	subs	r3, r0, #0
 800217a:	d12e      	bne.n	80021da <xQueueSemaphoreTake+0x168>
		{
			/* A block time is specified and not expired.  If the semaphore
			count is 0 then enter the Blocked state to wait for a semaphore to
			become available.  As semaphores are implemented with queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800217c:	69fb      	ldr	r3, [r7, #28]
 800217e:	0018      	movs	r0, r3
 8002180:	f000 fb3c 	bl	80027fc <prvIsQueueEmpty>
 8002184:	1e03      	subs	r3, r0, #0
 8002186:	d021      	beq.n	80021cc <xQueueSemaphoreTake+0x15a>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8002188:	69fb      	ldr	r3, [r7, #28]
 800218a:	681b      	ldr	r3, [r3, #0]
 800218c:	2b00      	cmp	r3, #0
 800218e:	d10a      	bne.n	80021a6 <xQueueSemaphoreTake+0x134>
					{
						taskENTER_CRITICAL();
 8002190:	f7ff fae4 	bl	800175c <vPortEnterCritical>
						{
							xInheritanceOccurred = xTaskPriorityInherit( pxQueue->u.xSemaphore.xMutexHolder );
 8002194:	69fb      	ldr	r3, [r7, #28]
 8002196:	689b      	ldr	r3, [r3, #8]
 8002198:	0018      	movs	r0, r3
 800219a:	f002 fd45 	bl	8004c28 <xTaskPriorityInherit>
 800219e:	0003      	movs	r3, r0
 80021a0:	623b      	str	r3, [r7, #32]
						}
						taskEXIT_CRITICAL();
 80021a2:	f7ff faed 	bl	8001780 <vPortExitCritical>
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif

				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 80021a6:	69fb      	ldr	r3, [r7, #28]
 80021a8:	3324      	adds	r3, #36	; 0x24
 80021aa:	683a      	ldr	r2, [r7, #0]
 80021ac:	0011      	movs	r1, r2
 80021ae:	0018      	movs	r0, r3
 80021b0:	f002 f9b6 	bl	8004520 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 80021b4:	69fb      	ldr	r3, [r7, #28]
 80021b6:	0018      	movs	r0, r3
 80021b8:	f000 fab3 	bl	8002722 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 80021bc:	f001 ff00 	bl	8003fc0 <xTaskResumeAll>
 80021c0:	1e03      	subs	r3, r0, #0
 80021c2:	d000      	beq.n	80021c6 <xQueueSemaphoreTake+0x154>
 80021c4:	e779      	b.n	80020ba <xQueueSemaphoreTake+0x48>
				{
					portYIELD_WITHIN_API();
 80021c6:	f7ff fab9 	bl	800173c <vPortYield>
 80021ca:	e776      	b.n	80020ba <xQueueSemaphoreTake+0x48>
			}
			else
			{
				/* There was no timeout and the semaphore count was not 0, so
				attempt to take the semaphore again. */
				prvUnlockQueue( pxQueue );
 80021cc:	69fb      	ldr	r3, [r7, #28]
 80021ce:	0018      	movs	r0, r3
 80021d0:	f000 faa7 	bl	8002722 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 80021d4:	f001 fef4 	bl	8003fc0 <xTaskResumeAll>
 80021d8:	e76f      	b.n	80020ba <xQueueSemaphoreTake+0x48>
			}
		}
		else
		{
			/* Timed out. */
			prvUnlockQueue( pxQueue );
 80021da:	69fb      	ldr	r3, [r7, #28]
 80021dc:	0018      	movs	r0, r3
 80021de:	f000 faa0 	bl	8002722 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 80021e2:	f001 feed 	bl	8003fc0 <xTaskResumeAll>

			/* If the semaphore count is 0 exit now as the timeout has
			expired.  Otherwise return to attempt to take the semaphore that is
			known to be available.  As semaphores are implemented by queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 80021e6:	69fb      	ldr	r3, [r7, #28]
 80021e8:	0018      	movs	r0, r3
 80021ea:	f000 fb07 	bl	80027fc <prvIsQueueEmpty>
 80021ee:	1e03      	subs	r3, r0, #0
 80021f0:	d100      	bne.n	80021f4 <xQueueSemaphoreTake+0x182>
 80021f2:	e762      	b.n	80020ba <xQueueSemaphoreTake+0x48>
				#if ( configUSE_MUTEXES == 1 )
				{
					/* xInheritanceOccurred could only have be set if
					pxQueue->uxQueueType == queueQUEUE_IS_MUTEX so no need to
					test the mutex type again to check it is actually a mutex. */
					if( xInheritanceOccurred != pdFALSE )
 80021f4:	6a3b      	ldr	r3, [r7, #32]
 80021f6:	2b00      	cmp	r3, #0
 80021f8:	d010      	beq.n	800221c <xQueueSemaphoreTake+0x1aa>
					{
						taskENTER_CRITICAL();
 80021fa:	f7ff faaf 	bl	800175c <vPortEnterCritical>
							/* This task blocking on the mutex caused another
							task to inherit this task's priority.  Now this task
							has timed out the priority should be disinherited
							again, but only as low as the next highest priority
							task that is waiting for the same mutex. */
							uxHighestWaitingPriority = prvGetDisinheritPriorityAfterTimeout( pxQueue );
 80021fe:	69fb      	ldr	r3, [r7, #28]
 8002200:	0018      	movs	r0, r3
 8002202:	f000 f9e7 	bl	80025d4 <prvGetDisinheritPriorityAfterTimeout>
 8002206:	0003      	movs	r3, r0
 8002208:	617b      	str	r3, [r7, #20]
							vTaskPriorityDisinheritAfterTimeout( pxQueue->u.xSemaphore.xMutexHolder, uxHighestWaitingPriority );
 800220a:	69fb      	ldr	r3, [r7, #28]
 800220c:	689b      	ldr	r3, [r3, #8]
 800220e:	697a      	ldr	r2, [r7, #20]
 8002210:	0011      	movs	r1, r2
 8002212:	0018      	movs	r0, r3
 8002214:	f002 fdcc 	bl	8004db0 <vTaskPriorityDisinheritAfterTimeout>
						}
						taskEXIT_CRITICAL();
 8002218:	f7ff fab2 	bl	8001780 <vPortExitCritical>
					}
				}
				#endif /* configUSE_MUTEXES */

				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 800221c:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 800221e:	0018      	movs	r0, r3
 8002220:	46bd      	mov	sp, r7
 8002222:	b00a      	add	sp, #40	; 0x28
 8002224:	bd80      	pop	{r7, pc}

08002226 <xQueuePeek>:
/*-----------------------------------------------------------*/

BaseType_t xQueuePeek( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 8002226:	b580      	push	{r7, lr}
 8002228:	b08a      	sub	sp, #40	; 0x28
 800222a:	af00      	add	r7, sp, #0
 800222c:	60f8      	str	r0, [r7, #12]
 800222e:	60b9      	str	r1, [r7, #8]
 8002230:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 8002232:	2300      	movs	r3, #0
 8002234:	627b      	str	r3, [r7, #36]	; 0x24
TimeOut_t xTimeOut;
int8_t *pcOriginalReadPosition;
Queue_t * const pxQueue = xQueue;
 8002236:	68fb      	ldr	r3, [r7, #12]
 8002238:	623b      	str	r3, [r7, #32]

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 800223a:	6a3b      	ldr	r3, [r7, #32]
 800223c:	2b00      	cmp	r3, #0
 800223e:	d101      	bne.n	8002244 <xQueuePeek+0x1e>
 8002240:	b672      	cpsid	i
 8002242:	e7fe      	b.n	8002242 <xQueuePeek+0x1c>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8002244:	68bb      	ldr	r3, [r7, #8]
 8002246:	2b00      	cmp	r3, #0
 8002248:	d103      	bne.n	8002252 <xQueuePeek+0x2c>
 800224a:	6a3b      	ldr	r3, [r7, #32]
 800224c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800224e:	2b00      	cmp	r3, #0
 8002250:	d101      	bne.n	8002256 <xQueuePeek+0x30>
 8002252:	2301      	movs	r3, #1
 8002254:	e000      	b.n	8002258 <xQueuePeek+0x32>
 8002256:	2300      	movs	r3, #0
 8002258:	2b00      	cmp	r3, #0
 800225a:	d101      	bne.n	8002260 <xQueuePeek+0x3a>
 800225c:	b672      	cpsid	i
 800225e:	e7fe      	b.n	800225e <xQueuePeek+0x38>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8002260:	f002 fcc6 	bl	8004bf0 <xTaskGetSchedulerState>
 8002264:	1e03      	subs	r3, r0, #0
 8002266:	d102      	bne.n	800226e <xQueuePeek+0x48>
 8002268:	687b      	ldr	r3, [r7, #4]
 800226a:	2b00      	cmp	r3, #0
 800226c:	d101      	bne.n	8002272 <xQueuePeek+0x4c>
 800226e:	2301      	movs	r3, #1
 8002270:	e000      	b.n	8002274 <xQueuePeek+0x4e>
 8002272:	2300      	movs	r3, #0
 8002274:	2b00      	cmp	r3, #0
 8002276:	d101      	bne.n	800227c <xQueuePeek+0x56>
 8002278:	b672      	cpsid	i
 800227a:	e7fe      	b.n	800227a <xQueuePeek+0x54>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800227c:	f7ff fa6e 	bl	800175c <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8002280:	6a3b      	ldr	r3, [r7, #32]
 8002282:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002284:	61fb      	str	r3, [r7, #28]

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8002286:	69fb      	ldr	r3, [r7, #28]
 8002288:	2b00      	cmp	r3, #0
 800228a:	d01c      	beq.n	80022c6 <xQueuePeek+0xa0>
			{
				/* Remember the read position so it can be reset after the data
				is read from the queue as this function is only peeking the
				data, not removing it. */
				pcOriginalReadPosition = pxQueue->u.xQueue.pcReadFrom;
 800228c:	6a3b      	ldr	r3, [r7, #32]
 800228e:	68db      	ldr	r3, [r3, #12]
 8002290:	61bb      	str	r3, [r7, #24]

				prvCopyDataFromQueue( pxQueue, pvBuffer );
 8002292:	68ba      	ldr	r2, [r7, #8]
 8002294:	6a3b      	ldr	r3, [r7, #32]
 8002296:	0011      	movs	r1, r2
 8002298:	0018      	movs	r0, r3
 800229a:	f000 fa1c 	bl	80026d6 <prvCopyDataFromQueue>
				traceQUEUE_PEEK( pxQueue );

				/* The data is not being removed, so reset the read pointer. */
				pxQueue->u.xQueue.pcReadFrom = pcOriginalReadPosition;
 800229e:	6a3b      	ldr	r3, [r7, #32]
 80022a0:	69ba      	ldr	r2, [r7, #24]
 80022a2:	60da      	str	r2, [r3, #12]

				/* The data is being left in the queue, so see if there are
				any other tasks waiting for the data. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80022a4:	6a3b      	ldr	r3, [r7, #32]
 80022a6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80022a8:	2b00      	cmp	r3, #0
 80022aa:	d008      	beq.n	80022be <xQueuePeek+0x98>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80022ac:	6a3b      	ldr	r3, [r7, #32]
 80022ae:	3324      	adds	r3, #36	; 0x24
 80022b0:	0018      	movs	r0, r3
 80022b2:	f002 f9a7 	bl	8004604 <xTaskRemoveFromEventList>
 80022b6:	1e03      	subs	r3, r0, #0
 80022b8:	d001      	beq.n	80022be <xQueuePeek+0x98>
					{
						/* The task waiting has a higher priority than this task. */
						queueYIELD_IF_USING_PREEMPTION();
 80022ba:	f7ff fa3f 	bl	800173c <vPortYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 80022be:	f7ff fa5f 	bl	8001780 <vPortExitCritical>
				return pdPASS;
 80022c2:	2301      	movs	r3, #1
 80022c4:	e062      	b.n	800238c <xQueuePeek+0x166>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 80022c6:	687b      	ldr	r3, [r7, #4]
 80022c8:	2b00      	cmp	r3, #0
 80022ca:	d103      	bne.n	80022d4 <xQueuePeek+0xae>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 80022cc:	f7ff fa58 	bl	8001780 <vPortExitCritical>
					traceQUEUE_PEEK_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 80022d0:	2300      	movs	r3, #0
 80022d2:	e05b      	b.n	800238c <xQueuePeek+0x166>
				}
				else if( xEntryTimeSet == pdFALSE )
 80022d4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80022d6:	2b00      	cmp	r3, #0
 80022d8:	d106      	bne.n	80022e8 <xQueuePeek+0xc2>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure ready to enter the blocked
					state. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 80022da:	2310      	movs	r3, #16
 80022dc:	18fb      	adds	r3, r7, r3
 80022de:	0018      	movs	r0, r3
 80022e0:	f002 fa5c 	bl	800479c <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 80022e4:	2301      	movs	r3, #1
 80022e6:	627b      	str	r3, [r7, #36]	; 0x24
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 80022e8:	f7ff fa4a 	bl	8001780 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 80022ec:	f001 fe5c 	bl	8003fa8 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 80022f0:	f7ff fa34 	bl	800175c <vPortEnterCritical>
 80022f4:	6a3b      	ldr	r3, [r7, #32]
 80022f6:	2244      	movs	r2, #68	; 0x44
 80022f8:	5c9b      	ldrb	r3, [r3, r2]
 80022fa:	b25b      	sxtb	r3, r3
 80022fc:	3301      	adds	r3, #1
 80022fe:	d103      	bne.n	8002308 <xQueuePeek+0xe2>
 8002300:	6a3b      	ldr	r3, [r7, #32]
 8002302:	2244      	movs	r2, #68	; 0x44
 8002304:	2100      	movs	r1, #0
 8002306:	5499      	strb	r1, [r3, r2]
 8002308:	6a3b      	ldr	r3, [r7, #32]
 800230a:	2245      	movs	r2, #69	; 0x45
 800230c:	5c9b      	ldrb	r3, [r3, r2]
 800230e:	b25b      	sxtb	r3, r3
 8002310:	3301      	adds	r3, #1
 8002312:	d103      	bne.n	800231c <xQueuePeek+0xf6>
 8002314:	6a3b      	ldr	r3, [r7, #32]
 8002316:	2245      	movs	r2, #69	; 0x45
 8002318:	2100      	movs	r1, #0
 800231a:	5499      	strb	r1, [r3, r2]
 800231c:	f7ff fa30 	bl	8001780 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8002320:	1d3a      	adds	r2, r7, #4
 8002322:	2310      	movs	r3, #16
 8002324:	18fb      	adds	r3, r7, r3
 8002326:	0011      	movs	r1, r2
 8002328:	0018      	movs	r0, r3
 800232a:	f002 fa4b 	bl	80047c4 <xTaskCheckForTimeOut>
 800232e:	1e03      	subs	r3, r0, #0
 8002330:	d11e      	bne.n	8002370 <xQueuePeek+0x14a>
		{
			/* Timeout has not expired yet, check to see if there is data in the
			queue now, and if not enter the Blocked state to wait for data. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8002332:	6a3b      	ldr	r3, [r7, #32]
 8002334:	0018      	movs	r0, r3
 8002336:	f000 fa61 	bl	80027fc <prvIsQueueEmpty>
 800233a:	1e03      	subs	r3, r0, #0
 800233c:	d011      	beq.n	8002362 <xQueuePeek+0x13c>
			{
				traceBLOCKING_ON_QUEUE_PEEK( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 800233e:	6a3b      	ldr	r3, [r7, #32]
 8002340:	3324      	adds	r3, #36	; 0x24
 8002342:	687a      	ldr	r2, [r7, #4]
 8002344:	0011      	movs	r1, r2
 8002346:	0018      	movs	r0, r3
 8002348:	f002 f8ea 	bl	8004520 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 800234c:	6a3b      	ldr	r3, [r7, #32]
 800234e:	0018      	movs	r0, r3
 8002350:	f000 f9e7 	bl	8002722 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8002354:	f001 fe34 	bl	8003fc0 <xTaskResumeAll>
 8002358:	1e03      	subs	r3, r0, #0
 800235a:	d18f      	bne.n	800227c <xQueuePeek+0x56>
				{
					portYIELD_WITHIN_API();
 800235c:	f7ff f9ee 	bl	800173c <vPortYield>
 8002360:	e78c      	b.n	800227c <xQueuePeek+0x56>
			}
			else
			{
				/* There is data in the queue now, so don't enter the blocked
				state, instead return to try and obtain the data. */
				prvUnlockQueue( pxQueue );
 8002362:	6a3b      	ldr	r3, [r7, #32]
 8002364:	0018      	movs	r0, r3
 8002366:	f000 f9dc 	bl	8002722 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800236a:	f001 fe29 	bl	8003fc0 <xTaskResumeAll>
 800236e:	e785      	b.n	800227c <xQueuePeek+0x56>
		}
		else
		{
			/* The timeout has expired.  If there is still no data in the queue
			exit, otherwise go back and try to read the data again. */
			prvUnlockQueue( pxQueue );
 8002370:	6a3b      	ldr	r3, [r7, #32]
 8002372:	0018      	movs	r0, r3
 8002374:	f000 f9d5 	bl	8002722 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8002378:	f001 fe22 	bl	8003fc0 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800237c:	6a3b      	ldr	r3, [r7, #32]
 800237e:	0018      	movs	r0, r3
 8002380:	f000 fa3c 	bl	80027fc <prvIsQueueEmpty>
 8002384:	1e03      	subs	r3, r0, #0
 8002386:	d100      	bne.n	800238a <xQueuePeek+0x164>
 8002388:	e778      	b.n	800227c <xQueuePeek+0x56>
			{
				traceQUEUE_PEEK_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 800238a:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 800238c:	0018      	movs	r0, r3
 800238e:	46bd      	mov	sp, r7
 8002390:	b00a      	add	sp, #40	; 0x28
 8002392:	bd80      	pop	{r7, pc}

08002394 <xQueueReceiveFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueReceiveFromISR( QueueHandle_t xQueue, void * const pvBuffer, BaseType_t * const pxHigherPriorityTaskWoken )
{
 8002394:	b580      	push	{r7, lr}
 8002396:	b08a      	sub	sp, #40	; 0x28
 8002398:	af00      	add	r7, sp, #0
 800239a:	60f8      	str	r0, [r7, #12]
 800239c:	60b9      	str	r1, [r7, #8]
 800239e:	607a      	str	r2, [r7, #4]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 80023a0:	68fb      	ldr	r3, [r7, #12]
 80023a2:	623b      	str	r3, [r7, #32]

	configASSERT( pxQueue );
 80023a4:	6a3b      	ldr	r3, [r7, #32]
 80023a6:	2b00      	cmp	r3, #0
 80023a8:	d101      	bne.n	80023ae <xQueueReceiveFromISR+0x1a>
 80023aa:	b672      	cpsid	i
 80023ac:	e7fe      	b.n	80023ac <xQueueReceiveFromISR+0x18>
	configASSERT( !( ( pvBuffer == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80023ae:	68bb      	ldr	r3, [r7, #8]
 80023b0:	2b00      	cmp	r3, #0
 80023b2:	d103      	bne.n	80023bc <xQueueReceiveFromISR+0x28>
 80023b4:	6a3b      	ldr	r3, [r7, #32]
 80023b6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80023b8:	2b00      	cmp	r3, #0
 80023ba:	d101      	bne.n	80023c0 <xQueueReceiveFromISR+0x2c>
 80023bc:	2301      	movs	r3, #1
 80023be:	e000      	b.n	80023c2 <xQueueReceiveFromISR+0x2e>
 80023c0:	2300      	movs	r3, #0
 80023c2:	2b00      	cmp	r3, #0
 80023c4:	d101      	bne.n	80023ca <xQueueReceiveFromISR+0x36>
 80023c6:	b672      	cpsid	i
 80023c8:	e7fe      	b.n	80023c8 <xQueueReceiveFromISR+0x34>
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 80023ca:	f7ff f9f1 	bl	80017b0 <ulSetInterruptMaskFromISR>
 80023ce:	0003      	movs	r3, r0
 80023d0:	61fb      	str	r3, [r7, #28]
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 80023d2:	6a3b      	ldr	r3, [r7, #32]
 80023d4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80023d6:	61bb      	str	r3, [r7, #24]

		/* Cannot block in an ISR, so check there is data available. */
		if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 80023d8:	69bb      	ldr	r3, [r7, #24]
 80023da:	2b00      	cmp	r3, #0
 80023dc:	d033      	beq.n	8002446 <xQueueReceiveFromISR+0xb2>
		{
			const int8_t cRxLock = pxQueue->cRxLock;
 80023de:	2317      	movs	r3, #23
 80023e0:	18fb      	adds	r3, r7, r3
 80023e2:	6a3a      	ldr	r2, [r7, #32]
 80023e4:	2144      	movs	r1, #68	; 0x44
 80023e6:	5c52      	ldrb	r2, [r2, r1]
 80023e8:	701a      	strb	r2, [r3, #0]

			traceQUEUE_RECEIVE_FROM_ISR( pxQueue );

			prvCopyDataFromQueue( pxQueue, pvBuffer );
 80023ea:	68ba      	ldr	r2, [r7, #8]
 80023ec:	6a3b      	ldr	r3, [r7, #32]
 80023ee:	0011      	movs	r1, r2
 80023f0:	0018      	movs	r0, r3
 80023f2:	f000 f970 	bl	80026d6 <prvCopyDataFromQueue>
			pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 80023f6:	69bb      	ldr	r3, [r7, #24]
 80023f8:	1e5a      	subs	r2, r3, #1
 80023fa:	6a3b      	ldr	r3, [r7, #32]
 80023fc:	639a      	str	r2, [r3, #56]	; 0x38

			/* If the queue is locked the event list will not be modified.
			Instead update the lock count so the task that unlocks the queue
			will know that an ISR has removed data while the queue was
			locked. */
			if( cRxLock == queueUNLOCKED )
 80023fe:	2317      	movs	r3, #23
 8002400:	18fb      	adds	r3, r7, r3
 8002402:	781b      	ldrb	r3, [r3, #0]
 8002404:	b25b      	sxtb	r3, r3
 8002406:	3301      	adds	r3, #1
 8002408:	d111      	bne.n	800242e <xQueueReceiveFromISR+0x9a>
			{
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800240a:	6a3b      	ldr	r3, [r7, #32]
 800240c:	691b      	ldr	r3, [r3, #16]
 800240e:	2b00      	cmp	r3, #0
 8002410:	d016      	beq.n	8002440 <xQueueReceiveFromISR+0xac>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8002412:	6a3b      	ldr	r3, [r7, #32]
 8002414:	3310      	adds	r3, #16
 8002416:	0018      	movs	r0, r3
 8002418:	f002 f8f4 	bl	8004604 <xTaskRemoveFromEventList>
 800241c:	1e03      	subs	r3, r0, #0
 800241e:	d00f      	beq.n	8002440 <xQueueReceiveFromISR+0xac>
					{
						/* The task waiting has a higher priority than us so
						force a context switch. */
						if( pxHigherPriorityTaskWoken != NULL )
 8002420:	687b      	ldr	r3, [r7, #4]
 8002422:	2b00      	cmp	r3, #0
 8002424:	d00c      	beq.n	8002440 <xQueueReceiveFromISR+0xac>
						{
							*pxHigherPriorityTaskWoken = pdTRUE;
 8002426:	687b      	ldr	r3, [r7, #4]
 8002428:	2201      	movs	r2, #1
 800242a:	601a      	str	r2, [r3, #0]
 800242c:	e008      	b.n	8002440 <xQueueReceiveFromISR+0xac>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was removed while it was locked. */
				pxQueue->cRxLock = ( int8_t ) ( cRxLock + 1 );
 800242e:	2317      	movs	r3, #23
 8002430:	18fb      	adds	r3, r7, r3
 8002432:	781b      	ldrb	r3, [r3, #0]
 8002434:	3301      	adds	r3, #1
 8002436:	b2db      	uxtb	r3, r3
 8002438:	b259      	sxtb	r1, r3
 800243a:	6a3b      	ldr	r3, [r7, #32]
 800243c:	2244      	movs	r2, #68	; 0x44
 800243e:	5499      	strb	r1, [r3, r2]
			}

			xReturn = pdPASS;
 8002440:	2301      	movs	r3, #1
 8002442:	627b      	str	r3, [r7, #36]	; 0x24
 8002444:	e001      	b.n	800244a <xQueueReceiveFromISR+0xb6>
		}
		else
		{
			xReturn = pdFAIL;
 8002446:	2300      	movs	r3, #0
 8002448:	627b      	str	r3, [r7, #36]	; 0x24
			traceQUEUE_RECEIVE_FROM_ISR_FAILED( pxQueue );
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );
 800244a:	69fb      	ldr	r3, [r7, #28]
 800244c:	0018      	movs	r0, r3
 800244e:	f7ff f9b5 	bl	80017bc <vClearInterruptMaskFromISR>

	return xReturn;
 8002452:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8002454:	0018      	movs	r0, r3
 8002456:	46bd      	mov	sp, r7
 8002458:	b00a      	add	sp, #40	; 0x28
 800245a:	bd80      	pop	{r7, pc}

0800245c <xQueuePeekFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueuePeekFromISR( QueueHandle_t xQueue,  void * const pvBuffer )
{
 800245c:	b580      	push	{r7, lr}
 800245e:	b086      	sub	sp, #24
 8002460:	af00      	add	r7, sp, #0
 8002462:	6078      	str	r0, [r7, #4]
 8002464:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
int8_t *pcOriginalReadPosition;
Queue_t * const pxQueue = xQueue;
 8002466:	687b      	ldr	r3, [r7, #4]
 8002468:	613b      	str	r3, [r7, #16]

	configASSERT( pxQueue );
 800246a:	693b      	ldr	r3, [r7, #16]
 800246c:	2b00      	cmp	r3, #0
 800246e:	d101      	bne.n	8002474 <xQueuePeekFromISR+0x18>
 8002470:	b672      	cpsid	i
 8002472:	e7fe      	b.n	8002472 <xQueuePeekFromISR+0x16>
	configASSERT( !( ( pvBuffer == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8002474:	683b      	ldr	r3, [r7, #0]
 8002476:	2b00      	cmp	r3, #0
 8002478:	d103      	bne.n	8002482 <xQueuePeekFromISR+0x26>
 800247a:	693b      	ldr	r3, [r7, #16]
 800247c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800247e:	2b00      	cmp	r3, #0
 8002480:	d101      	bne.n	8002486 <xQueuePeekFromISR+0x2a>
 8002482:	2301      	movs	r3, #1
 8002484:	e000      	b.n	8002488 <xQueuePeekFromISR+0x2c>
 8002486:	2300      	movs	r3, #0
 8002488:	2b00      	cmp	r3, #0
 800248a:	d101      	bne.n	8002490 <xQueuePeekFromISR+0x34>
 800248c:	b672      	cpsid	i
 800248e:	e7fe      	b.n	800248e <xQueuePeekFromISR+0x32>
	configASSERT( pxQueue->uxItemSize != 0 ); /* Can't peek a semaphore. */
 8002490:	693b      	ldr	r3, [r7, #16]
 8002492:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002494:	2b00      	cmp	r3, #0
 8002496:	d101      	bne.n	800249c <xQueuePeekFromISR+0x40>
 8002498:	b672      	cpsid	i
 800249a:	e7fe      	b.n	800249a <xQueuePeekFromISR+0x3e>
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 800249c:	f7ff f988 	bl	80017b0 <ulSetInterruptMaskFromISR>
 80024a0:	0003      	movs	r3, r0
 80024a2:	60fb      	str	r3, [r7, #12]
	{
		/* Cannot block in an ISR, so check there is data available. */
		if( pxQueue->uxMessagesWaiting > ( UBaseType_t ) 0 )
 80024a4:	693b      	ldr	r3, [r7, #16]
 80024a6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80024a8:	2b00      	cmp	r3, #0
 80024aa:	d00e      	beq.n	80024ca <xQueuePeekFromISR+0x6e>
		{
			traceQUEUE_PEEK_FROM_ISR( pxQueue );

			/* Remember the read position so it can be reset as nothing is
			actually being removed from the queue. */
			pcOriginalReadPosition = pxQueue->u.xQueue.pcReadFrom;
 80024ac:	693b      	ldr	r3, [r7, #16]
 80024ae:	68db      	ldr	r3, [r3, #12]
 80024b0:	60bb      	str	r3, [r7, #8]
			prvCopyDataFromQueue( pxQueue, pvBuffer );
 80024b2:	683a      	ldr	r2, [r7, #0]
 80024b4:	693b      	ldr	r3, [r7, #16]
 80024b6:	0011      	movs	r1, r2
 80024b8:	0018      	movs	r0, r3
 80024ba:	f000 f90c 	bl	80026d6 <prvCopyDataFromQueue>
			pxQueue->u.xQueue.pcReadFrom = pcOriginalReadPosition;
 80024be:	693b      	ldr	r3, [r7, #16]
 80024c0:	68ba      	ldr	r2, [r7, #8]
 80024c2:	60da      	str	r2, [r3, #12]

			xReturn = pdPASS;
 80024c4:	2301      	movs	r3, #1
 80024c6:	617b      	str	r3, [r7, #20]
 80024c8:	e001      	b.n	80024ce <xQueuePeekFromISR+0x72>
		}
		else
		{
			xReturn = pdFAIL;
 80024ca:	2300      	movs	r3, #0
 80024cc:	617b      	str	r3, [r7, #20]
			traceQUEUE_PEEK_FROM_ISR_FAILED( pxQueue );
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );
 80024ce:	68fb      	ldr	r3, [r7, #12]
 80024d0:	0018      	movs	r0, r3
 80024d2:	f7ff f973 	bl	80017bc <vClearInterruptMaskFromISR>

	return xReturn;
 80024d6:	697b      	ldr	r3, [r7, #20]
}
 80024d8:	0018      	movs	r0, r3
 80024da:	46bd      	mov	sp, r7
 80024dc:	b006      	add	sp, #24
 80024de:	bd80      	pop	{r7, pc}

080024e0 <uxQueueMessagesWaiting>:
/*-----------------------------------------------------------*/

UBaseType_t uxQueueMessagesWaiting( const QueueHandle_t xQueue )
{
 80024e0:	b580      	push	{r7, lr}
 80024e2:	b084      	sub	sp, #16
 80024e4:	af00      	add	r7, sp, #0
 80024e6:	6078      	str	r0, [r7, #4]
UBaseType_t uxReturn;

	configASSERT( xQueue );
 80024e8:	687b      	ldr	r3, [r7, #4]
 80024ea:	2b00      	cmp	r3, #0
 80024ec:	d101      	bne.n	80024f2 <uxQueueMessagesWaiting+0x12>
 80024ee:	b672      	cpsid	i
 80024f0:	e7fe      	b.n	80024f0 <uxQueueMessagesWaiting+0x10>

	taskENTER_CRITICAL();
 80024f2:	f7ff f933 	bl	800175c <vPortEnterCritical>
	{
		uxReturn = ( ( Queue_t * ) xQueue )->uxMessagesWaiting;
 80024f6:	687b      	ldr	r3, [r7, #4]
 80024f8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80024fa:	60fb      	str	r3, [r7, #12]
	}
	taskEXIT_CRITICAL();
 80024fc:	f7ff f940 	bl	8001780 <vPortExitCritical>

	return uxReturn;
 8002500:	68fb      	ldr	r3, [r7, #12]
} /*lint !e818 Pointer cannot be declared const as xQueue is a typedef not pointer. */
 8002502:	0018      	movs	r0, r3
 8002504:	46bd      	mov	sp, r7
 8002506:	b004      	add	sp, #16
 8002508:	bd80      	pop	{r7, pc}

0800250a <uxQueueSpacesAvailable>:
/*-----------------------------------------------------------*/

UBaseType_t uxQueueSpacesAvailable( const QueueHandle_t xQueue )
{
 800250a:	b580      	push	{r7, lr}
 800250c:	b084      	sub	sp, #16
 800250e:	af00      	add	r7, sp, #0
 8002510:	6078      	str	r0, [r7, #4]
UBaseType_t uxReturn;
Queue_t * const pxQueue = xQueue;
 8002512:	687b      	ldr	r3, [r7, #4]
 8002514:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 8002516:	68fb      	ldr	r3, [r7, #12]
 8002518:	2b00      	cmp	r3, #0
 800251a:	d101      	bne.n	8002520 <uxQueueSpacesAvailable+0x16>
 800251c:	b672      	cpsid	i
 800251e:	e7fe      	b.n	800251e <uxQueueSpacesAvailable+0x14>

	taskENTER_CRITICAL();
 8002520:	f7ff f91c 	bl	800175c <vPortEnterCritical>
	{
		uxReturn = pxQueue->uxLength - pxQueue->uxMessagesWaiting;
 8002524:	68fb      	ldr	r3, [r7, #12]
 8002526:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8002528:	68fb      	ldr	r3, [r7, #12]
 800252a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800252c:	1ad3      	subs	r3, r2, r3
 800252e:	60bb      	str	r3, [r7, #8]
	}
	taskEXIT_CRITICAL();
 8002530:	f7ff f926 	bl	8001780 <vPortExitCritical>

	return uxReturn;
 8002534:	68bb      	ldr	r3, [r7, #8]
} /*lint !e818 Pointer cannot be declared const as xQueue is a typedef not pointer. */
 8002536:	0018      	movs	r0, r3
 8002538:	46bd      	mov	sp, r7
 800253a:	b004      	add	sp, #16
 800253c:	bd80      	pop	{r7, pc}

0800253e <uxQueueMessagesWaitingFromISR>:
/*-----------------------------------------------------------*/

UBaseType_t uxQueueMessagesWaitingFromISR( const QueueHandle_t xQueue )
{
 800253e:	b580      	push	{r7, lr}
 8002540:	b084      	sub	sp, #16
 8002542:	af00      	add	r7, sp, #0
 8002544:	6078      	str	r0, [r7, #4]
UBaseType_t uxReturn;
Queue_t * const pxQueue = xQueue;
 8002546:	687b      	ldr	r3, [r7, #4]
 8002548:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 800254a:	68fb      	ldr	r3, [r7, #12]
 800254c:	2b00      	cmp	r3, #0
 800254e:	d101      	bne.n	8002554 <uxQueueMessagesWaitingFromISR+0x16>
 8002550:	b672      	cpsid	i
 8002552:	e7fe      	b.n	8002552 <uxQueueMessagesWaitingFromISR+0x14>
	uxReturn = pxQueue->uxMessagesWaiting;
 8002554:	68fb      	ldr	r3, [r7, #12]
 8002556:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002558:	60bb      	str	r3, [r7, #8]

	return uxReturn;
 800255a:	68bb      	ldr	r3, [r7, #8]
} /*lint !e818 Pointer cannot be declared const as xQueue is a typedef not pointer. */
 800255c:	0018      	movs	r0, r3
 800255e:	46bd      	mov	sp, r7
 8002560:	b004      	add	sp, #16
 8002562:	bd80      	pop	{r7, pc}

08002564 <vQueueDelete>:
/*-----------------------------------------------------------*/

void vQueueDelete( QueueHandle_t xQueue )
{
 8002564:	b580      	push	{r7, lr}
 8002566:	b084      	sub	sp, #16
 8002568:	af00      	add	r7, sp, #0
 800256a:	6078      	str	r0, [r7, #4]
Queue_t * const pxQueue = xQueue;
 800256c:	687b      	ldr	r3, [r7, #4]
 800256e:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 8002570:	68fb      	ldr	r3, [r7, #12]
 8002572:	2b00      	cmp	r3, #0
 8002574:	d101      	bne.n	800257a <vQueueDelete+0x16>
 8002576:	b672      	cpsid	i
 8002578:	e7fe      	b.n	8002578 <vQueueDelete+0x14>
	traceQUEUE_DELETE( pxQueue );

	#if ( configQUEUE_REGISTRY_SIZE > 0 )
	{
		vQueueUnregisterQueue( pxQueue );
 800257a:	68fb      	ldr	r3, [r7, #12]
 800257c:	0018      	movs	r0, r3
 800257e:	f000 f9ed 	bl	800295c <vQueueUnregisterQueue>

	#if( ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 0 ) )
	{
		/* The queue can only have been allocated dynamically - free it
		again. */
		vPortFree( pxQueue );
 8002582:	68fb      	ldr	r3, [r7, #12]
 8002584:	0018      	movs	r0, r3
 8002586:	f7fe ff79 	bl	800147c <vPortFree>
		/* The queue must have been statically allocated, so is not going to be
		deleted.  Avoid compiler warnings about the unused parameter. */
		( void ) pxQueue;
	}
	#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
}
 800258a:	46c0      	nop			; (mov r8, r8)
 800258c:	46bd      	mov	sp, r7
 800258e:	b004      	add	sp, #16
 8002590:	bd80      	pop	{r7, pc}

08002592 <uxQueueGetQueueNumber>:
/*-----------------------------------------------------------*/

#if ( configUSE_TRACE_FACILITY == 1 )

	UBaseType_t uxQueueGetQueueNumber( QueueHandle_t xQueue )
	{
 8002592:	b580      	push	{r7, lr}
 8002594:	b082      	sub	sp, #8
 8002596:	af00      	add	r7, sp, #0
 8002598:	6078      	str	r0, [r7, #4]
		return ( ( Queue_t * ) xQueue )->uxQueueNumber;
 800259a:	687b      	ldr	r3, [r7, #4]
 800259c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
	}
 800259e:	0018      	movs	r0, r3
 80025a0:	46bd      	mov	sp, r7
 80025a2:	b002      	add	sp, #8
 80025a4:	bd80      	pop	{r7, pc}

080025a6 <vQueueSetQueueNumber>:
/*-----------------------------------------------------------*/

#if ( configUSE_TRACE_FACILITY == 1 )

	void vQueueSetQueueNumber( QueueHandle_t xQueue, UBaseType_t uxQueueNumber )
	{
 80025a6:	b580      	push	{r7, lr}
 80025a8:	b082      	sub	sp, #8
 80025aa:	af00      	add	r7, sp, #0
 80025ac:	6078      	str	r0, [r7, #4]
 80025ae:	6039      	str	r1, [r7, #0]
		( ( Queue_t * ) xQueue )->uxQueueNumber = uxQueueNumber;
 80025b0:	687b      	ldr	r3, [r7, #4]
 80025b2:	683a      	ldr	r2, [r7, #0]
 80025b4:	64da      	str	r2, [r3, #76]	; 0x4c
	}
 80025b6:	46c0      	nop			; (mov r8, r8)
 80025b8:	46bd      	mov	sp, r7
 80025ba:	b002      	add	sp, #8
 80025bc:	bd80      	pop	{r7, pc}

080025be <ucQueueGetQueueType>:
/*-----------------------------------------------------------*/

#if ( configUSE_TRACE_FACILITY == 1 )

	uint8_t ucQueueGetQueueType( QueueHandle_t xQueue )
	{
 80025be:	b580      	push	{r7, lr}
 80025c0:	b082      	sub	sp, #8
 80025c2:	af00      	add	r7, sp, #0
 80025c4:	6078      	str	r0, [r7, #4]
		return ( ( Queue_t * ) xQueue )->ucQueueType;
 80025c6:	687b      	ldr	r3, [r7, #4]
 80025c8:	2250      	movs	r2, #80	; 0x50
 80025ca:	5c9b      	ldrb	r3, [r3, r2]
	}
 80025cc:	0018      	movs	r0, r3
 80025ce:	46bd      	mov	sp, r7
 80025d0:	b002      	add	sp, #8
 80025d2:	bd80      	pop	{r7, pc}

080025d4 <prvGetDisinheritPriorityAfterTimeout>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static UBaseType_t prvGetDisinheritPriorityAfterTimeout( const Queue_t * const pxQueue )
	{
 80025d4:	b580      	push	{r7, lr}
 80025d6:	b084      	sub	sp, #16
 80025d8:	af00      	add	r7, sp, #0
 80025da:	6078      	str	r0, [r7, #4]
		priority, but the waiting task times out, then the holder should
		disinherit the priority - but only down to the highest priority of any
		other tasks that are waiting for the same mutex.  For this purpose,
		return the priority of the highest priority task that is waiting for the
		mutex. */
		if( listCURRENT_LIST_LENGTH( &( pxQueue->xTasksWaitingToReceive ) ) > 0U )
 80025dc:	687b      	ldr	r3, [r7, #4]
 80025de:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80025e0:	2b00      	cmp	r3, #0
 80025e2:	d006      	beq.n	80025f2 <prvGetDisinheritPriorityAfterTimeout+0x1e>
		{
			uxHighestPriorityOfWaitingTasks = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) listGET_ITEM_VALUE_OF_HEAD_ENTRY( &( pxQueue->xTasksWaitingToReceive ) );
 80025e4:	687b      	ldr	r3, [r7, #4]
 80025e6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80025e8:	681b      	ldr	r3, [r3, #0]
 80025ea:	2205      	movs	r2, #5
 80025ec:	1ad3      	subs	r3, r2, r3
 80025ee:	60fb      	str	r3, [r7, #12]
 80025f0:	e001      	b.n	80025f6 <prvGetDisinheritPriorityAfterTimeout+0x22>
		}
		else
		{
			uxHighestPriorityOfWaitingTasks = tskIDLE_PRIORITY;
 80025f2:	2300      	movs	r3, #0
 80025f4:	60fb      	str	r3, [r7, #12]
		}

		return uxHighestPriorityOfWaitingTasks;
 80025f6:	68fb      	ldr	r3, [r7, #12]
	}
 80025f8:	0018      	movs	r0, r3
 80025fa:	46bd      	mov	sp, r7
 80025fc:	b004      	add	sp, #16
 80025fe:	bd80      	pop	{r7, pc}

08002600 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 8002600:	b580      	push	{r7, lr}
 8002602:	b086      	sub	sp, #24
 8002604:	af00      	add	r7, sp, #0
 8002606:	60f8      	str	r0, [r7, #12]
 8002608:	60b9      	str	r1, [r7, #8]
 800260a:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 800260c:	2300      	movs	r3, #0
 800260e:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8002610:	68fb      	ldr	r3, [r7, #12]
 8002612:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002614:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 8002616:	68fb      	ldr	r3, [r7, #12]
 8002618:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800261a:	2b00      	cmp	r3, #0
 800261c:	d10e      	bne.n	800263c <prvCopyDataToQueue+0x3c>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800261e:	68fb      	ldr	r3, [r7, #12]
 8002620:	681b      	ldr	r3, [r3, #0]
 8002622:	2b00      	cmp	r3, #0
 8002624:	d14e      	bne.n	80026c4 <prvCopyDataToQueue+0xc4>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 8002626:	68fb      	ldr	r3, [r7, #12]
 8002628:	689b      	ldr	r3, [r3, #8]
 800262a:	0018      	movs	r0, r3
 800262c:	f002 fb64 	bl	8004cf8 <xTaskPriorityDisinherit>
 8002630:	0003      	movs	r3, r0
 8002632:	617b      	str	r3, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 8002634:	68fb      	ldr	r3, [r7, #12]
 8002636:	2200      	movs	r2, #0
 8002638:	609a      	str	r2, [r3, #8]
 800263a:	e043      	b.n	80026c4 <prvCopyDataToQueue+0xc4>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 800263c:	687b      	ldr	r3, [r7, #4]
 800263e:	2b00      	cmp	r3, #0
 8002640:	d119      	bne.n	8002676 <prvCopyDataToQueue+0x76>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8002642:	68fb      	ldr	r3, [r7, #12]
 8002644:	6858      	ldr	r0, [r3, #4]
 8002646:	68fb      	ldr	r3, [r7, #12]
 8002648:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800264a:	68bb      	ldr	r3, [r7, #8]
 800264c:	0019      	movs	r1, r3
 800264e:	f004 ff0f 	bl	8007470 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8002652:	68fb      	ldr	r3, [r7, #12]
 8002654:	685a      	ldr	r2, [r3, #4]
 8002656:	68fb      	ldr	r3, [r7, #12]
 8002658:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800265a:	18d2      	adds	r2, r2, r3
 800265c:	68fb      	ldr	r3, [r7, #12]
 800265e:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8002660:	68fb      	ldr	r3, [r7, #12]
 8002662:	685a      	ldr	r2, [r3, #4]
 8002664:	68fb      	ldr	r3, [r7, #12]
 8002666:	689b      	ldr	r3, [r3, #8]
 8002668:	429a      	cmp	r2, r3
 800266a:	d32b      	bcc.n	80026c4 <prvCopyDataToQueue+0xc4>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 800266c:	68fb      	ldr	r3, [r7, #12]
 800266e:	681a      	ldr	r2, [r3, #0]
 8002670:	68fb      	ldr	r3, [r7, #12]
 8002672:	605a      	str	r2, [r3, #4]
 8002674:	e026      	b.n	80026c4 <prvCopyDataToQueue+0xc4>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 8002676:	68fb      	ldr	r3, [r7, #12]
 8002678:	68d8      	ldr	r0, [r3, #12]
 800267a:	68fb      	ldr	r3, [r7, #12]
 800267c:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800267e:	68bb      	ldr	r3, [r7, #8]
 8002680:	0019      	movs	r1, r3
 8002682:	f004 fef5 	bl	8007470 <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 8002686:	68fb      	ldr	r3, [r7, #12]
 8002688:	68da      	ldr	r2, [r3, #12]
 800268a:	68fb      	ldr	r3, [r7, #12]
 800268c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800268e:	425b      	negs	r3, r3
 8002690:	18d2      	adds	r2, r2, r3
 8002692:	68fb      	ldr	r3, [r7, #12]
 8002694:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8002696:	68fb      	ldr	r3, [r7, #12]
 8002698:	68da      	ldr	r2, [r3, #12]
 800269a:	68fb      	ldr	r3, [r7, #12]
 800269c:	681b      	ldr	r3, [r3, #0]
 800269e:	429a      	cmp	r2, r3
 80026a0:	d207      	bcs.n	80026b2 <prvCopyDataToQueue+0xb2>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 80026a2:	68fb      	ldr	r3, [r7, #12]
 80026a4:	689a      	ldr	r2, [r3, #8]
 80026a6:	68fb      	ldr	r3, [r7, #12]
 80026a8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80026aa:	425b      	negs	r3, r3
 80026ac:	18d2      	adds	r2, r2, r3
 80026ae:	68fb      	ldr	r3, [r7, #12]
 80026b0:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 80026b2:	687b      	ldr	r3, [r7, #4]
 80026b4:	2b02      	cmp	r3, #2
 80026b6:	d105      	bne.n	80026c4 <prvCopyDataToQueue+0xc4>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 80026b8:	693b      	ldr	r3, [r7, #16]
 80026ba:	2b00      	cmp	r3, #0
 80026bc:	d002      	beq.n	80026c4 <prvCopyDataToQueue+0xc4>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 80026be:	693b      	ldr	r3, [r7, #16]
 80026c0:	3b01      	subs	r3, #1
 80026c2:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 80026c4:	693b      	ldr	r3, [r7, #16]
 80026c6:	1c5a      	adds	r2, r3, #1
 80026c8:	68fb      	ldr	r3, [r7, #12]
 80026ca:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 80026cc:	697b      	ldr	r3, [r7, #20]
}
 80026ce:	0018      	movs	r0, r3
 80026d0:	46bd      	mov	sp, r7
 80026d2:	b006      	add	sp, #24
 80026d4:	bd80      	pop	{r7, pc}

080026d6 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 80026d6:	b580      	push	{r7, lr}
 80026d8:	b082      	sub	sp, #8
 80026da:	af00      	add	r7, sp, #0
 80026dc:	6078      	str	r0, [r7, #4]
 80026de:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 80026e0:	687b      	ldr	r3, [r7, #4]
 80026e2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80026e4:	2b00      	cmp	r3, #0
 80026e6:	d018      	beq.n	800271a <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 80026e8:	687b      	ldr	r3, [r7, #4]
 80026ea:	68da      	ldr	r2, [r3, #12]
 80026ec:	687b      	ldr	r3, [r7, #4]
 80026ee:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80026f0:	18d2      	adds	r2, r2, r3
 80026f2:	687b      	ldr	r3, [r7, #4]
 80026f4:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 80026f6:	687b      	ldr	r3, [r7, #4]
 80026f8:	68da      	ldr	r2, [r3, #12]
 80026fa:	687b      	ldr	r3, [r7, #4]
 80026fc:	689b      	ldr	r3, [r3, #8]
 80026fe:	429a      	cmp	r2, r3
 8002700:	d303      	bcc.n	800270a <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 8002702:	687b      	ldr	r3, [r7, #4]
 8002704:	681a      	ldr	r2, [r3, #0]
 8002706:	687b      	ldr	r3, [r7, #4]
 8002708:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 800270a:	687b      	ldr	r3, [r7, #4]
 800270c:	68d9      	ldr	r1, [r3, #12]
 800270e:	687b      	ldr	r3, [r7, #4]
 8002710:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8002712:	683b      	ldr	r3, [r7, #0]
 8002714:	0018      	movs	r0, r3
 8002716:	f004 feab 	bl	8007470 <memcpy>
	}
}
 800271a:	46c0      	nop			; (mov r8, r8)
 800271c:	46bd      	mov	sp, r7
 800271e:	b002      	add	sp, #8
 8002720:	bd80      	pop	{r7, pc}

08002722 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 8002722:	b580      	push	{r7, lr}
 8002724:	b084      	sub	sp, #16
 8002726:	af00      	add	r7, sp, #0
 8002728:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 800272a:	f7ff f817 	bl	800175c <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 800272e:	230f      	movs	r3, #15
 8002730:	18fb      	adds	r3, r7, r3
 8002732:	687a      	ldr	r2, [r7, #4]
 8002734:	2145      	movs	r1, #69	; 0x45
 8002736:	5c52      	ldrb	r2, [r2, r1]
 8002738:	701a      	strb	r2, [r3, #0]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800273a:	e021      	b.n	8002780 <prvUnlockQueue+0x5e>
		{
			/* Data was posted while the queue was locked.  Are any tasks
			blocked waiting for data to become available? */
			#if ( configUSE_QUEUE_SETS == 1 )
			{
				if( pxQueue->pxQueueSetContainer != NULL )
 800273c:	687b      	ldr	r3, [r7, #4]
 800273e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002740:	2b00      	cmp	r3, #0
 8002742:	d008      	beq.n	8002756 <prvUnlockQueue+0x34>
				{
					if( prvNotifyQueueSetContainer( pxQueue ) != pdFALSE )
 8002744:	687b      	ldr	r3, [r7, #4]
 8002746:	0018      	movs	r0, r3
 8002748:	f000 f9e0 	bl	8002b0c <prvNotifyQueueSetContainer>
 800274c:	1e03      	subs	r3, r0, #0
 800274e:	d00f      	beq.n	8002770 <prvUnlockQueue+0x4e>
					{
						/* The queue is a member of a queue set, and posting to
						the queue set caused a higher priority task to unblock.
						A context switch is required. */
						vTaskMissedYield();
 8002750:	f002 f888 	bl	8004864 <vTaskMissedYield>
 8002754:	e00c      	b.n	8002770 <prvUnlockQueue+0x4e>
				else
				{
					/* Tasks that are removed from the event list will get
					added to the pending ready list as the scheduler is still
					suspended. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8002756:	687b      	ldr	r3, [r7, #4]
 8002758:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800275a:	2b00      	cmp	r3, #0
 800275c:	d017      	beq.n	800278e <prvUnlockQueue+0x6c>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800275e:	687b      	ldr	r3, [r7, #4]
 8002760:	3324      	adds	r3, #36	; 0x24
 8002762:	0018      	movs	r0, r3
 8002764:	f001 ff4e 	bl	8004604 <xTaskRemoveFromEventList>
 8002768:	1e03      	subs	r3, r0, #0
 800276a:	d001      	beq.n	8002770 <prvUnlockQueue+0x4e>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							vTaskMissedYield();
 800276c:	f002 f87a 	bl	8004864 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 8002770:	230f      	movs	r3, #15
 8002772:	18fb      	adds	r3, r7, r3
 8002774:	781b      	ldrb	r3, [r3, #0]
 8002776:	3b01      	subs	r3, #1
 8002778:	b2da      	uxtb	r2, r3
 800277a:	230f      	movs	r3, #15
 800277c:	18fb      	adds	r3, r7, r3
 800277e:	701a      	strb	r2, [r3, #0]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8002780:	230f      	movs	r3, #15
 8002782:	18fb      	adds	r3, r7, r3
 8002784:	781b      	ldrb	r3, [r3, #0]
 8002786:	b25b      	sxtb	r3, r3
 8002788:	2b00      	cmp	r3, #0
 800278a:	dcd7      	bgt.n	800273c <prvUnlockQueue+0x1a>
 800278c:	e000      	b.n	8002790 <prvUnlockQueue+0x6e>
						break;
 800278e:	46c0      	nop			; (mov r8, r8)
		}

		pxQueue->cTxLock = queueUNLOCKED;
 8002790:	687b      	ldr	r3, [r7, #4]
 8002792:	2245      	movs	r2, #69	; 0x45
 8002794:	21ff      	movs	r1, #255	; 0xff
 8002796:	5499      	strb	r1, [r3, r2]
	}
	taskEXIT_CRITICAL();
 8002798:	f7fe fff2 	bl	8001780 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 800279c:	f7fe ffde 	bl	800175c <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 80027a0:	230e      	movs	r3, #14
 80027a2:	18fb      	adds	r3, r7, r3
 80027a4:	687a      	ldr	r2, [r7, #4]
 80027a6:	2144      	movs	r1, #68	; 0x44
 80027a8:	5c52      	ldrb	r2, [r2, r1]
 80027aa:	701a      	strb	r2, [r3, #0]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 80027ac:	e014      	b.n	80027d8 <prvUnlockQueue+0xb6>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80027ae:	687b      	ldr	r3, [r7, #4]
 80027b0:	691b      	ldr	r3, [r3, #16]
 80027b2:	2b00      	cmp	r3, #0
 80027b4:	d017      	beq.n	80027e6 <prvUnlockQueue+0xc4>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80027b6:	687b      	ldr	r3, [r7, #4]
 80027b8:	3310      	adds	r3, #16
 80027ba:	0018      	movs	r0, r3
 80027bc:	f001 ff22 	bl	8004604 <xTaskRemoveFromEventList>
 80027c0:	1e03      	subs	r3, r0, #0
 80027c2:	d001      	beq.n	80027c8 <prvUnlockQueue+0xa6>
				{
					vTaskMissedYield();
 80027c4:	f002 f84e 	bl	8004864 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 80027c8:	230e      	movs	r3, #14
 80027ca:	18fb      	adds	r3, r7, r3
 80027cc:	781b      	ldrb	r3, [r3, #0]
 80027ce:	3b01      	subs	r3, #1
 80027d0:	b2da      	uxtb	r2, r3
 80027d2:	230e      	movs	r3, #14
 80027d4:	18fb      	adds	r3, r7, r3
 80027d6:	701a      	strb	r2, [r3, #0]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 80027d8:	230e      	movs	r3, #14
 80027da:	18fb      	adds	r3, r7, r3
 80027dc:	781b      	ldrb	r3, [r3, #0]
 80027de:	b25b      	sxtb	r3, r3
 80027e0:	2b00      	cmp	r3, #0
 80027e2:	dce4      	bgt.n	80027ae <prvUnlockQueue+0x8c>
 80027e4:	e000      	b.n	80027e8 <prvUnlockQueue+0xc6>
			}
			else
			{
				break;
 80027e6:	46c0      	nop			; (mov r8, r8)
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 80027e8:	687b      	ldr	r3, [r7, #4]
 80027ea:	2244      	movs	r2, #68	; 0x44
 80027ec:	21ff      	movs	r1, #255	; 0xff
 80027ee:	5499      	strb	r1, [r3, r2]
	}
	taskEXIT_CRITICAL();
 80027f0:	f7fe ffc6 	bl	8001780 <vPortExitCritical>
}
 80027f4:	46c0      	nop			; (mov r8, r8)
 80027f6:	46bd      	mov	sp, r7
 80027f8:	b004      	add	sp, #16
 80027fa:	bd80      	pop	{r7, pc}

080027fc <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 80027fc:	b580      	push	{r7, lr}
 80027fe:	b084      	sub	sp, #16
 8002800:	af00      	add	r7, sp, #0
 8002802:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8002804:	f7fe ffaa 	bl	800175c <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 8002808:	687b      	ldr	r3, [r7, #4]
 800280a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800280c:	2b00      	cmp	r3, #0
 800280e:	d102      	bne.n	8002816 <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 8002810:	2301      	movs	r3, #1
 8002812:	60fb      	str	r3, [r7, #12]
 8002814:	e001      	b.n	800281a <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 8002816:	2300      	movs	r3, #0
 8002818:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800281a:	f7fe ffb1 	bl	8001780 <vPortExitCritical>

	return xReturn;
 800281e:	68fb      	ldr	r3, [r7, #12]
}
 8002820:	0018      	movs	r0, r3
 8002822:	46bd      	mov	sp, r7
 8002824:	b004      	add	sp, #16
 8002826:	bd80      	pop	{r7, pc}

08002828 <xQueueIsQueueEmptyFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueIsQueueEmptyFromISR( const QueueHandle_t xQueue )
{
 8002828:	b580      	push	{r7, lr}
 800282a:	b084      	sub	sp, #16
 800282c:	af00      	add	r7, sp, #0
 800282e:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;
Queue_t * const pxQueue = xQueue;
 8002830:	687b      	ldr	r3, [r7, #4]
 8002832:	60bb      	str	r3, [r7, #8]

	configASSERT( pxQueue );
 8002834:	68bb      	ldr	r3, [r7, #8]
 8002836:	2b00      	cmp	r3, #0
 8002838:	d101      	bne.n	800283e <xQueueIsQueueEmptyFromISR+0x16>
 800283a:	b672      	cpsid	i
 800283c:	e7fe      	b.n	800283c <xQueueIsQueueEmptyFromISR+0x14>
	if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0 )
 800283e:	68bb      	ldr	r3, [r7, #8]
 8002840:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002842:	2b00      	cmp	r3, #0
 8002844:	d102      	bne.n	800284c <xQueueIsQueueEmptyFromISR+0x24>
	{
		xReturn = pdTRUE;
 8002846:	2301      	movs	r3, #1
 8002848:	60fb      	str	r3, [r7, #12]
 800284a:	e001      	b.n	8002850 <xQueueIsQueueEmptyFromISR+0x28>
	}
	else
	{
		xReturn = pdFALSE;
 800284c:	2300      	movs	r3, #0
 800284e:	60fb      	str	r3, [r7, #12]
	}

	return xReturn;
 8002850:	68fb      	ldr	r3, [r7, #12]
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
 8002852:	0018      	movs	r0, r3
 8002854:	46bd      	mov	sp, r7
 8002856:	b004      	add	sp, #16
 8002858:	bd80      	pop	{r7, pc}

0800285a <prvIsQueueFull>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 800285a:	b580      	push	{r7, lr}
 800285c:	b084      	sub	sp, #16
 800285e:	af00      	add	r7, sp, #0
 8002860:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8002862:	f7fe ff7b 	bl	800175c <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 8002866:	687b      	ldr	r3, [r7, #4]
 8002868:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800286a:	687b      	ldr	r3, [r7, #4]
 800286c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800286e:	429a      	cmp	r2, r3
 8002870:	d102      	bne.n	8002878 <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 8002872:	2301      	movs	r3, #1
 8002874:	60fb      	str	r3, [r7, #12]
 8002876:	e001      	b.n	800287c <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 8002878:	2300      	movs	r3, #0
 800287a:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800287c:	f7fe ff80 	bl	8001780 <vPortExitCritical>

	return xReturn;
 8002880:	68fb      	ldr	r3, [r7, #12]
}
 8002882:	0018      	movs	r0, r3
 8002884:	46bd      	mov	sp, r7
 8002886:	b004      	add	sp, #16
 8002888:	bd80      	pop	{r7, pc}

0800288a <xQueueIsQueueFullFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueIsQueueFullFromISR( const QueueHandle_t xQueue )
{
 800288a:	b580      	push	{r7, lr}
 800288c:	b084      	sub	sp, #16
 800288e:	af00      	add	r7, sp, #0
 8002890:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;
Queue_t * const pxQueue = xQueue;
 8002892:	687b      	ldr	r3, [r7, #4]
 8002894:	60bb      	str	r3, [r7, #8]

	configASSERT( pxQueue );
 8002896:	68bb      	ldr	r3, [r7, #8]
 8002898:	2b00      	cmp	r3, #0
 800289a:	d101      	bne.n	80028a0 <xQueueIsQueueFullFromISR+0x16>
 800289c:	b672      	cpsid	i
 800289e:	e7fe      	b.n	800289e <xQueueIsQueueFullFromISR+0x14>
	if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 80028a0:	68bb      	ldr	r3, [r7, #8]
 80028a2:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80028a4:	68bb      	ldr	r3, [r7, #8]
 80028a6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80028a8:	429a      	cmp	r2, r3
 80028aa:	d102      	bne.n	80028b2 <xQueueIsQueueFullFromISR+0x28>
	{
		xReturn = pdTRUE;
 80028ac:	2301      	movs	r3, #1
 80028ae:	60fb      	str	r3, [r7, #12]
 80028b0:	e001      	b.n	80028b6 <xQueueIsQueueFullFromISR+0x2c>
	}
	else
	{
		xReturn = pdFALSE;
 80028b2:	2300      	movs	r3, #0
 80028b4:	60fb      	str	r3, [r7, #12]
	}

	return xReturn;
 80028b6:	68fb      	ldr	r3, [r7, #12]
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
 80028b8:	0018      	movs	r0, r3
 80028ba:	46bd      	mov	sp, r7
 80028bc:	b004      	add	sp, #16
 80028be:	bd80      	pop	{r7, pc}

080028c0 <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 80028c0:	b580      	push	{r7, lr}
 80028c2:	b084      	sub	sp, #16
 80028c4:	af00      	add	r7, sp, #0
 80028c6:	6078      	str	r0, [r7, #4]
 80028c8:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 80028ca:	2300      	movs	r3, #0
 80028cc:	60fb      	str	r3, [r7, #12]
 80028ce:	e015      	b.n	80028fc <vQueueAddToRegistry+0x3c>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 80028d0:	4b0e      	ldr	r3, [pc, #56]	; (800290c <vQueueAddToRegistry+0x4c>)
 80028d2:	68fa      	ldr	r2, [r7, #12]
 80028d4:	00d2      	lsls	r2, r2, #3
 80028d6:	58d3      	ldr	r3, [r2, r3]
 80028d8:	2b00      	cmp	r3, #0
 80028da:	d10c      	bne.n	80028f6 <vQueueAddToRegistry+0x36>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 80028dc:	4b0b      	ldr	r3, [pc, #44]	; (800290c <vQueueAddToRegistry+0x4c>)
 80028de:	68fa      	ldr	r2, [r7, #12]
 80028e0:	00d2      	lsls	r2, r2, #3
 80028e2:	6839      	ldr	r1, [r7, #0]
 80028e4:	50d1      	str	r1, [r2, r3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 80028e6:	4a09      	ldr	r2, [pc, #36]	; (800290c <vQueueAddToRegistry+0x4c>)
 80028e8:	68fb      	ldr	r3, [r7, #12]
 80028ea:	00db      	lsls	r3, r3, #3
 80028ec:	18d3      	adds	r3, r2, r3
 80028ee:	3304      	adds	r3, #4
 80028f0:	687a      	ldr	r2, [r7, #4]
 80028f2:	601a      	str	r2, [r3, #0]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 80028f4:	e005      	b.n	8002902 <vQueueAddToRegistry+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 80028f6:	68fb      	ldr	r3, [r7, #12]
 80028f8:	3301      	adds	r3, #1
 80028fa:	60fb      	str	r3, [r7, #12]
 80028fc:	68fb      	ldr	r3, [r7, #12]
 80028fe:	2b07      	cmp	r3, #7
 8002900:	d9e6      	bls.n	80028d0 <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 8002902:	46c0      	nop			; (mov r8, r8)
 8002904:	46bd      	mov	sp, r7
 8002906:	b004      	add	sp, #16
 8002908:	bd80      	pop	{r7, pc}
 800290a:	46c0      	nop			; (mov r8, r8)
 800290c:	20000ddc 	.word	0x20000ddc

08002910 <pcQueueGetName>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	const char *pcQueueGetName( QueueHandle_t xQueue ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 8002910:	b580      	push	{r7, lr}
 8002912:	b084      	sub	sp, #16
 8002914:	af00      	add	r7, sp, #0
 8002916:	6078      	str	r0, [r7, #4]
	UBaseType_t ux;
	const char *pcReturn = NULL; /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
 8002918:	2300      	movs	r3, #0
 800291a:	60bb      	str	r3, [r7, #8]

		/* Note there is nothing here to protect against another task adding or
		removing entries from the registry while it is being searched. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800291c:	2300      	movs	r3, #0
 800291e:	60fb      	str	r3, [r7, #12]
 8002920:	e011      	b.n	8002946 <pcQueueGetName+0x36>
		{
			if( xQueueRegistry[ ux ].xHandle == xQueue )
 8002922:	4a0d      	ldr	r2, [pc, #52]	; (8002958 <pcQueueGetName+0x48>)
 8002924:	68fb      	ldr	r3, [r7, #12]
 8002926:	00db      	lsls	r3, r3, #3
 8002928:	18d3      	adds	r3, r2, r3
 800292a:	3304      	adds	r3, #4
 800292c:	681a      	ldr	r2, [r3, #0]
 800292e:	687b      	ldr	r3, [r7, #4]
 8002930:	429a      	cmp	r2, r3
 8002932:	d105      	bne.n	8002940 <pcQueueGetName+0x30>
			{
				pcReturn = xQueueRegistry[ ux ].pcQueueName;
 8002934:	4b08      	ldr	r3, [pc, #32]	; (8002958 <pcQueueGetName+0x48>)
 8002936:	68fa      	ldr	r2, [r7, #12]
 8002938:	00d2      	lsls	r2, r2, #3
 800293a:	58d3      	ldr	r3, [r2, r3]
 800293c:	60bb      	str	r3, [r7, #8]
				break;
 800293e:	e005      	b.n	800294c <pcQueueGetName+0x3c>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8002940:	68fb      	ldr	r3, [r7, #12]
 8002942:	3301      	adds	r3, #1
 8002944:	60fb      	str	r3, [r7, #12]
 8002946:	68fb      	ldr	r3, [r7, #12]
 8002948:	2b07      	cmp	r3, #7
 800294a:	d9ea      	bls.n	8002922 <pcQueueGetName+0x12>
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		return pcReturn;
 800294c:	68bb      	ldr	r3, [r7, #8]
	} /*lint !e818 xQueue cannot be a pointer to const because it is a typedef. */
 800294e:	0018      	movs	r0, r3
 8002950:	46bd      	mov	sp, r7
 8002952:	b004      	add	sp, #16
 8002954:	bd80      	pop	{r7, pc}
 8002956:	46c0      	nop			; (mov r8, r8)
 8002958:	20000ddc 	.word	0x20000ddc

0800295c <vQueueUnregisterQueue>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueUnregisterQueue( QueueHandle_t xQueue )
	{
 800295c:	b580      	push	{r7, lr}
 800295e:	b084      	sub	sp, #16
 8002960:	af00      	add	r7, sp, #0
 8002962:	6078      	str	r0, [r7, #4]
	UBaseType_t ux;

		/* See if the handle of the queue being unregistered in actually in the
		registry. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8002964:	2300      	movs	r3, #0
 8002966:	60fb      	str	r3, [r7, #12]
 8002968:	e018      	b.n	800299c <vQueueUnregisterQueue+0x40>
		{
			if( xQueueRegistry[ ux ].xHandle == xQueue )
 800296a:	4a10      	ldr	r2, [pc, #64]	; (80029ac <vQueueUnregisterQueue+0x50>)
 800296c:	68fb      	ldr	r3, [r7, #12]
 800296e:	00db      	lsls	r3, r3, #3
 8002970:	18d3      	adds	r3, r2, r3
 8002972:	3304      	adds	r3, #4
 8002974:	681a      	ldr	r2, [r3, #0]
 8002976:	687b      	ldr	r3, [r7, #4]
 8002978:	429a      	cmp	r2, r3
 800297a:	d10c      	bne.n	8002996 <vQueueUnregisterQueue+0x3a>
			{
				/* Set the name to NULL to show that this slot if free again. */
				xQueueRegistry[ ux ].pcQueueName = NULL;
 800297c:	4b0b      	ldr	r3, [pc, #44]	; (80029ac <vQueueUnregisterQueue+0x50>)
 800297e:	68fa      	ldr	r2, [r7, #12]
 8002980:	00d2      	lsls	r2, r2, #3
 8002982:	2100      	movs	r1, #0
 8002984:	50d1      	str	r1, [r2, r3]

				/* Set the handle to NULL to ensure the same queue handle cannot
				appear in the registry twice if it is added, removed, then
				added again. */
				xQueueRegistry[ ux ].xHandle = ( QueueHandle_t ) 0;
 8002986:	4a09      	ldr	r2, [pc, #36]	; (80029ac <vQueueUnregisterQueue+0x50>)
 8002988:	68fb      	ldr	r3, [r7, #12]
 800298a:	00db      	lsls	r3, r3, #3
 800298c:	18d3      	adds	r3, r2, r3
 800298e:	3304      	adds	r3, #4
 8002990:	2200      	movs	r2, #0
 8002992:	601a      	str	r2, [r3, #0]
				break;
 8002994:	e005      	b.n	80029a2 <vQueueUnregisterQueue+0x46>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8002996:	68fb      	ldr	r3, [r7, #12]
 8002998:	3301      	adds	r3, #1
 800299a:	60fb      	str	r3, [r7, #12]
 800299c:	68fb      	ldr	r3, [r7, #12]
 800299e:	2b07      	cmp	r3, #7
 80029a0:	d9e3      	bls.n	800296a <vQueueUnregisterQueue+0xe>
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

	} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
 80029a2:	46c0      	nop			; (mov r8, r8)
 80029a4:	46bd      	mov	sp, r7
 80029a6:	b004      	add	sp, #16
 80029a8:	bd80      	pop	{r7, pc}
 80029aa:	46c0      	nop			; (mov r8, r8)
 80029ac:	20000ddc 	.word	0x20000ddc

080029b0 <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 80029b0:	b580      	push	{r7, lr}
 80029b2:	b086      	sub	sp, #24
 80029b4:	af00      	add	r7, sp, #0
 80029b6:	60f8      	str	r0, [r7, #12]
 80029b8:	60b9      	str	r1, [r7, #8]
 80029ba:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = xQueue;
 80029bc:	68fb      	ldr	r3, [r7, #12]
 80029be:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 80029c0:	f7fe fecc 	bl	800175c <vPortEnterCritical>
 80029c4:	697b      	ldr	r3, [r7, #20]
 80029c6:	2244      	movs	r2, #68	; 0x44
 80029c8:	5c9b      	ldrb	r3, [r3, r2]
 80029ca:	b25b      	sxtb	r3, r3
 80029cc:	3301      	adds	r3, #1
 80029ce:	d103      	bne.n	80029d8 <vQueueWaitForMessageRestricted+0x28>
 80029d0:	697b      	ldr	r3, [r7, #20]
 80029d2:	2244      	movs	r2, #68	; 0x44
 80029d4:	2100      	movs	r1, #0
 80029d6:	5499      	strb	r1, [r3, r2]
 80029d8:	697b      	ldr	r3, [r7, #20]
 80029da:	2245      	movs	r2, #69	; 0x45
 80029dc:	5c9b      	ldrb	r3, [r3, r2]
 80029de:	b25b      	sxtb	r3, r3
 80029e0:	3301      	adds	r3, #1
 80029e2:	d103      	bne.n	80029ec <vQueueWaitForMessageRestricted+0x3c>
 80029e4:	697b      	ldr	r3, [r7, #20]
 80029e6:	2245      	movs	r2, #69	; 0x45
 80029e8:	2100      	movs	r1, #0
 80029ea:	5499      	strb	r1, [r3, r2]
 80029ec:	f7fe fec8 	bl	8001780 <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 80029f0:	697b      	ldr	r3, [r7, #20]
 80029f2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80029f4:	2b00      	cmp	r3, #0
 80029f6:	d106      	bne.n	8002a06 <vQueueWaitForMessageRestricted+0x56>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 80029f8:	697b      	ldr	r3, [r7, #20]
 80029fa:	3324      	adds	r3, #36	; 0x24
 80029fc:	687a      	ldr	r2, [r7, #4]
 80029fe:	68b9      	ldr	r1, [r7, #8]
 8002a00:	0018      	movs	r0, r3
 8002a02:	f001 fdd9 	bl	80045b8 <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 8002a06:	697b      	ldr	r3, [r7, #20]
 8002a08:	0018      	movs	r0, r3
 8002a0a:	f7ff fe8a 	bl	8002722 <prvUnlockQueue>
	}
 8002a0e:	46c0      	nop			; (mov r8, r8)
 8002a10:	46bd      	mov	sp, r7
 8002a12:	b006      	add	sp, #24
 8002a14:	bd80      	pop	{r7, pc}

08002a16 <xQueueCreateSet>:
/*-----------------------------------------------------------*/

#if( ( configUSE_QUEUE_SETS == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) )

	QueueSetHandle_t xQueueCreateSet( const UBaseType_t uxEventQueueLength )
	{
 8002a16:	b580      	push	{r7, lr}
 8002a18:	b084      	sub	sp, #16
 8002a1a:	af00      	add	r7, sp, #0
 8002a1c:	6078      	str	r0, [r7, #4]
	QueueSetHandle_t pxQueue;

		pxQueue = xQueueGenericCreate( uxEventQueueLength, ( UBaseType_t ) sizeof( Queue_t * ), queueQUEUE_TYPE_SET );
 8002a1e:	687b      	ldr	r3, [r7, #4]
 8002a20:	2200      	movs	r2, #0
 8002a22:	2104      	movs	r1, #4
 8002a24:	0018      	movs	r0, r3
 8002a26:	f7fe ff85 	bl	8001934 <xQueueGenericCreate>
 8002a2a:	0003      	movs	r3, r0
 8002a2c:	60fb      	str	r3, [r7, #12]

		return pxQueue;
 8002a2e:	68fb      	ldr	r3, [r7, #12]
	}
 8002a30:	0018      	movs	r0, r3
 8002a32:	46bd      	mov	sp, r7
 8002a34:	b004      	add	sp, #16
 8002a36:	bd80      	pop	{r7, pc}

08002a38 <xQueueAddToSet>:
/*-----------------------------------------------------------*/

#if ( configUSE_QUEUE_SETS == 1 )

	BaseType_t xQueueAddToSet( QueueSetMemberHandle_t xQueueOrSemaphore, QueueSetHandle_t xQueueSet )
	{
 8002a38:	b580      	push	{r7, lr}
 8002a3a:	b084      	sub	sp, #16
 8002a3c:	af00      	add	r7, sp, #0
 8002a3e:	6078      	str	r0, [r7, #4]
 8002a40:	6039      	str	r1, [r7, #0]
	BaseType_t xReturn;

		taskENTER_CRITICAL();
 8002a42:	f7fe fe8b 	bl	800175c <vPortEnterCritical>
		{
			if( ( ( Queue_t * ) xQueueOrSemaphore )->pxQueueSetContainer != NULL )
 8002a46:	687b      	ldr	r3, [r7, #4]
 8002a48:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002a4a:	2b00      	cmp	r3, #0
 8002a4c:	d002      	beq.n	8002a54 <xQueueAddToSet+0x1c>
			{
				/* Cannot add a queue/semaphore to more than one queue set. */
				xReturn = pdFAIL;
 8002a4e:	2300      	movs	r3, #0
 8002a50:	60fb      	str	r3, [r7, #12]
 8002a52:	e00b      	b.n	8002a6c <xQueueAddToSet+0x34>
			}
			else if( ( ( Queue_t * ) xQueueOrSemaphore )->uxMessagesWaiting != ( UBaseType_t ) 0 )
 8002a54:	687b      	ldr	r3, [r7, #4]
 8002a56:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002a58:	2b00      	cmp	r3, #0
 8002a5a:	d002      	beq.n	8002a62 <xQueueAddToSet+0x2a>
			{
				/* Cannot add a queue/semaphore to a queue set if there are already
				items in the queue/semaphore. */
				xReturn = pdFAIL;
 8002a5c:	2300      	movs	r3, #0
 8002a5e:	60fb      	str	r3, [r7, #12]
 8002a60:	e004      	b.n	8002a6c <xQueueAddToSet+0x34>
			}
			else
			{
				( ( Queue_t * ) xQueueOrSemaphore )->pxQueueSetContainer = xQueueSet;
 8002a62:	687b      	ldr	r3, [r7, #4]
 8002a64:	683a      	ldr	r2, [r7, #0]
 8002a66:	649a      	str	r2, [r3, #72]	; 0x48
				xReturn = pdPASS;
 8002a68:	2301      	movs	r3, #1
 8002a6a:	60fb      	str	r3, [r7, #12]
			}
		}
		taskEXIT_CRITICAL();
 8002a6c:	f7fe fe88 	bl	8001780 <vPortExitCritical>

		return xReturn;
 8002a70:	68fb      	ldr	r3, [r7, #12]
	}
 8002a72:	0018      	movs	r0, r3
 8002a74:	46bd      	mov	sp, r7
 8002a76:	b004      	add	sp, #16
 8002a78:	bd80      	pop	{r7, pc}

08002a7a <xQueueRemoveFromSet>:
/*-----------------------------------------------------------*/

#if ( configUSE_QUEUE_SETS == 1 )

	BaseType_t xQueueRemoveFromSet( QueueSetMemberHandle_t xQueueOrSemaphore, QueueSetHandle_t xQueueSet )
	{
 8002a7a:	b580      	push	{r7, lr}
 8002a7c:	b084      	sub	sp, #16
 8002a7e:	af00      	add	r7, sp, #0
 8002a80:	6078      	str	r0, [r7, #4]
 8002a82:	6039      	str	r1, [r7, #0]
	BaseType_t xReturn;
	Queue_t * const pxQueueOrSemaphore = ( Queue_t * ) xQueueOrSemaphore;
 8002a84:	687b      	ldr	r3, [r7, #4]
 8002a86:	60bb      	str	r3, [r7, #8]

		if( pxQueueOrSemaphore->pxQueueSetContainer != xQueueSet )
 8002a88:	68bb      	ldr	r3, [r7, #8]
 8002a8a:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8002a8c:	683b      	ldr	r3, [r7, #0]
 8002a8e:	429a      	cmp	r2, r3
 8002a90:	d002      	beq.n	8002a98 <xQueueRemoveFromSet+0x1e>
		{
			/* The queue was not a member of the set. */
			xReturn = pdFAIL;
 8002a92:	2300      	movs	r3, #0
 8002a94:	60fb      	str	r3, [r7, #12]
 8002a96:	e00f      	b.n	8002ab8 <xQueueRemoveFromSet+0x3e>
		}
		else if( pxQueueOrSemaphore->uxMessagesWaiting != ( UBaseType_t ) 0 )
 8002a98:	68bb      	ldr	r3, [r7, #8]
 8002a9a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002a9c:	2b00      	cmp	r3, #0
 8002a9e:	d002      	beq.n	8002aa6 <xQueueRemoveFromSet+0x2c>
		{
			/* It is dangerous to remove a queue from a set when the queue is
			not empty because the queue set will still hold pending events for
			the queue. */
			xReturn = pdFAIL;
 8002aa0:	2300      	movs	r3, #0
 8002aa2:	60fb      	str	r3, [r7, #12]
 8002aa4:	e008      	b.n	8002ab8 <xQueueRemoveFromSet+0x3e>
		}
		else
		{
			taskENTER_CRITICAL();
 8002aa6:	f7fe fe59 	bl	800175c <vPortEnterCritical>
			{
				/* The queue is no longer contained in the set. */
				pxQueueOrSemaphore->pxQueueSetContainer = NULL;
 8002aaa:	68bb      	ldr	r3, [r7, #8]
 8002aac:	2200      	movs	r2, #0
 8002aae:	649a      	str	r2, [r3, #72]	; 0x48
			}
			taskEXIT_CRITICAL();
 8002ab0:	f7fe fe66 	bl	8001780 <vPortExitCritical>
			xReturn = pdPASS;
 8002ab4:	2301      	movs	r3, #1
 8002ab6:	60fb      	str	r3, [r7, #12]
		}

		return xReturn;
 8002ab8:	68fb      	ldr	r3, [r7, #12]
	} /*lint !e818 xQueueSet could not be declared as pointing to const as it is a typedef. */
 8002aba:	0018      	movs	r0, r3
 8002abc:	46bd      	mov	sp, r7
 8002abe:	b004      	add	sp, #16
 8002ac0:	bd80      	pop	{r7, pc}

08002ac2 <xQueueSelectFromSet>:
/*-----------------------------------------------------------*/

#if ( configUSE_QUEUE_SETS == 1 )

	QueueSetMemberHandle_t xQueueSelectFromSet( QueueSetHandle_t xQueueSet, TickType_t const xTicksToWait )
	{
 8002ac2:	b580      	push	{r7, lr}
 8002ac4:	b084      	sub	sp, #16
 8002ac6:	af00      	add	r7, sp, #0
 8002ac8:	6078      	str	r0, [r7, #4]
 8002aca:	6039      	str	r1, [r7, #0]
	QueueSetMemberHandle_t xReturn = NULL;
 8002acc:	2300      	movs	r3, #0
 8002ace:	60fb      	str	r3, [r7, #12]

		( void ) xQueueReceive( ( QueueHandle_t ) xQueueSet, &xReturn, xTicksToWait ); /*lint !e961 Casting from one typedef to another is not redundant. */
 8002ad0:	683a      	ldr	r2, [r7, #0]
 8002ad2:	230c      	movs	r3, #12
 8002ad4:	18f9      	adds	r1, r7, r3
 8002ad6:	687b      	ldr	r3, [r7, #4]
 8002ad8:	0018      	movs	r0, r3
 8002ada:	f7ff fa15 	bl	8001f08 <xQueueReceive>
		return xReturn;
 8002ade:	68fb      	ldr	r3, [r7, #12]
	}
 8002ae0:	0018      	movs	r0, r3
 8002ae2:	46bd      	mov	sp, r7
 8002ae4:	b004      	add	sp, #16
 8002ae6:	bd80      	pop	{r7, pc}

08002ae8 <xQueueSelectFromSetFromISR>:
/*-----------------------------------------------------------*/

#if ( configUSE_QUEUE_SETS == 1 )

	QueueSetMemberHandle_t xQueueSelectFromSetFromISR( QueueSetHandle_t xQueueSet )
	{
 8002ae8:	b580      	push	{r7, lr}
 8002aea:	b084      	sub	sp, #16
 8002aec:	af00      	add	r7, sp, #0
 8002aee:	6078      	str	r0, [r7, #4]
	QueueSetMemberHandle_t xReturn = NULL;
 8002af0:	2300      	movs	r3, #0
 8002af2:	60fb      	str	r3, [r7, #12]

		( void ) xQueueReceiveFromISR( ( QueueHandle_t ) xQueueSet, &xReturn, NULL ); /*lint !e961 Casting from one typedef to another is not redundant. */
 8002af4:	230c      	movs	r3, #12
 8002af6:	18f9      	adds	r1, r7, r3
 8002af8:	687b      	ldr	r3, [r7, #4]
 8002afa:	2200      	movs	r2, #0
 8002afc:	0018      	movs	r0, r3
 8002afe:	f7ff fc49 	bl	8002394 <xQueueReceiveFromISR>
		return xReturn;
 8002b02:	68fb      	ldr	r3, [r7, #12]
	}
 8002b04:	0018      	movs	r0, r3
 8002b06:	46bd      	mov	sp, r7
 8002b08:	b004      	add	sp, #16
 8002b0a:	bd80      	pop	{r7, pc}

08002b0c <prvNotifyQueueSetContainer>:
/*-----------------------------------------------------------*/

#if ( configUSE_QUEUE_SETS == 1 )

	static BaseType_t prvNotifyQueueSetContainer( const Queue_t * const pxQueue )
	{
 8002b0c:	b580      	push	{r7, lr}
 8002b0e:	b086      	sub	sp, #24
 8002b10:	af00      	add	r7, sp, #0
 8002b12:	6078      	str	r0, [r7, #4]
	Queue_t *pxQueueSetContainer = pxQueue->pxQueueSetContainer;
 8002b14:	687b      	ldr	r3, [r7, #4]
 8002b16:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002b18:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 8002b1a:	2300      	movs	r3, #0
 8002b1c:	617b      	str	r3, [r7, #20]

		/* This function must be called form a critical section. */

		configASSERT( pxQueueSetContainer );
 8002b1e:	693b      	ldr	r3, [r7, #16]
 8002b20:	2b00      	cmp	r3, #0
 8002b22:	d101      	bne.n	8002b28 <prvNotifyQueueSetContainer+0x1c>
 8002b24:	b672      	cpsid	i
 8002b26:	e7fe      	b.n	8002b26 <prvNotifyQueueSetContainer+0x1a>
		configASSERT( pxQueueSetContainer->uxMessagesWaiting < pxQueueSetContainer->uxLength );
 8002b28:	693b      	ldr	r3, [r7, #16]
 8002b2a:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8002b2c:	693b      	ldr	r3, [r7, #16]
 8002b2e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002b30:	429a      	cmp	r2, r3
 8002b32:	d301      	bcc.n	8002b38 <prvNotifyQueueSetContainer+0x2c>
 8002b34:	b672      	cpsid	i
 8002b36:	e7fe      	b.n	8002b36 <prvNotifyQueueSetContainer+0x2a>

		if( pxQueueSetContainer->uxMessagesWaiting < pxQueueSetContainer->uxLength )
 8002b38:	693b      	ldr	r3, [r7, #16]
 8002b3a:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8002b3c:	693b      	ldr	r3, [r7, #16]
 8002b3e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002b40:	429a      	cmp	r2, r3
 8002b42:	d22a      	bcs.n	8002b9a <prvNotifyQueueSetContainer+0x8e>
		{
			const int8_t cTxLock = pxQueueSetContainer->cTxLock;
 8002b44:	230f      	movs	r3, #15
 8002b46:	18fb      	adds	r3, r7, r3
 8002b48:	693a      	ldr	r2, [r7, #16]
 8002b4a:	2145      	movs	r1, #69	; 0x45
 8002b4c:	5c52      	ldrb	r2, [r2, r1]
 8002b4e:	701a      	strb	r2, [r3, #0]

			traceQUEUE_SEND( pxQueueSetContainer );

			/* The data copied is the handle of the queue that contains data. */
			xReturn = prvCopyDataToQueue( pxQueueSetContainer, &pxQueue, queueSEND_TO_BACK );
 8002b50:	1d39      	adds	r1, r7, #4
 8002b52:	693b      	ldr	r3, [r7, #16]
 8002b54:	2200      	movs	r2, #0
 8002b56:	0018      	movs	r0, r3
 8002b58:	f7ff fd52 	bl	8002600 <prvCopyDataToQueue>
 8002b5c:	0003      	movs	r3, r0
 8002b5e:	617b      	str	r3, [r7, #20]

			if( cTxLock == queueUNLOCKED )
 8002b60:	230f      	movs	r3, #15
 8002b62:	18fb      	adds	r3, r7, r3
 8002b64:	781b      	ldrb	r3, [r3, #0]
 8002b66:	b25b      	sxtb	r3, r3
 8002b68:	3301      	adds	r3, #1
 8002b6a:	d10d      	bne.n	8002b88 <prvNotifyQueueSetContainer+0x7c>
			{
				if( listLIST_IS_EMPTY( &( pxQueueSetContainer->xTasksWaitingToReceive ) ) == pdFALSE )
 8002b6c:	693b      	ldr	r3, [r7, #16]
 8002b6e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002b70:	2b00      	cmp	r3, #0
 8002b72:	d012      	beq.n	8002b9a <prvNotifyQueueSetContainer+0x8e>
				{
					if( xTaskRemoveFromEventList( &( pxQueueSetContainer->xTasksWaitingToReceive ) ) != pdFALSE )
 8002b74:	693b      	ldr	r3, [r7, #16]
 8002b76:	3324      	adds	r3, #36	; 0x24
 8002b78:	0018      	movs	r0, r3
 8002b7a:	f001 fd43 	bl	8004604 <xTaskRemoveFromEventList>
 8002b7e:	1e03      	subs	r3, r0, #0
 8002b80:	d00b      	beq.n	8002b9a <prvNotifyQueueSetContainer+0x8e>
					{
						/* The task waiting has a higher priority. */
						xReturn = pdTRUE;
 8002b82:	2301      	movs	r3, #1
 8002b84:	617b      	str	r3, [r7, #20]
 8002b86:	e008      	b.n	8002b9a <prvNotifyQueueSetContainer+0x8e>
					mtCOVERAGE_TEST_MARKER();
				}
			}
			else
			{
				pxQueueSetContainer->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8002b88:	230f      	movs	r3, #15
 8002b8a:	18fb      	adds	r3, r7, r3
 8002b8c:	781b      	ldrb	r3, [r3, #0]
 8002b8e:	3301      	adds	r3, #1
 8002b90:	b2db      	uxtb	r3, r3
 8002b92:	b259      	sxtb	r1, r3
 8002b94:	693b      	ldr	r3, [r7, #16]
 8002b96:	2245      	movs	r2, #69	; 0x45
 8002b98:	5499      	strb	r1, [r3, r2]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8002b9a:	697b      	ldr	r3, [r7, #20]
	}
 8002b9c:	0018      	movs	r0, r3
 8002b9e:	46bd      	mov	sp, r7
 8002ba0:	b006      	add	sp, #24
 8002ba2:	bd80      	pop	{r7, pc}

08002ba4 <xStreamBufferGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	StreamBufferHandle_t xStreamBufferGenericCreate( size_t xBufferSizeBytes, size_t xTriggerLevelBytes, BaseType_t xIsMessageBuffer )
	{
 8002ba4:	b590      	push	{r4, r7, lr}
 8002ba6:	b089      	sub	sp, #36	; 0x24
 8002ba8:	af02      	add	r7, sp, #8
 8002baa:	60f8      	str	r0, [r7, #12]
 8002bac:	60b9      	str	r1, [r7, #8]
 8002bae:	607a      	str	r2, [r7, #4]

		/* In case the stream buffer is going to be used as a message buffer
		(that is, it will hold discrete messages with a little meta data that
		says how big the next message is) check the buffer will be large enough
		to hold at least one message. */
		if( xIsMessageBuffer == pdTRUE )
 8002bb0:	687b      	ldr	r3, [r7, #4]
 8002bb2:	2b01      	cmp	r3, #1
 8002bb4:	d108      	bne.n	8002bc8 <xStreamBufferGenericCreate+0x24>
		{
			/* Is a message buffer but not statically allocated. */
			ucFlags = sbFLAGS_IS_MESSAGE_BUFFER;
 8002bb6:	2317      	movs	r3, #23
 8002bb8:	18fb      	adds	r3, r7, r3
 8002bba:	2201      	movs	r2, #1
 8002bbc:	701a      	strb	r2, [r3, #0]
			configASSERT( xBufferSizeBytes > sbBYTES_TO_STORE_MESSAGE_LENGTH );
 8002bbe:	68fb      	ldr	r3, [r7, #12]
 8002bc0:	2b04      	cmp	r3, #4
 8002bc2:	d80a      	bhi.n	8002bda <xStreamBufferGenericCreate+0x36>
 8002bc4:	b672      	cpsid	i
 8002bc6:	e7fe      	b.n	8002bc6 <xStreamBufferGenericCreate+0x22>
		}
		else
		{
			/* Not a message buffer and not statically allocated. */
			ucFlags = 0;
 8002bc8:	2317      	movs	r3, #23
 8002bca:	18fb      	adds	r3, r7, r3
 8002bcc:	2200      	movs	r2, #0
 8002bce:	701a      	strb	r2, [r3, #0]
			configASSERT( xBufferSizeBytes > 0 );
 8002bd0:	68fb      	ldr	r3, [r7, #12]
 8002bd2:	2b00      	cmp	r3, #0
 8002bd4:	d101      	bne.n	8002bda <xStreamBufferGenericCreate+0x36>
 8002bd6:	b672      	cpsid	i
 8002bd8:	e7fe      	b.n	8002bd8 <xStreamBufferGenericCreate+0x34>
		}
		configASSERT( xTriggerLevelBytes <= xBufferSizeBytes );
 8002bda:	68ba      	ldr	r2, [r7, #8]
 8002bdc:	68fb      	ldr	r3, [r7, #12]
 8002bde:	429a      	cmp	r2, r3
 8002be0:	d901      	bls.n	8002be6 <xStreamBufferGenericCreate+0x42>
 8002be2:	b672      	cpsid	i
 8002be4:	e7fe      	b.n	8002be4 <xStreamBufferGenericCreate+0x40>

		/* A trigger level of 0 would cause a waiting task to unblock even when
		the buffer was empty. */
		if( xTriggerLevelBytes == ( size_t ) 0 )
 8002be6:	68bb      	ldr	r3, [r7, #8]
 8002be8:	2b00      	cmp	r3, #0
 8002bea:	d101      	bne.n	8002bf0 <xStreamBufferGenericCreate+0x4c>
		{
			xTriggerLevelBytes = ( size_t ) 1;
 8002bec:	2301      	movs	r3, #1
 8002bee:	60bb      	str	r3, [r7, #8]
		and the buffer follows immediately after.  The requested size is
		incremented so the free space is returned as the user would expect -
		this is a quirk of the implementation that means otherwise the free
		space would be reported as one byte smaller than would be logically
		expected. */
		xBufferSizeBytes++;
 8002bf0:	68fb      	ldr	r3, [r7, #12]
 8002bf2:	3301      	adds	r3, #1
 8002bf4:	60fb      	str	r3, [r7, #12]
		pucAllocatedMemory = ( uint8_t * ) pvPortMalloc( xBufferSizeBytes + sizeof( StreamBuffer_t ) ); /*lint !e9079 malloc() only returns void*. */
 8002bf6:	68fb      	ldr	r3, [r7, #12]
 8002bf8:	3324      	adds	r3, #36	; 0x24
 8002bfa:	0018      	movs	r0, r3
 8002bfc:	f7fe fbf4 	bl	80013e8 <pvPortMalloc>
 8002c00:	0003      	movs	r3, r0
 8002c02:	613b      	str	r3, [r7, #16]

		if( pucAllocatedMemory != NULL )
 8002c04:	693b      	ldr	r3, [r7, #16]
 8002c06:	2b00      	cmp	r3, #0
 8002c08:	d00c      	beq.n	8002c24 <xStreamBufferGenericCreate+0x80>
		{
			prvInitialiseNewStreamBuffer( ( StreamBuffer_t * ) pucAllocatedMemory, /* Structure at the start of the allocated memory. */ /*lint !e9087 Safe cast as allocated memory is aligned. */ /*lint !e826 Area is not too small and alignment is guaranteed provided malloc() behaves as expected and returns aligned buffer. */
 8002c0a:	693b      	ldr	r3, [r7, #16]
 8002c0c:	3324      	adds	r3, #36	; 0x24
 8002c0e:	0019      	movs	r1, r3
 8002c10:	68bc      	ldr	r4, [r7, #8]
 8002c12:	68fa      	ldr	r2, [r7, #12]
 8002c14:	6938      	ldr	r0, [r7, #16]
 8002c16:	2317      	movs	r3, #23
 8002c18:	18fb      	adds	r3, r7, r3
 8002c1a:	781b      	ldrb	r3, [r3, #0]
 8002c1c:	9300      	str	r3, [sp, #0]
 8002c1e:	0023      	movs	r3, r4
 8002c20:	f000 fc9e 	bl	8003560 <prvInitialiseNewStreamBuffer>
		else
		{
			traceSTREAM_BUFFER_CREATE_FAILED( xIsMessageBuffer );
		}

		return ( StreamBufferHandle_t ) pucAllocatedMemory; /*lint !e9087 !e826 Safe cast as allocated memory is aligned. */
 8002c24:	693b      	ldr	r3, [r7, #16]
	}
 8002c26:	0018      	movs	r0, r3
 8002c28:	46bd      	mov	sp, r7
 8002c2a:	b007      	add	sp, #28
 8002c2c:	bd90      	pop	{r4, r7, pc}

08002c2e <vStreamBufferDelete>:

#endif /* ( configSUPPORT_STATIC_ALLOCATION == 1 ) */
/*-----------------------------------------------------------*/

void vStreamBufferDelete( StreamBufferHandle_t xStreamBuffer )
{
 8002c2e:	b580      	push	{r7, lr}
 8002c30:	b084      	sub	sp, #16
 8002c32:	af00      	add	r7, sp, #0
 8002c34:	6078      	str	r0, [r7, #4]
StreamBuffer_t * pxStreamBuffer = xStreamBuffer;
 8002c36:	687b      	ldr	r3, [r7, #4]
 8002c38:	60fb      	str	r3, [r7, #12]

	configASSERT( pxStreamBuffer );
 8002c3a:	68fb      	ldr	r3, [r7, #12]
 8002c3c:	2b00      	cmp	r3, #0
 8002c3e:	d101      	bne.n	8002c44 <vStreamBufferDelete+0x16>
 8002c40:	b672      	cpsid	i
 8002c42:	e7fe      	b.n	8002c42 <vStreamBufferDelete+0x14>

	traceSTREAM_BUFFER_DELETE( xStreamBuffer );

	if( ( pxStreamBuffer->ucFlags & sbFLAGS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) pdFALSE )
 8002c44:	68fb      	ldr	r3, [r7, #12]
 8002c46:	7f1b      	ldrb	r3, [r3, #28]
 8002c48:	001a      	movs	r2, r3
 8002c4a:	2302      	movs	r3, #2
 8002c4c:	4013      	ands	r3, r2
 8002c4e:	d104      	bne.n	8002c5a <vStreamBufferDelete+0x2c>
	{
		#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
		{
			/* Both the structure and the buffer were allocated using a single call
			to pvPortMalloc(), hence only one call to vPortFree() is required. */
			vPortFree( ( void * ) pxStreamBuffer ); /*lint !e9087 Standard free() semantics require void *, plus pxStreamBuffer was allocated by pvPortMalloc(). */
 8002c50:	68fb      	ldr	r3, [r7, #12]
 8002c52:	0018      	movs	r0, r3
 8002c54:	f7fe fc12 	bl	800147c <vPortFree>
	{
		/* The structure and buffer were not allocated dynamically and cannot be
		freed - just scrub the structure so future use will assert. */
		( void ) memset( pxStreamBuffer, 0x00, sizeof( StreamBuffer_t ) );
	}
}
 8002c58:	e005      	b.n	8002c66 <vStreamBufferDelete+0x38>
		( void ) memset( pxStreamBuffer, 0x00, sizeof( StreamBuffer_t ) );
 8002c5a:	68fb      	ldr	r3, [r7, #12]
 8002c5c:	2224      	movs	r2, #36	; 0x24
 8002c5e:	2100      	movs	r1, #0
 8002c60:	0018      	movs	r0, r3
 8002c62:	f004 fc0e 	bl	8007482 <memset>
}
 8002c66:	46c0      	nop			; (mov r8, r8)
 8002c68:	46bd      	mov	sp, r7
 8002c6a:	b004      	add	sp, #16
 8002c6c:	bd80      	pop	{r7, pc}

08002c6e <xStreamBufferReset>:
/*-----------------------------------------------------------*/

BaseType_t xStreamBufferReset( StreamBufferHandle_t xStreamBuffer )
{
 8002c6e:	b590      	push	{r4, r7, lr}
 8002c70:	b089      	sub	sp, #36	; 0x24
 8002c72:	af02      	add	r7, sp, #8
 8002c74:	6078      	str	r0, [r7, #4]
StreamBuffer_t * const pxStreamBuffer = xStreamBuffer;
 8002c76:	687b      	ldr	r3, [r7, #4]
 8002c78:	613b      	str	r3, [r7, #16]
BaseType_t xReturn = pdFAIL;
 8002c7a:	2300      	movs	r3, #0
 8002c7c:	617b      	str	r3, [r7, #20]

#if( configUSE_TRACE_FACILITY == 1 )
	UBaseType_t uxStreamBufferNumber;
#endif

	configASSERT( pxStreamBuffer );
 8002c7e:	693b      	ldr	r3, [r7, #16]
 8002c80:	2b00      	cmp	r3, #0
 8002c82:	d101      	bne.n	8002c88 <xStreamBufferReset+0x1a>
 8002c84:	b672      	cpsid	i
 8002c86:	e7fe      	b.n	8002c86 <xStreamBufferReset+0x18>

	#if( configUSE_TRACE_FACILITY == 1 )
	{
		/* Store the stream buffer number so it can be restored after the
		reset. */
		uxStreamBufferNumber = pxStreamBuffer->uxStreamBufferNumber;
 8002c88:	693b      	ldr	r3, [r7, #16]
 8002c8a:	6a1b      	ldr	r3, [r3, #32]
 8002c8c:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Can only reset a message buffer if there are no tasks blocked on it. */
	taskENTER_CRITICAL();
 8002c8e:	f7fe fd65 	bl	800175c <vPortEnterCritical>
	{
		if( pxStreamBuffer->xTaskWaitingToReceive == NULL )
 8002c92:	693b      	ldr	r3, [r7, #16]
 8002c94:	691b      	ldr	r3, [r3, #16]
 8002c96:	2b00      	cmp	r3, #0
 8002c98:	d115      	bne.n	8002cc6 <xStreamBufferReset+0x58>
		{
			if( pxStreamBuffer->xTaskWaitingToSend == NULL )
 8002c9a:	693b      	ldr	r3, [r7, #16]
 8002c9c:	695b      	ldr	r3, [r3, #20]
 8002c9e:	2b00      	cmp	r3, #0
 8002ca0:	d111      	bne.n	8002cc6 <xStreamBufferReset+0x58>
			{
				prvInitialiseNewStreamBuffer( pxStreamBuffer,
 8002ca2:	693b      	ldr	r3, [r7, #16]
 8002ca4:	6999      	ldr	r1, [r3, #24]
 8002ca6:	693b      	ldr	r3, [r7, #16]
 8002ca8:	689a      	ldr	r2, [r3, #8]
 8002caa:	693b      	ldr	r3, [r7, #16]
 8002cac:	68dc      	ldr	r4, [r3, #12]
 8002cae:	693b      	ldr	r3, [r7, #16]
 8002cb0:	7f1b      	ldrb	r3, [r3, #28]
 8002cb2:	6938      	ldr	r0, [r7, #16]
 8002cb4:	9300      	str	r3, [sp, #0]
 8002cb6:	0023      	movs	r3, r4
 8002cb8:	f000 fc52 	bl	8003560 <prvInitialiseNewStreamBuffer>
											  pxStreamBuffer->pucBuffer,
											  pxStreamBuffer->xLength,
											  pxStreamBuffer->xTriggerLevelBytes,
											  pxStreamBuffer->ucFlags );
				xReturn = pdPASS;
 8002cbc:	2301      	movs	r3, #1
 8002cbe:	617b      	str	r3, [r7, #20]

				#if( configUSE_TRACE_FACILITY == 1 )
				{
					pxStreamBuffer->uxStreamBufferNumber = uxStreamBufferNumber;
 8002cc0:	693b      	ldr	r3, [r7, #16]
 8002cc2:	68fa      	ldr	r2, [r7, #12]
 8002cc4:	621a      	str	r2, [r3, #32]

				traceSTREAM_BUFFER_RESET( xStreamBuffer );
			}
		}
	}
	taskEXIT_CRITICAL();
 8002cc6:	f7fe fd5b 	bl	8001780 <vPortExitCritical>

	return xReturn;
 8002cca:	697b      	ldr	r3, [r7, #20]
}
 8002ccc:	0018      	movs	r0, r3
 8002cce:	46bd      	mov	sp, r7
 8002cd0:	b007      	add	sp, #28
 8002cd2:	bd90      	pop	{r4, r7, pc}

08002cd4 <xStreamBufferSetTriggerLevel>:
/*-----------------------------------------------------------*/

BaseType_t xStreamBufferSetTriggerLevel( StreamBufferHandle_t xStreamBuffer, size_t xTriggerLevel )
{
 8002cd4:	b580      	push	{r7, lr}
 8002cd6:	b084      	sub	sp, #16
 8002cd8:	af00      	add	r7, sp, #0
 8002cda:	6078      	str	r0, [r7, #4]
 8002cdc:	6039      	str	r1, [r7, #0]
StreamBuffer_t * const pxStreamBuffer = xStreamBuffer;
 8002cde:	687b      	ldr	r3, [r7, #4]
 8002ce0:	60bb      	str	r3, [r7, #8]
BaseType_t xReturn;

	configASSERT( pxStreamBuffer );
 8002ce2:	68bb      	ldr	r3, [r7, #8]
 8002ce4:	2b00      	cmp	r3, #0
 8002ce6:	d101      	bne.n	8002cec <xStreamBufferSetTriggerLevel+0x18>
 8002ce8:	b672      	cpsid	i
 8002cea:	e7fe      	b.n	8002cea <xStreamBufferSetTriggerLevel+0x16>

	/* It is not valid for the trigger level to be 0. */
	if( xTriggerLevel == ( size_t ) 0 )
 8002cec:	683b      	ldr	r3, [r7, #0]
 8002cee:	2b00      	cmp	r3, #0
 8002cf0:	d101      	bne.n	8002cf6 <xStreamBufferSetTriggerLevel+0x22>
	{
		xTriggerLevel = ( size_t ) 1;
 8002cf2:	2301      	movs	r3, #1
 8002cf4:	603b      	str	r3, [r7, #0]
	}

	/* The trigger level is the number of bytes that must be in the stream
	buffer before a task that is waiting for data is unblocked. */
	if( xTriggerLevel <= pxStreamBuffer->xLength )
 8002cf6:	68bb      	ldr	r3, [r7, #8]
 8002cf8:	689a      	ldr	r2, [r3, #8]
 8002cfa:	683b      	ldr	r3, [r7, #0]
 8002cfc:	429a      	cmp	r2, r3
 8002cfe:	d305      	bcc.n	8002d0c <xStreamBufferSetTriggerLevel+0x38>
	{
		pxStreamBuffer->xTriggerLevelBytes = xTriggerLevel;
 8002d00:	68bb      	ldr	r3, [r7, #8]
 8002d02:	683a      	ldr	r2, [r7, #0]
 8002d04:	60da      	str	r2, [r3, #12]
		xReturn = pdPASS;
 8002d06:	2301      	movs	r3, #1
 8002d08:	60fb      	str	r3, [r7, #12]
 8002d0a:	e001      	b.n	8002d10 <xStreamBufferSetTriggerLevel+0x3c>
	}
	else
	{
		xReturn = pdFALSE;
 8002d0c:	2300      	movs	r3, #0
 8002d0e:	60fb      	str	r3, [r7, #12]
	}

	return xReturn;
 8002d10:	68fb      	ldr	r3, [r7, #12]
}
 8002d12:	0018      	movs	r0, r3
 8002d14:	46bd      	mov	sp, r7
 8002d16:	b004      	add	sp, #16
 8002d18:	bd80      	pop	{r7, pc}

08002d1a <xStreamBufferSpacesAvailable>:
/*-----------------------------------------------------------*/

size_t xStreamBufferSpacesAvailable( StreamBufferHandle_t xStreamBuffer )
{
 8002d1a:	b580      	push	{r7, lr}
 8002d1c:	b084      	sub	sp, #16
 8002d1e:	af00      	add	r7, sp, #0
 8002d20:	6078      	str	r0, [r7, #4]
const StreamBuffer_t * const pxStreamBuffer = xStreamBuffer;
 8002d22:	687b      	ldr	r3, [r7, #4]
 8002d24:	60bb      	str	r3, [r7, #8]
size_t xSpace;

	configASSERT( pxStreamBuffer );
 8002d26:	68bb      	ldr	r3, [r7, #8]
 8002d28:	2b00      	cmp	r3, #0
 8002d2a:	d101      	bne.n	8002d30 <xStreamBufferSpacesAvailable+0x16>
 8002d2c:	b672      	cpsid	i
 8002d2e:	e7fe      	b.n	8002d2e <xStreamBufferSpacesAvailable+0x14>

	xSpace = pxStreamBuffer->xLength + pxStreamBuffer->xTail;
 8002d30:	68bb      	ldr	r3, [r7, #8]
 8002d32:	689a      	ldr	r2, [r3, #8]
 8002d34:	68bb      	ldr	r3, [r7, #8]
 8002d36:	681b      	ldr	r3, [r3, #0]
 8002d38:	18d3      	adds	r3, r2, r3
 8002d3a:	60fb      	str	r3, [r7, #12]
	xSpace -= pxStreamBuffer->xHead;
 8002d3c:	68bb      	ldr	r3, [r7, #8]
 8002d3e:	685b      	ldr	r3, [r3, #4]
 8002d40:	68fa      	ldr	r2, [r7, #12]
 8002d42:	1ad3      	subs	r3, r2, r3
 8002d44:	60fb      	str	r3, [r7, #12]
	xSpace -= ( size_t ) 1;
 8002d46:	68fb      	ldr	r3, [r7, #12]
 8002d48:	3b01      	subs	r3, #1
 8002d4a:	60fb      	str	r3, [r7, #12]

	if( xSpace >= pxStreamBuffer->xLength )
 8002d4c:	68bb      	ldr	r3, [r7, #8]
 8002d4e:	689a      	ldr	r2, [r3, #8]
 8002d50:	68fb      	ldr	r3, [r7, #12]
 8002d52:	429a      	cmp	r2, r3
 8002d54:	d804      	bhi.n	8002d60 <xStreamBufferSpacesAvailable+0x46>
	{
		xSpace -= pxStreamBuffer->xLength;
 8002d56:	68bb      	ldr	r3, [r7, #8]
 8002d58:	689b      	ldr	r3, [r3, #8]
 8002d5a:	68fa      	ldr	r2, [r7, #12]
 8002d5c:	1ad3      	subs	r3, r2, r3
 8002d5e:	60fb      	str	r3, [r7, #12]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xSpace;
 8002d60:	68fb      	ldr	r3, [r7, #12]
}
 8002d62:	0018      	movs	r0, r3
 8002d64:	46bd      	mov	sp, r7
 8002d66:	b004      	add	sp, #16
 8002d68:	bd80      	pop	{r7, pc}

08002d6a <xStreamBufferBytesAvailable>:
/*-----------------------------------------------------------*/

size_t xStreamBufferBytesAvailable( StreamBufferHandle_t xStreamBuffer )
{
 8002d6a:	b580      	push	{r7, lr}
 8002d6c:	b084      	sub	sp, #16
 8002d6e:	af00      	add	r7, sp, #0
 8002d70:	6078      	str	r0, [r7, #4]
const StreamBuffer_t * const pxStreamBuffer = xStreamBuffer;
 8002d72:	687b      	ldr	r3, [r7, #4]
 8002d74:	60fb      	str	r3, [r7, #12]
size_t xReturn;

	configASSERT( pxStreamBuffer );
 8002d76:	68fb      	ldr	r3, [r7, #12]
 8002d78:	2b00      	cmp	r3, #0
 8002d7a:	d101      	bne.n	8002d80 <xStreamBufferBytesAvailable+0x16>
 8002d7c:	b672      	cpsid	i
 8002d7e:	e7fe      	b.n	8002d7e <xStreamBufferBytesAvailable+0x14>

	xReturn = prvBytesInBuffer( pxStreamBuffer );
 8002d80:	68fb      	ldr	r3, [r7, #12]
 8002d82:	0018      	movs	r0, r3
 8002d84:	f000 fbce 	bl	8003524 <prvBytesInBuffer>
 8002d88:	0003      	movs	r3, r0
 8002d8a:	60bb      	str	r3, [r7, #8]
	return xReturn;
 8002d8c:	68bb      	ldr	r3, [r7, #8]
}
 8002d8e:	0018      	movs	r0, r3
 8002d90:	46bd      	mov	sp, r7
 8002d92:	b004      	add	sp, #16
 8002d94:	bd80      	pop	{r7, pc}

08002d96 <xStreamBufferSend>:

size_t xStreamBufferSend( StreamBufferHandle_t xStreamBuffer,
						  const void *pvTxData,
						  size_t xDataLengthBytes,
						  TickType_t xTicksToWait )
{
 8002d96:	b590      	push	{r4, r7, lr}
 8002d98:	b08d      	sub	sp, #52	; 0x34
 8002d9a:	af02      	add	r7, sp, #8
 8002d9c:	60f8      	str	r0, [r7, #12]
 8002d9e:	60b9      	str	r1, [r7, #8]
 8002da0:	607a      	str	r2, [r7, #4]
 8002da2:	603b      	str	r3, [r7, #0]
StreamBuffer_t * const pxStreamBuffer = xStreamBuffer;
 8002da4:	68fb      	ldr	r3, [r7, #12]
 8002da6:	61fb      	str	r3, [r7, #28]
size_t xReturn, xSpace = 0;
 8002da8:	2300      	movs	r3, #0
 8002daa:	627b      	str	r3, [r7, #36]	; 0x24
size_t xRequiredSpace = xDataLengthBytes;
 8002dac:	687b      	ldr	r3, [r7, #4]
 8002dae:	623b      	str	r3, [r7, #32]
TimeOut_t xTimeOut;

	configASSERT( pvTxData );
 8002db0:	68bb      	ldr	r3, [r7, #8]
 8002db2:	2b00      	cmp	r3, #0
 8002db4:	d101      	bne.n	8002dba <xStreamBufferSend+0x24>
 8002db6:	b672      	cpsid	i
 8002db8:	e7fe      	b.n	8002db8 <xStreamBufferSend+0x22>
	configASSERT( pxStreamBuffer );
 8002dba:	69fb      	ldr	r3, [r7, #28]
 8002dbc:	2b00      	cmp	r3, #0
 8002dbe:	d101      	bne.n	8002dc4 <xStreamBufferSend+0x2e>
 8002dc0:	b672      	cpsid	i
 8002dc2:	e7fe      	b.n	8002dc2 <xStreamBufferSend+0x2c>

	/* This send function is used to write to both message buffers and stream
	buffers.  If this is a message buffer then the space needed must be
	increased by the amount of bytes needed to store the length of the
	message. */
	if( ( pxStreamBuffer->ucFlags & sbFLAGS_IS_MESSAGE_BUFFER ) != ( uint8_t ) 0 )
 8002dc4:	69fb      	ldr	r3, [r7, #28]
 8002dc6:	7f1b      	ldrb	r3, [r3, #28]
 8002dc8:	001a      	movs	r2, r3
 8002dca:	2301      	movs	r3, #1
 8002dcc:	4013      	ands	r3, r2
 8002dce:	d008      	beq.n	8002de2 <xStreamBufferSend+0x4c>
	{
		xRequiredSpace += sbBYTES_TO_STORE_MESSAGE_LENGTH;
 8002dd0:	6a3b      	ldr	r3, [r7, #32]
 8002dd2:	3304      	adds	r3, #4
 8002dd4:	623b      	str	r3, [r7, #32]

		/* Overflow? */
		configASSERT( xRequiredSpace > xDataLengthBytes );
 8002dd6:	6a3a      	ldr	r2, [r7, #32]
 8002dd8:	687b      	ldr	r3, [r7, #4]
 8002dda:	429a      	cmp	r2, r3
 8002ddc:	d801      	bhi.n	8002de2 <xStreamBufferSend+0x4c>
 8002dde:	b672      	cpsid	i
 8002de0:	e7fe      	b.n	8002de0 <xStreamBufferSend+0x4a>
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	if( xTicksToWait != ( TickType_t ) 0 )
 8002de2:	683b      	ldr	r3, [r7, #0]
 8002de4:	2b00      	cmp	r3, #0
 8002de6:	d036      	beq.n	8002e56 <xStreamBufferSend+0xc0>
	{
		vTaskSetTimeOutState( &xTimeOut );
 8002de8:	2310      	movs	r3, #16
 8002dea:	18fb      	adds	r3, r7, r3
 8002dec:	0018      	movs	r0, r3
 8002dee:	f001 fcb7 	bl	8004760 <vTaskSetTimeOutState>

		do
		{
			/* Wait until the required number of bytes are free in the message
			buffer. */
			taskENTER_CRITICAL();
 8002df2:	f7fe fcb3 	bl	800175c <vPortEnterCritical>
			{
				xSpace = xStreamBufferSpacesAvailable( pxStreamBuffer );
 8002df6:	69fb      	ldr	r3, [r7, #28]
 8002df8:	0018      	movs	r0, r3
 8002dfa:	f7ff ff8e 	bl	8002d1a <xStreamBufferSpacesAvailable>
 8002dfe:	0003      	movs	r3, r0
 8002e00:	627b      	str	r3, [r7, #36]	; 0x24

				if( xSpace < xRequiredSpace )
 8002e02:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002e04:	6a3b      	ldr	r3, [r7, #32]
 8002e06:	429a      	cmp	r2, r3
 8002e08:	d20e      	bcs.n	8002e28 <xStreamBufferSend+0x92>
				{
					/* Clear notification state as going to wait for space. */
					( void ) xTaskNotifyStateClear( NULL );
 8002e0a:	2000      	movs	r0, #0
 8002e0c:	f002 fabc 	bl	8005388 <xTaskNotifyStateClear>

					/* Should only be one writer. */
					configASSERT( pxStreamBuffer->xTaskWaitingToSend == NULL );
 8002e10:	69fb      	ldr	r3, [r7, #28]
 8002e12:	695b      	ldr	r3, [r3, #20]
 8002e14:	2b00      	cmp	r3, #0
 8002e16:	d001      	beq.n	8002e1c <xStreamBufferSend+0x86>
 8002e18:	b672      	cpsid	i
 8002e1a:	e7fe      	b.n	8002e1a <xStreamBufferSend+0x84>
					pxStreamBuffer->xTaskWaitingToSend = xTaskGetCurrentTaskHandle();
 8002e1c:	f001 feda 	bl	8004bd4 <xTaskGetCurrentTaskHandle>
 8002e20:	0002      	movs	r2, r0
 8002e22:	69fb      	ldr	r3, [r7, #28]
 8002e24:	615a      	str	r2, [r3, #20]
 8002e26:	e002      	b.n	8002e2e <xStreamBufferSend+0x98>
				}
				else
				{
					taskEXIT_CRITICAL();
 8002e28:	f7fe fcaa 	bl	8001780 <vPortExitCritical>
					break;
 8002e2c:	e013      	b.n	8002e56 <xStreamBufferSend+0xc0>
				}
			}
			taskEXIT_CRITICAL();
 8002e2e:	f7fe fca7 	bl	8001780 <vPortExitCritical>

			traceBLOCKING_ON_STREAM_BUFFER_SEND( xStreamBuffer );
			( void ) xTaskNotifyWait( ( uint32_t ) 0, ( uint32_t ) 0, NULL, xTicksToWait );
 8002e32:	683b      	ldr	r3, [r7, #0]
 8002e34:	2200      	movs	r2, #0
 8002e36:	2100      	movs	r1, #0
 8002e38:	2000      	movs	r0, #0
 8002e3a:	f002 f893 	bl	8004f64 <xTaskNotifyWait>
			pxStreamBuffer->xTaskWaitingToSend = NULL;
 8002e3e:	69fb      	ldr	r3, [r7, #28]
 8002e40:	2200      	movs	r2, #0
 8002e42:	615a      	str	r2, [r3, #20]

		} while( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE );
 8002e44:	003a      	movs	r2, r7
 8002e46:	2310      	movs	r3, #16
 8002e48:	18fb      	adds	r3, r7, r3
 8002e4a:	0011      	movs	r1, r2
 8002e4c:	0018      	movs	r0, r3
 8002e4e:	f001 fcb9 	bl	80047c4 <xTaskCheckForTimeOut>
 8002e52:	1e03      	subs	r3, r0, #0
 8002e54:	d0cd      	beq.n	8002df2 <xStreamBufferSend+0x5c>
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	if( xSpace == ( size_t ) 0 )
 8002e56:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002e58:	2b00      	cmp	r3, #0
 8002e5a:	d105      	bne.n	8002e68 <xStreamBufferSend+0xd2>
	{
		xSpace = xStreamBufferSpacesAvailable( pxStreamBuffer );
 8002e5c:	69fb      	ldr	r3, [r7, #28]
 8002e5e:	0018      	movs	r0, r3
 8002e60:	f7ff ff5b 	bl	8002d1a <xStreamBufferSpacesAvailable>
 8002e64:	0003      	movs	r3, r0
 8002e66:	627b      	str	r3, [r7, #36]	; 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	xReturn = prvWriteMessageToBuffer( pxStreamBuffer, pvTxData, xDataLengthBytes, xSpace, xRequiredSpace );
 8002e68:	6a7c      	ldr	r4, [r7, #36]	; 0x24
 8002e6a:	687a      	ldr	r2, [r7, #4]
 8002e6c:	68b9      	ldr	r1, [r7, #8]
 8002e6e:	69f8      	ldr	r0, [r7, #28]
 8002e70:	6a3b      	ldr	r3, [r7, #32]
 8002e72:	9300      	str	r3, [sp, #0]
 8002e74:	0023      	movs	r3, r4
 8002e76:	f000 f87d 	bl	8002f74 <prvWriteMessageToBuffer>
 8002e7a:	0003      	movs	r3, r0
 8002e7c:	61bb      	str	r3, [r7, #24]

	if( xReturn > ( size_t ) 0 )
 8002e7e:	69bb      	ldr	r3, [r7, #24]
 8002e80:	2b00      	cmp	r3, #0
 8002e82:	d01a      	beq.n	8002eba <xStreamBufferSend+0x124>
	{
		traceSTREAM_BUFFER_SEND( xStreamBuffer, xReturn );

		/* Was a task waiting for the data? */
		if( prvBytesInBuffer( pxStreamBuffer ) >= pxStreamBuffer->xTriggerLevelBytes )
 8002e84:	69fb      	ldr	r3, [r7, #28]
 8002e86:	0018      	movs	r0, r3
 8002e88:	f000 fb4c 	bl	8003524 <prvBytesInBuffer>
 8002e8c:	0002      	movs	r2, r0
 8002e8e:	69fb      	ldr	r3, [r7, #28]
 8002e90:	68db      	ldr	r3, [r3, #12]
 8002e92:	429a      	cmp	r2, r3
 8002e94:	d311      	bcc.n	8002eba <xStreamBufferSend+0x124>
		{
			sbSEND_COMPLETED( pxStreamBuffer );
 8002e96:	f001 f887 	bl	8003fa8 <vTaskSuspendAll>
 8002e9a:	69fb      	ldr	r3, [r7, #28]
 8002e9c:	691b      	ldr	r3, [r3, #16]
 8002e9e:	2b00      	cmp	r3, #0
 8002ea0:	d009      	beq.n	8002eb6 <xStreamBufferSend+0x120>
 8002ea2:	69fb      	ldr	r3, [r7, #28]
 8002ea4:	6918      	ldr	r0, [r3, #16]
 8002ea6:	2300      	movs	r3, #0
 8002ea8:	2200      	movs	r2, #0
 8002eaa:	2100      	movs	r1, #0
 8002eac:	f002 f8ae 	bl	800500c <xTaskGenericNotify>
 8002eb0:	69fb      	ldr	r3, [r7, #28]
 8002eb2:	2200      	movs	r2, #0
 8002eb4:	611a      	str	r2, [r3, #16]
 8002eb6:	f001 f883 	bl	8003fc0 <xTaskResumeAll>
	{
		mtCOVERAGE_TEST_MARKER();
		traceSTREAM_BUFFER_SEND_FAILED( xStreamBuffer );
	}

	return xReturn;
 8002eba:	69bb      	ldr	r3, [r7, #24]
}
 8002ebc:	0018      	movs	r0, r3
 8002ebe:	46bd      	mov	sp, r7
 8002ec0:	b00b      	add	sp, #44	; 0x2c
 8002ec2:	bd90      	pop	{r4, r7, pc}

08002ec4 <xStreamBufferSendFromISR>:

size_t xStreamBufferSendFromISR( StreamBufferHandle_t xStreamBuffer,
								 const void *pvTxData,
								 size_t xDataLengthBytes,
								 BaseType_t * const pxHigherPriorityTaskWoken )
{
 8002ec4:	b590      	push	{r4, r7, lr}
 8002ec6:	b08d      	sub	sp, #52	; 0x34
 8002ec8:	af02      	add	r7, sp, #8
 8002eca:	60f8      	str	r0, [r7, #12]
 8002ecc:	60b9      	str	r1, [r7, #8]
 8002ece:	607a      	str	r2, [r7, #4]
 8002ed0:	603b      	str	r3, [r7, #0]
StreamBuffer_t * const pxStreamBuffer = xStreamBuffer;
 8002ed2:	68fb      	ldr	r3, [r7, #12]
 8002ed4:	623b      	str	r3, [r7, #32]
size_t xReturn, xSpace;
size_t xRequiredSpace = xDataLengthBytes;
 8002ed6:	687b      	ldr	r3, [r7, #4]
 8002ed8:	627b      	str	r3, [r7, #36]	; 0x24

	configASSERT( pvTxData );
 8002eda:	68bb      	ldr	r3, [r7, #8]
 8002edc:	2b00      	cmp	r3, #0
 8002ede:	d101      	bne.n	8002ee4 <xStreamBufferSendFromISR+0x20>
 8002ee0:	b672      	cpsid	i
 8002ee2:	e7fe      	b.n	8002ee2 <xStreamBufferSendFromISR+0x1e>
	configASSERT( pxStreamBuffer );
 8002ee4:	6a3b      	ldr	r3, [r7, #32]
 8002ee6:	2b00      	cmp	r3, #0
 8002ee8:	d101      	bne.n	8002eee <xStreamBufferSendFromISR+0x2a>
 8002eea:	b672      	cpsid	i
 8002eec:	e7fe      	b.n	8002eec <xStreamBufferSendFromISR+0x28>

	/* This send function is used to write to both message buffers and stream
	buffers.  If this is a message buffer then the space needed must be
	increased by the amount of bytes needed to store the length of the
	message. */
	if( ( pxStreamBuffer->ucFlags & sbFLAGS_IS_MESSAGE_BUFFER ) != ( uint8_t ) 0 )
 8002eee:	6a3b      	ldr	r3, [r7, #32]
 8002ef0:	7f1b      	ldrb	r3, [r3, #28]
 8002ef2:	001a      	movs	r2, r3
 8002ef4:	2301      	movs	r3, #1
 8002ef6:	4013      	ands	r3, r2
 8002ef8:	d002      	beq.n	8002f00 <xStreamBufferSendFromISR+0x3c>
	{
		xRequiredSpace += sbBYTES_TO_STORE_MESSAGE_LENGTH;
 8002efa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002efc:	3304      	adds	r3, #4
 8002efe:	627b      	str	r3, [r7, #36]	; 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	xSpace = xStreamBufferSpacesAvailable( pxStreamBuffer );
 8002f00:	6a3b      	ldr	r3, [r7, #32]
 8002f02:	0018      	movs	r0, r3
 8002f04:	f7ff ff09 	bl	8002d1a <xStreamBufferSpacesAvailable>
 8002f08:	0003      	movs	r3, r0
 8002f0a:	61fb      	str	r3, [r7, #28]
	xReturn = prvWriteMessageToBuffer( pxStreamBuffer, pvTxData, xDataLengthBytes, xSpace, xRequiredSpace );
 8002f0c:	69fc      	ldr	r4, [r7, #28]
 8002f0e:	687a      	ldr	r2, [r7, #4]
 8002f10:	68b9      	ldr	r1, [r7, #8]
 8002f12:	6a38      	ldr	r0, [r7, #32]
 8002f14:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002f16:	9300      	str	r3, [sp, #0]
 8002f18:	0023      	movs	r3, r4
 8002f1a:	f000 f82b 	bl	8002f74 <prvWriteMessageToBuffer>
 8002f1e:	0003      	movs	r3, r0
 8002f20:	61bb      	str	r3, [r7, #24]

	if( xReturn > ( size_t ) 0 )
 8002f22:	69bb      	ldr	r3, [r7, #24]
 8002f24:	2b00      	cmp	r3, #0
 8002f26:	d020      	beq.n	8002f6a <xStreamBufferSendFromISR+0xa6>
	{
		/* Was a task waiting for the data? */
		if( prvBytesInBuffer( pxStreamBuffer ) >= pxStreamBuffer->xTriggerLevelBytes )
 8002f28:	6a3b      	ldr	r3, [r7, #32]
 8002f2a:	0018      	movs	r0, r3
 8002f2c:	f000 fafa 	bl	8003524 <prvBytesInBuffer>
 8002f30:	0002      	movs	r2, r0
 8002f32:	6a3b      	ldr	r3, [r7, #32]
 8002f34:	68db      	ldr	r3, [r3, #12]
 8002f36:	429a      	cmp	r2, r3
 8002f38:	d317      	bcc.n	8002f6a <xStreamBufferSendFromISR+0xa6>
		{
			sbSEND_COMPLETE_FROM_ISR( pxStreamBuffer, pxHigherPriorityTaskWoken );
 8002f3a:	f7fe fc39 	bl	80017b0 <ulSetInterruptMaskFromISR>
 8002f3e:	0003      	movs	r3, r0
 8002f40:	617b      	str	r3, [r7, #20]
 8002f42:	6a3b      	ldr	r3, [r7, #32]
 8002f44:	691b      	ldr	r3, [r3, #16]
 8002f46:	2b00      	cmp	r3, #0
 8002f48:	d00b      	beq.n	8002f62 <xStreamBufferSendFromISR+0x9e>
 8002f4a:	6a3b      	ldr	r3, [r7, #32]
 8002f4c:	6918      	ldr	r0, [r3, #16]
 8002f4e:	683b      	ldr	r3, [r7, #0]
 8002f50:	9300      	str	r3, [sp, #0]
 8002f52:	2300      	movs	r3, #0
 8002f54:	2200      	movs	r2, #0
 8002f56:	2100      	movs	r1, #0
 8002f58:	f002 f8ec 	bl	8005134 <xTaskGenericNotifyFromISR>
 8002f5c:	6a3b      	ldr	r3, [r7, #32]
 8002f5e:	2200      	movs	r2, #0
 8002f60:	611a      	str	r2, [r3, #16]
 8002f62:	697b      	ldr	r3, [r7, #20]
 8002f64:	0018      	movs	r0, r3
 8002f66:	f7fe fc29 	bl	80017bc <vClearInterruptMaskFromISR>
		mtCOVERAGE_TEST_MARKER();
	}

	traceSTREAM_BUFFER_SEND_FROM_ISR( xStreamBuffer, xReturn );

	return xReturn;
 8002f6a:	69bb      	ldr	r3, [r7, #24]
}
 8002f6c:	0018      	movs	r0, r3
 8002f6e:	46bd      	mov	sp, r7
 8002f70:	b00b      	add	sp, #44	; 0x2c
 8002f72:	bd90      	pop	{r4, r7, pc}

08002f74 <prvWriteMessageToBuffer>:
static size_t prvWriteMessageToBuffer( StreamBuffer_t * const pxStreamBuffer,
									   const void * pvTxData,
									   size_t xDataLengthBytes,
									   size_t xSpace,
									   size_t xRequiredSpace )
{
 8002f74:	b580      	push	{r7, lr}
 8002f76:	b086      	sub	sp, #24
 8002f78:	af00      	add	r7, sp, #0
 8002f7a:	60f8      	str	r0, [r7, #12]
 8002f7c:	60b9      	str	r1, [r7, #8]
 8002f7e:	607a      	str	r2, [r7, #4]
 8002f80:	603b      	str	r3, [r7, #0]
	BaseType_t xShouldWrite;
	size_t xReturn;

	if( xSpace == ( size_t ) 0 )
 8002f82:	683b      	ldr	r3, [r7, #0]
 8002f84:	2b00      	cmp	r3, #0
 8002f86:	d102      	bne.n	8002f8e <prvWriteMessageToBuffer+0x1a>
	{
		/* Doesn't matter if this is a stream buffer or a message buffer, there
		is no space to write. */
		xShouldWrite = pdFALSE;
 8002f88:	2300      	movs	r3, #0
 8002f8a:	617b      	str	r3, [r7, #20]
 8002f8c:	e01d      	b.n	8002fca <prvWriteMessageToBuffer+0x56>
	}
	else if( ( pxStreamBuffer->ucFlags & sbFLAGS_IS_MESSAGE_BUFFER ) == ( uint8_t ) 0 )
 8002f8e:	68fb      	ldr	r3, [r7, #12]
 8002f90:	7f1b      	ldrb	r3, [r3, #28]
 8002f92:	001a      	movs	r2, r3
 8002f94:	2301      	movs	r3, #1
 8002f96:	4013      	ands	r3, r2
 8002f98:	d108      	bne.n	8002fac <prvWriteMessageToBuffer+0x38>
	{
		/* This is a stream buffer, as opposed to a message buffer, so writing a
		stream of bytes rather than discrete messages.  Write as many bytes as
		possible. */
		xShouldWrite = pdTRUE;
 8002f9a:	2301      	movs	r3, #1
 8002f9c:	617b      	str	r3, [r7, #20]
		xDataLengthBytes = configMIN( xDataLengthBytes, xSpace );
 8002f9e:	687a      	ldr	r2, [r7, #4]
 8002fa0:	683b      	ldr	r3, [r7, #0]
 8002fa2:	4293      	cmp	r3, r2
 8002fa4:	d900      	bls.n	8002fa8 <prvWriteMessageToBuffer+0x34>
 8002fa6:	0013      	movs	r3, r2
 8002fa8:	607b      	str	r3, [r7, #4]
 8002faa:	e00e      	b.n	8002fca <prvWriteMessageToBuffer+0x56>
	}
	else if( xSpace >= xRequiredSpace )
 8002fac:	683a      	ldr	r2, [r7, #0]
 8002fae:	6a3b      	ldr	r3, [r7, #32]
 8002fb0:	429a      	cmp	r2, r3
 8002fb2:	d308      	bcc.n	8002fc6 <prvWriteMessageToBuffer+0x52>
	{
		/* This is a message buffer, as opposed to a stream buffer, and there
		is enough space to write both the message length and the message itself
		into the buffer.  Start by writing the length of the data, the data
		itself will be written later in this function. */
		xShouldWrite = pdTRUE;
 8002fb4:	2301      	movs	r3, #1
 8002fb6:	617b      	str	r3, [r7, #20]
		( void ) prvWriteBytesToBuffer( pxStreamBuffer, ( const uint8_t * ) &( xDataLengthBytes ), sbBYTES_TO_STORE_MESSAGE_LENGTH );
 8002fb8:	1d39      	adds	r1, r7, #4
 8002fba:	68fb      	ldr	r3, [r7, #12]
 8002fbc:	2204      	movs	r2, #4
 8002fbe:	0018      	movs	r0, r3
 8002fc0:	f000 f9fa 	bl	80033b8 <prvWriteBytesToBuffer>
 8002fc4:	e001      	b.n	8002fca <prvWriteMessageToBuffer+0x56>
	}
	else
	{
		/* There is space available, but not enough space. */
		xShouldWrite = pdFALSE;
 8002fc6:	2300      	movs	r3, #0
 8002fc8:	617b      	str	r3, [r7, #20]
	}

	if( xShouldWrite != pdFALSE )
 8002fca:	697b      	ldr	r3, [r7, #20]
 8002fcc:	2b00      	cmp	r3, #0
 8002fce:	d008      	beq.n	8002fe2 <prvWriteMessageToBuffer+0x6e>
	{
		/* Writes the data itself. */
		xReturn = prvWriteBytesToBuffer( pxStreamBuffer, ( const uint8_t * ) pvTxData, xDataLengthBytes ); /*lint !e9079 Storage buffer is implemented as uint8_t for ease of sizing, alighment and access. */
 8002fd0:	687a      	ldr	r2, [r7, #4]
 8002fd2:	68b9      	ldr	r1, [r7, #8]
 8002fd4:	68fb      	ldr	r3, [r7, #12]
 8002fd6:	0018      	movs	r0, r3
 8002fd8:	f000 f9ee 	bl	80033b8 <prvWriteBytesToBuffer>
 8002fdc:	0003      	movs	r3, r0
 8002fde:	613b      	str	r3, [r7, #16]
 8002fe0:	e001      	b.n	8002fe6 <prvWriteMessageToBuffer+0x72>
	}
	else
	{
		xReturn = 0;
 8002fe2:	2300      	movs	r3, #0
 8002fe4:	613b      	str	r3, [r7, #16]
	}

	return xReturn;
 8002fe6:	693b      	ldr	r3, [r7, #16]
}
 8002fe8:	0018      	movs	r0, r3
 8002fea:	46bd      	mov	sp, r7
 8002fec:	b006      	add	sp, #24
 8002fee:	bd80      	pop	{r7, pc}

08002ff0 <xStreamBufferReceive>:

size_t xStreamBufferReceive( StreamBufferHandle_t xStreamBuffer,
							 void *pvRxData,
							 size_t xBufferLengthBytes,
							 TickType_t xTicksToWait )
{
 8002ff0:	b590      	push	{r4, r7, lr}
 8002ff2:	b08b      	sub	sp, #44	; 0x2c
 8002ff4:	af02      	add	r7, sp, #8
 8002ff6:	60f8      	str	r0, [r7, #12]
 8002ff8:	60b9      	str	r1, [r7, #8]
 8002ffa:	607a      	str	r2, [r7, #4]
 8002ffc:	603b      	str	r3, [r7, #0]
StreamBuffer_t * const pxStreamBuffer = xStreamBuffer;
 8002ffe:	68fb      	ldr	r3, [r7, #12]
 8003000:	613b      	str	r3, [r7, #16]
size_t xReceivedLength = 0, xBytesAvailable, xBytesToStoreMessageLength;
 8003002:	2300      	movs	r3, #0
 8003004:	61fb      	str	r3, [r7, #28]

	configASSERT( pvRxData );
 8003006:	68bb      	ldr	r3, [r7, #8]
 8003008:	2b00      	cmp	r3, #0
 800300a:	d101      	bne.n	8003010 <xStreamBufferReceive+0x20>
 800300c:	b672      	cpsid	i
 800300e:	e7fe      	b.n	800300e <xStreamBufferReceive+0x1e>
	configASSERT( pxStreamBuffer );
 8003010:	693b      	ldr	r3, [r7, #16]
 8003012:	2b00      	cmp	r3, #0
 8003014:	d101      	bne.n	800301a <xStreamBufferReceive+0x2a>
 8003016:	b672      	cpsid	i
 8003018:	e7fe      	b.n	8003018 <xStreamBufferReceive+0x28>
	/* This receive function is used by both message buffers, which store
	discrete messages, and stream buffers, which store a continuous stream of
	bytes.  Discrete messages include an additional
	sbBYTES_TO_STORE_MESSAGE_LENGTH bytes that hold the length of the
	message. */
	if( ( pxStreamBuffer->ucFlags & sbFLAGS_IS_MESSAGE_BUFFER ) != ( uint8_t ) 0 )
 800301a:	693b      	ldr	r3, [r7, #16]
 800301c:	7f1b      	ldrb	r3, [r3, #28]
 800301e:	001a      	movs	r2, r3
 8003020:	2301      	movs	r3, #1
 8003022:	4013      	ands	r3, r2
 8003024:	d002      	beq.n	800302c <xStreamBufferReceive+0x3c>
	{
		xBytesToStoreMessageLength = sbBYTES_TO_STORE_MESSAGE_LENGTH;
 8003026:	2304      	movs	r3, #4
 8003028:	617b      	str	r3, [r7, #20]
 800302a:	e001      	b.n	8003030 <xStreamBufferReceive+0x40>
	}
	else
	{
		xBytesToStoreMessageLength = 0;
 800302c:	2300      	movs	r3, #0
 800302e:	617b      	str	r3, [r7, #20]
	}

	if( xTicksToWait != ( TickType_t ) 0 )
 8003030:	683b      	ldr	r3, [r7, #0]
 8003032:	2b00      	cmp	r3, #0
 8003034:	d02f      	beq.n	8003096 <xStreamBufferReceive+0xa6>
	{
		/* Checking if there is data and clearing the notification state must be
		performed atomically. */
		taskENTER_CRITICAL();
 8003036:	f7fe fb91 	bl	800175c <vPortEnterCritical>
		{
			xBytesAvailable = prvBytesInBuffer( pxStreamBuffer );
 800303a:	693b      	ldr	r3, [r7, #16]
 800303c:	0018      	movs	r0, r3
 800303e:	f000 fa71 	bl	8003524 <prvBytesInBuffer>
 8003042:	0003      	movs	r3, r0
 8003044:	61bb      	str	r3, [r7, #24]
			/* If this function was invoked by a message buffer read then
			xBytesToStoreMessageLength holds the number of bytes used to hold
			the length of the next discrete message.  If this function was
			invoked by a stream buffer read then xBytesToStoreMessageLength will
			be 0. */
			if( xBytesAvailable <= xBytesToStoreMessageLength )
 8003046:	69ba      	ldr	r2, [r7, #24]
 8003048:	697b      	ldr	r3, [r7, #20]
 800304a:	429a      	cmp	r2, r3
 800304c:	d80d      	bhi.n	800306a <xStreamBufferReceive+0x7a>
			{
				/* Clear notification state as going to wait for data. */
				( void ) xTaskNotifyStateClear( NULL );
 800304e:	2000      	movs	r0, #0
 8003050:	f002 f99a 	bl	8005388 <xTaskNotifyStateClear>

				/* Should only be one reader. */
				configASSERT( pxStreamBuffer->xTaskWaitingToReceive == NULL );
 8003054:	693b      	ldr	r3, [r7, #16]
 8003056:	691b      	ldr	r3, [r3, #16]
 8003058:	2b00      	cmp	r3, #0
 800305a:	d001      	beq.n	8003060 <xStreamBufferReceive+0x70>
 800305c:	b672      	cpsid	i
 800305e:	e7fe      	b.n	800305e <xStreamBufferReceive+0x6e>
				pxStreamBuffer->xTaskWaitingToReceive = xTaskGetCurrentTaskHandle();
 8003060:	f001 fdb8 	bl	8004bd4 <xTaskGetCurrentTaskHandle>
 8003064:	0002      	movs	r2, r0
 8003066:	693b      	ldr	r3, [r7, #16]
 8003068:	611a      	str	r2, [r3, #16]
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
		taskEXIT_CRITICAL();
 800306a:	f7fe fb89 	bl	8001780 <vPortExitCritical>

		if( xBytesAvailable <= xBytesToStoreMessageLength )
 800306e:	69ba      	ldr	r2, [r7, #24]
 8003070:	697b      	ldr	r3, [r7, #20]
 8003072:	429a      	cmp	r2, r3
 8003074:	d815      	bhi.n	80030a2 <xStreamBufferReceive+0xb2>
		{
			/* Wait for data to be available. */
			traceBLOCKING_ON_STREAM_BUFFER_RECEIVE( xStreamBuffer );
			( void ) xTaskNotifyWait( ( uint32_t ) 0, ( uint32_t ) 0, NULL, xTicksToWait );
 8003076:	683b      	ldr	r3, [r7, #0]
 8003078:	2200      	movs	r2, #0
 800307a:	2100      	movs	r1, #0
 800307c:	2000      	movs	r0, #0
 800307e:	f001 ff71 	bl	8004f64 <xTaskNotifyWait>
			pxStreamBuffer->xTaskWaitingToReceive = NULL;
 8003082:	693b      	ldr	r3, [r7, #16]
 8003084:	2200      	movs	r2, #0
 8003086:	611a      	str	r2, [r3, #16]

			/* Recheck the data available after blocking. */
			xBytesAvailable = prvBytesInBuffer( pxStreamBuffer );
 8003088:	693b      	ldr	r3, [r7, #16]
 800308a:	0018      	movs	r0, r3
 800308c:	f000 fa4a 	bl	8003524 <prvBytesInBuffer>
 8003090:	0003      	movs	r3, r0
 8003092:	61bb      	str	r3, [r7, #24]
 8003094:	e005      	b.n	80030a2 <xStreamBufferReceive+0xb2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		xBytesAvailable = prvBytesInBuffer( pxStreamBuffer );
 8003096:	693b      	ldr	r3, [r7, #16]
 8003098:	0018      	movs	r0, r3
 800309a:	f000 fa43 	bl	8003524 <prvBytesInBuffer>
 800309e:	0003      	movs	r3, r0
 80030a0:	61bb      	str	r3, [r7, #24]
	/* Whether receiving a discrete message (where xBytesToStoreMessageLength
	holds the number of bytes used to store the message length) or a stream of
	bytes (where xBytesToStoreMessageLength is zero), the number of bytes
	available must be greater than xBytesToStoreMessageLength to be able to
	read bytes from the buffer. */
	if( xBytesAvailable > xBytesToStoreMessageLength )
 80030a2:	69ba      	ldr	r2, [r7, #24]
 80030a4:	697b      	ldr	r3, [r7, #20]
 80030a6:	429a      	cmp	r2, r3
 80030a8:	d91f      	bls.n	80030ea <xStreamBufferReceive+0xfa>
	{
		xReceivedLength = prvReadMessageFromBuffer( pxStreamBuffer, pvRxData, xBufferLengthBytes, xBytesAvailable, xBytesToStoreMessageLength );
 80030aa:	69bc      	ldr	r4, [r7, #24]
 80030ac:	687a      	ldr	r2, [r7, #4]
 80030ae:	68b9      	ldr	r1, [r7, #8]
 80030b0:	6938      	ldr	r0, [r7, #16]
 80030b2:	697b      	ldr	r3, [r7, #20]
 80030b4:	9300      	str	r3, [sp, #0]
 80030b6:	0023      	movs	r3, r4
 80030b8:	f000 f8aa 	bl	8003210 <prvReadMessageFromBuffer>
 80030bc:	0003      	movs	r3, r0
 80030be:	61fb      	str	r3, [r7, #28]

		/* Was a task waiting for space in the buffer? */
		if( xReceivedLength != ( size_t ) 0 )
 80030c0:	69fb      	ldr	r3, [r7, #28]
 80030c2:	2b00      	cmp	r3, #0
 80030c4:	d011      	beq.n	80030ea <xStreamBufferReceive+0xfa>
		{
			traceSTREAM_BUFFER_RECEIVE( xStreamBuffer, xReceivedLength );
			sbRECEIVE_COMPLETED( pxStreamBuffer );
 80030c6:	f000 ff6f 	bl	8003fa8 <vTaskSuspendAll>
 80030ca:	693b      	ldr	r3, [r7, #16]
 80030cc:	695b      	ldr	r3, [r3, #20]
 80030ce:	2b00      	cmp	r3, #0
 80030d0:	d009      	beq.n	80030e6 <xStreamBufferReceive+0xf6>
 80030d2:	693b      	ldr	r3, [r7, #16]
 80030d4:	6958      	ldr	r0, [r3, #20]
 80030d6:	2300      	movs	r3, #0
 80030d8:	2200      	movs	r2, #0
 80030da:	2100      	movs	r1, #0
 80030dc:	f001 ff96 	bl	800500c <xTaskGenericNotify>
 80030e0:	693b      	ldr	r3, [r7, #16]
 80030e2:	2200      	movs	r2, #0
 80030e4:	615a      	str	r2, [r3, #20]
 80030e6:	f000 ff6b 	bl	8003fc0 <xTaskResumeAll>
	{
		traceSTREAM_BUFFER_RECEIVE_FAILED( xStreamBuffer );
		mtCOVERAGE_TEST_MARKER();
	}

	return xReceivedLength;
 80030ea:	69fb      	ldr	r3, [r7, #28]
}
 80030ec:	0018      	movs	r0, r3
 80030ee:	46bd      	mov	sp, r7
 80030f0:	b009      	add	sp, #36	; 0x24
 80030f2:	bd90      	pop	{r4, r7, pc}

080030f4 <xStreamBufferNextMessageLengthBytes>:
/*-----------------------------------------------------------*/

size_t xStreamBufferNextMessageLengthBytes( StreamBufferHandle_t xStreamBuffer )
{
 80030f4:	b580      	push	{r7, lr}
 80030f6:	b088      	sub	sp, #32
 80030f8:	af00      	add	r7, sp, #0
 80030fa:	6078      	str	r0, [r7, #4]
StreamBuffer_t * const pxStreamBuffer = xStreamBuffer;
 80030fc:	687b      	ldr	r3, [r7, #4]
 80030fe:	61bb      	str	r3, [r7, #24]
size_t xReturn, xBytesAvailable, xOriginalTail;
configMESSAGE_BUFFER_LENGTH_TYPE xTempReturn;

	configASSERT( pxStreamBuffer );
 8003100:	69bb      	ldr	r3, [r7, #24]
 8003102:	2b00      	cmp	r3, #0
 8003104:	d101      	bne.n	800310a <xStreamBufferNextMessageLengthBytes+0x16>
 8003106:	b672      	cpsid	i
 8003108:	e7fe      	b.n	8003108 <xStreamBufferNextMessageLengthBytes+0x14>

	/* Ensure the stream buffer is being used as a message buffer. */
	if( ( pxStreamBuffer->ucFlags & sbFLAGS_IS_MESSAGE_BUFFER ) != ( uint8_t ) 0 )
 800310a:	69bb      	ldr	r3, [r7, #24]
 800310c:	7f1b      	ldrb	r3, [r3, #28]
 800310e:	001a      	movs	r2, r3
 8003110:	2301      	movs	r3, #1
 8003112:	4013      	ands	r3, r2
 8003114:	d020      	beq.n	8003158 <xStreamBufferNextMessageLengthBytes+0x64>
	{
		xBytesAvailable = prvBytesInBuffer( pxStreamBuffer );
 8003116:	69bb      	ldr	r3, [r7, #24]
 8003118:	0018      	movs	r0, r3
 800311a:	f000 fa03 	bl	8003524 <prvBytesInBuffer>
 800311e:	0003      	movs	r3, r0
 8003120:	617b      	str	r3, [r7, #20]
		if( xBytesAvailable > sbBYTES_TO_STORE_MESSAGE_LENGTH )
 8003122:	697b      	ldr	r3, [r7, #20]
 8003124:	2b04      	cmp	r3, #4
 8003126:	d90f      	bls.n	8003148 <xStreamBufferNextMessageLengthBytes+0x54>
			required to hold the length of the next message, so another message
			is available.  Return its length without removing the length bytes
			from the buffer.  A copy of the tail is stored so the buffer can be
			returned to its prior state as the message is not actually being
			removed from the buffer. */
			xOriginalTail = pxStreamBuffer->xTail;
 8003128:	69bb      	ldr	r3, [r7, #24]
 800312a:	681b      	ldr	r3, [r3, #0]
 800312c:	613b      	str	r3, [r7, #16]
			( void ) prvReadBytesFromBuffer( pxStreamBuffer, ( uint8_t * ) &xTempReturn, sbBYTES_TO_STORE_MESSAGE_LENGTH, xBytesAvailable );
 800312e:	697b      	ldr	r3, [r7, #20]
 8003130:	220c      	movs	r2, #12
 8003132:	18b9      	adds	r1, r7, r2
 8003134:	69b8      	ldr	r0, [r7, #24]
 8003136:	2204      	movs	r2, #4
 8003138:	f000 f995 	bl	8003466 <prvReadBytesFromBuffer>
			xReturn = ( size_t ) xTempReturn;
 800313c:	68fb      	ldr	r3, [r7, #12]
 800313e:	61fb      	str	r3, [r7, #28]
			pxStreamBuffer->xTail = xOriginalTail;
 8003140:	69bb      	ldr	r3, [r7, #24]
 8003142:	693a      	ldr	r2, [r7, #16]
 8003144:	601a      	str	r2, [r3, #0]
 8003146:	e009      	b.n	800315c <xStreamBufferNextMessageLengthBytes+0x68>
		{
			/* The minimum amount of bytes in a message buffer is
			( sbBYTES_TO_STORE_MESSAGE_LENGTH + 1 ), so if xBytesAvailable is
			less than sbBYTES_TO_STORE_MESSAGE_LENGTH the only other valid
			value is 0. */
			configASSERT( xBytesAvailable == 0 );
 8003148:	697b      	ldr	r3, [r7, #20]
 800314a:	2b00      	cmp	r3, #0
 800314c:	d001      	beq.n	8003152 <xStreamBufferNextMessageLengthBytes+0x5e>
 800314e:	b672      	cpsid	i
 8003150:	e7fe      	b.n	8003150 <xStreamBufferNextMessageLengthBytes+0x5c>
			xReturn = 0;
 8003152:	2300      	movs	r3, #0
 8003154:	61fb      	str	r3, [r7, #28]
 8003156:	e001      	b.n	800315c <xStreamBufferNextMessageLengthBytes+0x68>
		}
	}
	else
	{
		xReturn = 0;
 8003158:	2300      	movs	r3, #0
 800315a:	61fb      	str	r3, [r7, #28]
	}

	return xReturn;
 800315c:	69fb      	ldr	r3, [r7, #28]
}
 800315e:	0018      	movs	r0, r3
 8003160:	46bd      	mov	sp, r7
 8003162:	b008      	add	sp, #32
 8003164:	bd80      	pop	{r7, pc}

08003166 <xStreamBufferReceiveFromISR>:

size_t xStreamBufferReceiveFromISR( StreamBufferHandle_t xStreamBuffer,
									void *pvRxData,
									size_t xBufferLengthBytes,
									BaseType_t * const pxHigherPriorityTaskWoken )
{
 8003166:	b590      	push	{r4, r7, lr}
 8003168:	b08d      	sub	sp, #52	; 0x34
 800316a:	af02      	add	r7, sp, #8
 800316c:	60f8      	str	r0, [r7, #12]
 800316e:	60b9      	str	r1, [r7, #8]
 8003170:	607a      	str	r2, [r7, #4]
 8003172:	603b      	str	r3, [r7, #0]
StreamBuffer_t * const pxStreamBuffer = xStreamBuffer;
 8003174:	68fb      	ldr	r3, [r7, #12]
 8003176:	61fb      	str	r3, [r7, #28]
size_t xReceivedLength = 0, xBytesAvailable, xBytesToStoreMessageLength;
 8003178:	2300      	movs	r3, #0
 800317a:	627b      	str	r3, [r7, #36]	; 0x24

	configASSERT( pvRxData );
 800317c:	68bb      	ldr	r3, [r7, #8]
 800317e:	2b00      	cmp	r3, #0
 8003180:	d101      	bne.n	8003186 <xStreamBufferReceiveFromISR+0x20>
 8003182:	b672      	cpsid	i
 8003184:	e7fe      	b.n	8003184 <xStreamBufferReceiveFromISR+0x1e>
	configASSERT( pxStreamBuffer );
 8003186:	69fb      	ldr	r3, [r7, #28]
 8003188:	2b00      	cmp	r3, #0
 800318a:	d101      	bne.n	8003190 <xStreamBufferReceiveFromISR+0x2a>
 800318c:	b672      	cpsid	i
 800318e:	e7fe      	b.n	800318e <xStreamBufferReceiveFromISR+0x28>
	/* This receive function is used by both message buffers, which store
	discrete messages, and stream buffers, which store a continuous stream of
	bytes.  Discrete messages include an additional
	sbBYTES_TO_STORE_MESSAGE_LENGTH bytes that hold the length of the
	message. */
	if( ( pxStreamBuffer->ucFlags & sbFLAGS_IS_MESSAGE_BUFFER ) != ( uint8_t ) 0 )
 8003190:	69fb      	ldr	r3, [r7, #28]
 8003192:	7f1b      	ldrb	r3, [r3, #28]
 8003194:	001a      	movs	r2, r3
 8003196:	2301      	movs	r3, #1
 8003198:	4013      	ands	r3, r2
 800319a:	d002      	beq.n	80031a2 <xStreamBufferReceiveFromISR+0x3c>
	{
		xBytesToStoreMessageLength = sbBYTES_TO_STORE_MESSAGE_LENGTH;
 800319c:	2304      	movs	r3, #4
 800319e:	623b      	str	r3, [r7, #32]
 80031a0:	e001      	b.n	80031a6 <xStreamBufferReceiveFromISR+0x40>
	}
	else
	{
		xBytesToStoreMessageLength = 0;
 80031a2:	2300      	movs	r3, #0
 80031a4:	623b      	str	r3, [r7, #32]
	}

	xBytesAvailable = prvBytesInBuffer( pxStreamBuffer );
 80031a6:	69fb      	ldr	r3, [r7, #28]
 80031a8:	0018      	movs	r0, r3
 80031aa:	f000 f9bb 	bl	8003524 <prvBytesInBuffer>
 80031ae:	0003      	movs	r3, r0
 80031b0:	61bb      	str	r3, [r7, #24]
	/* Whether receiving a discrete message (where xBytesToStoreMessageLength
	holds the number of bytes used to store the message length) or a stream of
	bytes (where xBytesToStoreMessageLength is zero), the number of bytes
	available must be greater than xBytesToStoreMessageLength to be able to
	read bytes from the buffer. */
	if( xBytesAvailable > xBytesToStoreMessageLength )
 80031b2:	69ba      	ldr	r2, [r7, #24]
 80031b4:	6a3b      	ldr	r3, [r7, #32]
 80031b6:	429a      	cmp	r2, r3
 80031b8:	d925      	bls.n	8003206 <xStreamBufferReceiveFromISR+0xa0>
	{
		xReceivedLength = prvReadMessageFromBuffer( pxStreamBuffer, pvRxData, xBufferLengthBytes, xBytesAvailable, xBytesToStoreMessageLength );
 80031ba:	69bc      	ldr	r4, [r7, #24]
 80031bc:	687a      	ldr	r2, [r7, #4]
 80031be:	68b9      	ldr	r1, [r7, #8]
 80031c0:	69f8      	ldr	r0, [r7, #28]
 80031c2:	6a3b      	ldr	r3, [r7, #32]
 80031c4:	9300      	str	r3, [sp, #0]
 80031c6:	0023      	movs	r3, r4
 80031c8:	f000 f822 	bl	8003210 <prvReadMessageFromBuffer>
 80031cc:	0003      	movs	r3, r0
 80031ce:	627b      	str	r3, [r7, #36]	; 0x24

		/* Was a task waiting for space in the buffer? */
		if( xReceivedLength != ( size_t ) 0 )
 80031d0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80031d2:	2b00      	cmp	r3, #0
 80031d4:	d017      	beq.n	8003206 <xStreamBufferReceiveFromISR+0xa0>
		{
			sbRECEIVE_COMPLETED_FROM_ISR( pxStreamBuffer, pxHigherPriorityTaskWoken );
 80031d6:	f7fe faeb 	bl	80017b0 <ulSetInterruptMaskFromISR>
 80031da:	0003      	movs	r3, r0
 80031dc:	617b      	str	r3, [r7, #20]
 80031de:	69fb      	ldr	r3, [r7, #28]
 80031e0:	695b      	ldr	r3, [r3, #20]
 80031e2:	2b00      	cmp	r3, #0
 80031e4:	d00b      	beq.n	80031fe <xStreamBufferReceiveFromISR+0x98>
 80031e6:	69fb      	ldr	r3, [r7, #28]
 80031e8:	6958      	ldr	r0, [r3, #20]
 80031ea:	683b      	ldr	r3, [r7, #0]
 80031ec:	9300      	str	r3, [sp, #0]
 80031ee:	2300      	movs	r3, #0
 80031f0:	2200      	movs	r2, #0
 80031f2:	2100      	movs	r1, #0
 80031f4:	f001 ff9e 	bl	8005134 <xTaskGenericNotifyFromISR>
 80031f8:	69fb      	ldr	r3, [r7, #28]
 80031fa:	2200      	movs	r2, #0
 80031fc:	615a      	str	r2, [r3, #20]
 80031fe:	697b      	ldr	r3, [r7, #20]
 8003200:	0018      	movs	r0, r3
 8003202:	f7fe fadb 	bl	80017bc <vClearInterruptMaskFromISR>
		mtCOVERAGE_TEST_MARKER();
	}

	traceSTREAM_BUFFER_RECEIVE_FROM_ISR( xStreamBuffer, xReceivedLength );

	return xReceivedLength;
 8003206:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8003208:	0018      	movs	r0, r3
 800320a:	46bd      	mov	sp, r7
 800320c:	b00b      	add	sp, #44	; 0x2c
 800320e:	bd90      	pop	{r4, r7, pc}

08003210 <prvReadMessageFromBuffer>:
static size_t prvReadMessageFromBuffer( StreamBuffer_t *pxStreamBuffer,
										void *pvRxData,
										size_t xBufferLengthBytes,
										size_t xBytesAvailable,
										size_t xBytesToStoreMessageLength )
{
 8003210:	b580      	push	{r7, lr}
 8003212:	b088      	sub	sp, #32
 8003214:	af00      	add	r7, sp, #0
 8003216:	60f8      	str	r0, [r7, #12]
 8003218:	60b9      	str	r1, [r7, #8]
 800321a:	607a      	str	r2, [r7, #4]
 800321c:	603b      	str	r3, [r7, #0]
size_t xOriginalTail, xReceivedLength, xNextMessageLength;
configMESSAGE_BUFFER_LENGTH_TYPE xTempNextMessageLength;

	if( xBytesToStoreMessageLength != ( size_t ) 0 )
 800321e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003220:	2b00      	cmp	r3, #0
 8003222:	d019      	beq.n	8003258 <prvReadMessageFromBuffer+0x48>
	{
		/* A discrete message is being received.  First receive the length
		of the message.  A copy of the tail is stored so the buffer can be
		returned to its prior state if the length of the message is too
		large for the provided buffer. */
		xOriginalTail = pxStreamBuffer->xTail;
 8003224:	68fb      	ldr	r3, [r7, #12]
 8003226:	681b      	ldr	r3, [r3, #0]
 8003228:	61bb      	str	r3, [r7, #24]
		( void ) prvReadBytesFromBuffer( pxStreamBuffer, ( uint8_t * ) &xTempNextMessageLength, xBytesToStoreMessageLength, xBytesAvailable );
 800322a:	683b      	ldr	r3, [r7, #0]
 800322c:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800322e:	2110      	movs	r1, #16
 8003230:	1879      	adds	r1, r7, r1
 8003232:	68f8      	ldr	r0, [r7, #12]
 8003234:	f000 f917 	bl	8003466 <prvReadBytesFromBuffer>
		xNextMessageLength = ( size_t ) xTempNextMessageLength;
 8003238:	693b      	ldr	r3, [r7, #16]
 800323a:	61fb      	str	r3, [r7, #28]

		/* Reduce the number of bytes available by the number of bytes just
		read out. */
		xBytesAvailable -= xBytesToStoreMessageLength;
 800323c:	683a      	ldr	r2, [r7, #0]
 800323e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003240:	1ad3      	subs	r3, r2, r3
 8003242:	603b      	str	r3, [r7, #0]

		/* Check there is enough space in the buffer provided by the
		user. */
		if( xNextMessageLength > xBufferLengthBytes )
 8003244:	69fa      	ldr	r2, [r7, #28]
 8003246:	687b      	ldr	r3, [r7, #4]
 8003248:	429a      	cmp	r2, r3
 800324a:	d907      	bls.n	800325c <prvReadMessageFromBuffer+0x4c>
		{
			/* The user has provided insufficient space to read the message
			so return the buffer to its previous state (so the length of
			the message is in the buffer again). */
			pxStreamBuffer->xTail = xOriginalTail;
 800324c:	68fb      	ldr	r3, [r7, #12]
 800324e:	69ba      	ldr	r2, [r7, #24]
 8003250:	601a      	str	r2, [r3, #0]
			xNextMessageLength = 0;
 8003252:	2300      	movs	r3, #0
 8003254:	61fb      	str	r3, [r7, #28]
 8003256:	e001      	b.n	800325c <prvReadMessageFromBuffer+0x4c>
	}
	else
	{
		/* A stream of bytes is being received (as opposed to a discrete
		message), so read as many bytes as possible. */
		xNextMessageLength = xBufferLengthBytes;
 8003258:	687b      	ldr	r3, [r7, #4]
 800325a:	61fb      	str	r3, [r7, #28]
	}

	/* Read the actual data. */
	xReceivedLength = prvReadBytesFromBuffer( pxStreamBuffer, ( uint8_t * ) pvRxData, xNextMessageLength, xBytesAvailable ); /*lint !e9079 Data storage area is implemented as uint8_t array for ease of sizing, indexing and alignment. */
 800325c:	683b      	ldr	r3, [r7, #0]
 800325e:	69fa      	ldr	r2, [r7, #28]
 8003260:	68b9      	ldr	r1, [r7, #8]
 8003262:	68f8      	ldr	r0, [r7, #12]
 8003264:	f000 f8ff 	bl	8003466 <prvReadBytesFromBuffer>
 8003268:	0003      	movs	r3, r0
 800326a:	617b      	str	r3, [r7, #20]

	return xReceivedLength;
 800326c:	697b      	ldr	r3, [r7, #20]
}
 800326e:	0018      	movs	r0, r3
 8003270:	46bd      	mov	sp, r7
 8003272:	b008      	add	sp, #32
 8003274:	bd80      	pop	{r7, pc}

08003276 <xStreamBufferIsEmpty>:
/*-----------------------------------------------------------*/

BaseType_t xStreamBufferIsEmpty( StreamBufferHandle_t xStreamBuffer )
{
 8003276:	b580      	push	{r7, lr}
 8003278:	b086      	sub	sp, #24
 800327a:	af00      	add	r7, sp, #0
 800327c:	6078      	str	r0, [r7, #4]
const StreamBuffer_t * const pxStreamBuffer = xStreamBuffer;
 800327e:	687b      	ldr	r3, [r7, #4]
 8003280:	613b      	str	r3, [r7, #16]
BaseType_t xReturn;
size_t xTail;

	configASSERT( pxStreamBuffer );
 8003282:	693b      	ldr	r3, [r7, #16]
 8003284:	2b00      	cmp	r3, #0
 8003286:	d101      	bne.n	800328c <xStreamBufferIsEmpty+0x16>
 8003288:	b672      	cpsid	i
 800328a:	e7fe      	b.n	800328a <xStreamBufferIsEmpty+0x14>

	/* True if no bytes are available. */
	xTail = pxStreamBuffer->xTail;
 800328c:	693b      	ldr	r3, [r7, #16]
 800328e:	681b      	ldr	r3, [r3, #0]
 8003290:	60fb      	str	r3, [r7, #12]
	if( pxStreamBuffer->xHead == xTail )
 8003292:	693b      	ldr	r3, [r7, #16]
 8003294:	685a      	ldr	r2, [r3, #4]
 8003296:	68fb      	ldr	r3, [r7, #12]
 8003298:	429a      	cmp	r2, r3
 800329a:	d102      	bne.n	80032a2 <xStreamBufferIsEmpty+0x2c>
	{
		xReturn = pdTRUE;
 800329c:	2301      	movs	r3, #1
 800329e:	617b      	str	r3, [r7, #20]
 80032a0:	e001      	b.n	80032a6 <xStreamBufferIsEmpty+0x30>
	}
	else
	{
		xReturn = pdFALSE;
 80032a2:	2300      	movs	r3, #0
 80032a4:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 80032a6:	697b      	ldr	r3, [r7, #20]
}
 80032a8:	0018      	movs	r0, r3
 80032aa:	46bd      	mov	sp, r7
 80032ac:	b006      	add	sp, #24
 80032ae:	bd80      	pop	{r7, pc}

080032b0 <xStreamBufferIsFull>:
/*-----------------------------------------------------------*/

BaseType_t xStreamBufferIsFull( StreamBufferHandle_t xStreamBuffer )
{
 80032b0:	b580      	push	{r7, lr}
 80032b2:	b086      	sub	sp, #24
 80032b4:	af00      	add	r7, sp, #0
 80032b6:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;
size_t xBytesToStoreMessageLength;
const StreamBuffer_t * const pxStreamBuffer = xStreamBuffer;
 80032b8:	687b      	ldr	r3, [r7, #4]
 80032ba:	60fb      	str	r3, [r7, #12]

	configASSERT( pxStreamBuffer );
 80032bc:	68fb      	ldr	r3, [r7, #12]
 80032be:	2b00      	cmp	r3, #0
 80032c0:	d101      	bne.n	80032c6 <xStreamBufferIsFull+0x16>
 80032c2:	b672      	cpsid	i
 80032c4:	e7fe      	b.n	80032c4 <xStreamBufferIsFull+0x14>

	/* This generic version of the receive function is used by both message
	buffers, which store discrete messages, and stream buffers, which store a
	continuous stream of bytes.  Discrete messages include an additional
	sbBYTES_TO_STORE_MESSAGE_LENGTH bytes that hold the length of the message. */
	if( ( pxStreamBuffer->ucFlags & sbFLAGS_IS_MESSAGE_BUFFER ) != ( uint8_t ) 0 )
 80032c6:	68fb      	ldr	r3, [r7, #12]
 80032c8:	7f1b      	ldrb	r3, [r3, #28]
 80032ca:	001a      	movs	r2, r3
 80032cc:	2301      	movs	r3, #1
 80032ce:	4013      	ands	r3, r2
 80032d0:	d002      	beq.n	80032d8 <xStreamBufferIsFull+0x28>
	{
		xBytesToStoreMessageLength = sbBYTES_TO_STORE_MESSAGE_LENGTH;
 80032d2:	2304      	movs	r3, #4
 80032d4:	613b      	str	r3, [r7, #16]
 80032d6:	e001      	b.n	80032dc <xStreamBufferIsFull+0x2c>
	}
	else
	{
		xBytesToStoreMessageLength = 0;
 80032d8:	2300      	movs	r3, #0
 80032da:	613b      	str	r3, [r7, #16]
	}

	/* True if the available space equals zero. */
	if( xStreamBufferSpacesAvailable( xStreamBuffer ) <= xBytesToStoreMessageLength )
 80032dc:	687b      	ldr	r3, [r7, #4]
 80032de:	0018      	movs	r0, r3
 80032e0:	f7ff fd1b 	bl	8002d1a <xStreamBufferSpacesAvailable>
 80032e4:	0002      	movs	r2, r0
 80032e6:	693b      	ldr	r3, [r7, #16]
 80032e8:	429a      	cmp	r2, r3
 80032ea:	d802      	bhi.n	80032f2 <xStreamBufferIsFull+0x42>
	{
		xReturn = pdTRUE;
 80032ec:	2301      	movs	r3, #1
 80032ee:	617b      	str	r3, [r7, #20]
 80032f0:	e001      	b.n	80032f6 <xStreamBufferIsFull+0x46>
	}
	else
	{
		xReturn = pdFALSE;
 80032f2:	2300      	movs	r3, #0
 80032f4:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 80032f6:	697b      	ldr	r3, [r7, #20]
}
 80032f8:	0018      	movs	r0, r3
 80032fa:	46bd      	mov	sp, r7
 80032fc:	b006      	add	sp, #24
 80032fe:	bd80      	pop	{r7, pc}

08003300 <xStreamBufferSendCompletedFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xStreamBufferSendCompletedFromISR( StreamBufferHandle_t xStreamBuffer, BaseType_t *pxHigherPriorityTaskWoken )
{
 8003300:	b580      	push	{r7, lr}
 8003302:	b088      	sub	sp, #32
 8003304:	af02      	add	r7, sp, #8
 8003306:	6078      	str	r0, [r7, #4]
 8003308:	6039      	str	r1, [r7, #0]
StreamBuffer_t * const pxStreamBuffer = xStreamBuffer;
 800330a:	687b      	ldr	r3, [r7, #4]
 800330c:	613b      	str	r3, [r7, #16]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;

	configASSERT( pxStreamBuffer );
 800330e:	693b      	ldr	r3, [r7, #16]
 8003310:	2b00      	cmp	r3, #0
 8003312:	d101      	bne.n	8003318 <xStreamBufferSendCompletedFromISR+0x18>
 8003314:	b672      	cpsid	i
 8003316:	e7fe      	b.n	8003316 <xStreamBufferSendCompletedFromISR+0x16>

	uxSavedInterruptStatus = ( UBaseType_t ) portSET_INTERRUPT_MASK_FROM_ISR();
 8003318:	f7fe fa4a 	bl	80017b0 <ulSetInterruptMaskFromISR>
 800331c:	0003      	movs	r3, r0
 800331e:	60fb      	str	r3, [r7, #12]
	{
		if( ( pxStreamBuffer )->xTaskWaitingToReceive != NULL )
 8003320:	693b      	ldr	r3, [r7, #16]
 8003322:	691b      	ldr	r3, [r3, #16]
 8003324:	2b00      	cmp	r3, #0
 8003326:	d00e      	beq.n	8003346 <xStreamBufferSendCompletedFromISR+0x46>
		{
			( void ) xTaskNotifyFromISR( ( pxStreamBuffer )->xTaskWaitingToReceive,
 8003328:	693b      	ldr	r3, [r7, #16]
 800332a:	6918      	ldr	r0, [r3, #16]
 800332c:	683b      	ldr	r3, [r7, #0]
 800332e:	9300      	str	r3, [sp, #0]
 8003330:	2300      	movs	r3, #0
 8003332:	2200      	movs	r2, #0
 8003334:	2100      	movs	r1, #0
 8003336:	f001 fefd 	bl	8005134 <xTaskGenericNotifyFromISR>
										 ( uint32_t ) 0,
										 eNoAction,
										 pxHigherPriorityTaskWoken );
			( pxStreamBuffer )->xTaskWaitingToReceive = NULL;
 800333a:	693b      	ldr	r3, [r7, #16]
 800333c:	2200      	movs	r2, #0
 800333e:	611a      	str	r2, [r3, #16]
			xReturn = pdTRUE;
 8003340:	2301      	movs	r3, #1
 8003342:	617b      	str	r3, [r7, #20]
 8003344:	e001      	b.n	800334a <xStreamBufferSendCompletedFromISR+0x4a>
		}
		else
		{
			xReturn = pdFALSE;
 8003346:	2300      	movs	r3, #0
 8003348:	617b      	str	r3, [r7, #20]
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );
 800334a:	68fb      	ldr	r3, [r7, #12]
 800334c:	0018      	movs	r0, r3
 800334e:	f7fe fa35 	bl	80017bc <vClearInterruptMaskFromISR>

	return xReturn;
 8003352:	697b      	ldr	r3, [r7, #20]
}
 8003354:	0018      	movs	r0, r3
 8003356:	46bd      	mov	sp, r7
 8003358:	b006      	add	sp, #24
 800335a:	bd80      	pop	{r7, pc}

0800335c <xStreamBufferReceiveCompletedFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xStreamBufferReceiveCompletedFromISR( StreamBufferHandle_t xStreamBuffer, BaseType_t *pxHigherPriorityTaskWoken )
{
 800335c:	b580      	push	{r7, lr}
 800335e:	b088      	sub	sp, #32
 8003360:	af02      	add	r7, sp, #8
 8003362:	6078      	str	r0, [r7, #4]
 8003364:	6039      	str	r1, [r7, #0]
StreamBuffer_t * const pxStreamBuffer = xStreamBuffer;
 8003366:	687b      	ldr	r3, [r7, #4]
 8003368:	613b      	str	r3, [r7, #16]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;

	configASSERT( pxStreamBuffer );
 800336a:	693b      	ldr	r3, [r7, #16]
 800336c:	2b00      	cmp	r3, #0
 800336e:	d101      	bne.n	8003374 <xStreamBufferReceiveCompletedFromISR+0x18>
 8003370:	b672      	cpsid	i
 8003372:	e7fe      	b.n	8003372 <xStreamBufferReceiveCompletedFromISR+0x16>

	uxSavedInterruptStatus = ( UBaseType_t ) portSET_INTERRUPT_MASK_FROM_ISR();
 8003374:	f7fe fa1c 	bl	80017b0 <ulSetInterruptMaskFromISR>
 8003378:	0003      	movs	r3, r0
 800337a:	60fb      	str	r3, [r7, #12]
	{
		if( ( pxStreamBuffer )->xTaskWaitingToSend != NULL )
 800337c:	693b      	ldr	r3, [r7, #16]
 800337e:	695b      	ldr	r3, [r3, #20]
 8003380:	2b00      	cmp	r3, #0
 8003382:	d00e      	beq.n	80033a2 <xStreamBufferReceiveCompletedFromISR+0x46>
		{
			( void ) xTaskNotifyFromISR( ( pxStreamBuffer )->xTaskWaitingToSend,
 8003384:	693b      	ldr	r3, [r7, #16]
 8003386:	6958      	ldr	r0, [r3, #20]
 8003388:	683b      	ldr	r3, [r7, #0]
 800338a:	9300      	str	r3, [sp, #0]
 800338c:	2300      	movs	r3, #0
 800338e:	2200      	movs	r2, #0
 8003390:	2100      	movs	r1, #0
 8003392:	f001 fecf 	bl	8005134 <xTaskGenericNotifyFromISR>
										 ( uint32_t ) 0,
										 eNoAction,
										 pxHigherPriorityTaskWoken );
			( pxStreamBuffer )->xTaskWaitingToSend = NULL;
 8003396:	693b      	ldr	r3, [r7, #16]
 8003398:	2200      	movs	r2, #0
 800339a:	615a      	str	r2, [r3, #20]
			xReturn = pdTRUE;
 800339c:	2301      	movs	r3, #1
 800339e:	617b      	str	r3, [r7, #20]
 80033a0:	e001      	b.n	80033a6 <xStreamBufferReceiveCompletedFromISR+0x4a>
		}
		else
		{
			xReturn = pdFALSE;
 80033a2:	2300      	movs	r3, #0
 80033a4:	617b      	str	r3, [r7, #20]
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );
 80033a6:	68fb      	ldr	r3, [r7, #12]
 80033a8:	0018      	movs	r0, r3
 80033aa:	f7fe fa07 	bl	80017bc <vClearInterruptMaskFromISR>

	return xReturn;
 80033ae:	697b      	ldr	r3, [r7, #20]
}
 80033b0:	0018      	movs	r0, r3
 80033b2:	46bd      	mov	sp, r7
 80033b4:	b006      	add	sp, #24
 80033b6:	bd80      	pop	{r7, pc}

080033b8 <prvWriteBytesToBuffer>:
/*-----------------------------------------------------------*/

static size_t prvWriteBytesToBuffer( StreamBuffer_t * const pxStreamBuffer, const uint8_t *pucData, size_t xCount )
{
 80033b8:	b580      	push	{r7, lr}
 80033ba:	b086      	sub	sp, #24
 80033bc:	af00      	add	r7, sp, #0
 80033be:	60f8      	str	r0, [r7, #12]
 80033c0:	60b9      	str	r1, [r7, #8]
 80033c2:	607a      	str	r2, [r7, #4]
size_t xNextHead, xFirstLength;

	configASSERT( xCount > ( size_t ) 0 );
 80033c4:	687b      	ldr	r3, [r7, #4]
 80033c6:	2b00      	cmp	r3, #0
 80033c8:	d101      	bne.n	80033ce <prvWriteBytesToBuffer+0x16>
 80033ca:	b672      	cpsid	i
 80033cc:	e7fe      	b.n	80033cc <prvWriteBytesToBuffer+0x14>

	xNextHead = pxStreamBuffer->xHead;
 80033ce:	68fb      	ldr	r3, [r7, #12]
 80033d0:	685b      	ldr	r3, [r3, #4]
 80033d2:	617b      	str	r3, [r7, #20]

	/* Calculate the number of bytes that can be added in the first write -
	which may be less than the total number of bytes that need to be added if
	the buffer will wrap back to the beginning. */
	xFirstLength = configMIN( pxStreamBuffer->xLength - xNextHead, xCount );
 80033d4:	68fb      	ldr	r3, [r7, #12]
 80033d6:	689a      	ldr	r2, [r3, #8]
 80033d8:	697b      	ldr	r3, [r7, #20]
 80033da:	1ad3      	subs	r3, r2, r3
 80033dc:	687a      	ldr	r2, [r7, #4]
 80033de:	4293      	cmp	r3, r2
 80033e0:	d900      	bls.n	80033e4 <prvWriteBytesToBuffer+0x2c>
 80033e2:	0013      	movs	r3, r2
 80033e4:	613b      	str	r3, [r7, #16]

	/* Write as many bytes as can be written in the first write. */
	configASSERT( ( xNextHead + xFirstLength ) <= pxStreamBuffer->xLength );
 80033e6:	697a      	ldr	r2, [r7, #20]
 80033e8:	693b      	ldr	r3, [r7, #16]
 80033ea:	18d2      	adds	r2, r2, r3
 80033ec:	68fb      	ldr	r3, [r7, #12]
 80033ee:	689b      	ldr	r3, [r3, #8]
 80033f0:	429a      	cmp	r2, r3
 80033f2:	d901      	bls.n	80033f8 <prvWriteBytesToBuffer+0x40>
 80033f4:	b672      	cpsid	i
 80033f6:	e7fe      	b.n	80033f6 <prvWriteBytesToBuffer+0x3e>
	( void ) memcpy( ( void* ) ( &( pxStreamBuffer->pucBuffer[ xNextHead ] ) ), ( const void * ) pucData, xFirstLength ); /*lint !e9087 memcpy() requires void *. */
 80033f8:	68fb      	ldr	r3, [r7, #12]
 80033fa:	699a      	ldr	r2, [r3, #24]
 80033fc:	697b      	ldr	r3, [r7, #20]
 80033fe:	18d3      	adds	r3, r2, r3
 8003400:	693a      	ldr	r2, [r7, #16]
 8003402:	68b9      	ldr	r1, [r7, #8]
 8003404:	0018      	movs	r0, r3
 8003406:	f004 f833 	bl	8007470 <memcpy>

	/* If the number of bytes written was less than the number that could be
	written in the first write... */
	if( xCount > xFirstLength )
 800340a:	687a      	ldr	r2, [r7, #4]
 800340c:	693b      	ldr	r3, [r7, #16]
 800340e:	429a      	cmp	r2, r3
 8003410:	d913      	bls.n	800343a <prvWriteBytesToBuffer+0x82>
	{
		/* ...then write the remaining bytes to the start of the buffer. */
		configASSERT( ( xCount - xFirstLength ) <= pxStreamBuffer->xLength );
 8003412:	687a      	ldr	r2, [r7, #4]
 8003414:	693b      	ldr	r3, [r7, #16]
 8003416:	1ad2      	subs	r2, r2, r3
 8003418:	68fb      	ldr	r3, [r7, #12]
 800341a:	689b      	ldr	r3, [r3, #8]
 800341c:	429a      	cmp	r2, r3
 800341e:	d901      	bls.n	8003424 <prvWriteBytesToBuffer+0x6c>
 8003420:	b672      	cpsid	i
 8003422:	e7fe      	b.n	8003422 <prvWriteBytesToBuffer+0x6a>
		( void ) memcpy( ( void * ) pxStreamBuffer->pucBuffer, ( const void * ) &( pucData[ xFirstLength ] ), xCount - xFirstLength ); /*lint !e9087 memcpy() requires void *. */
 8003424:	68fb      	ldr	r3, [r7, #12]
 8003426:	6998      	ldr	r0, [r3, #24]
 8003428:	68ba      	ldr	r2, [r7, #8]
 800342a:	693b      	ldr	r3, [r7, #16]
 800342c:	18d1      	adds	r1, r2, r3
 800342e:	687a      	ldr	r2, [r7, #4]
 8003430:	693b      	ldr	r3, [r7, #16]
 8003432:	1ad3      	subs	r3, r2, r3
 8003434:	001a      	movs	r2, r3
 8003436:	f004 f81b 	bl	8007470 <memcpy>
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	xNextHead += xCount;
 800343a:	697a      	ldr	r2, [r7, #20]
 800343c:	687b      	ldr	r3, [r7, #4]
 800343e:	18d3      	adds	r3, r2, r3
 8003440:	617b      	str	r3, [r7, #20]
	if( xNextHead >= pxStreamBuffer->xLength )
 8003442:	68fb      	ldr	r3, [r7, #12]
 8003444:	689a      	ldr	r2, [r3, #8]
 8003446:	697b      	ldr	r3, [r7, #20]
 8003448:	429a      	cmp	r2, r3
 800344a:	d804      	bhi.n	8003456 <prvWriteBytesToBuffer+0x9e>
	{
		xNextHead -= pxStreamBuffer->xLength;
 800344c:	68fb      	ldr	r3, [r7, #12]
 800344e:	689b      	ldr	r3, [r3, #8]
 8003450:	697a      	ldr	r2, [r7, #20]
 8003452:	1ad3      	subs	r3, r2, r3
 8003454:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxStreamBuffer->xHead = xNextHead;
 8003456:	68fb      	ldr	r3, [r7, #12]
 8003458:	697a      	ldr	r2, [r7, #20]
 800345a:	605a      	str	r2, [r3, #4]

	return xCount;
 800345c:	687b      	ldr	r3, [r7, #4]
}
 800345e:	0018      	movs	r0, r3
 8003460:	46bd      	mov	sp, r7
 8003462:	b006      	add	sp, #24
 8003464:	bd80      	pop	{r7, pc}

08003466 <prvReadBytesFromBuffer>:
/*-----------------------------------------------------------*/

static size_t prvReadBytesFromBuffer( StreamBuffer_t *pxStreamBuffer, uint8_t *pucData, size_t xMaxCount, size_t xBytesAvailable )
{
 8003466:	b580      	push	{r7, lr}
 8003468:	b088      	sub	sp, #32
 800346a:	af00      	add	r7, sp, #0
 800346c:	60f8      	str	r0, [r7, #12]
 800346e:	60b9      	str	r1, [r7, #8]
 8003470:	607a      	str	r2, [r7, #4]
 8003472:	603b      	str	r3, [r7, #0]
size_t xCount, xFirstLength, xNextTail;

	/* Use the minimum of the wanted bytes and the available bytes. */
	xCount = configMIN( xBytesAvailable, xMaxCount );
 8003474:	683a      	ldr	r2, [r7, #0]
 8003476:	687b      	ldr	r3, [r7, #4]
 8003478:	4293      	cmp	r3, r2
 800347a:	d900      	bls.n	800347e <prvReadBytesFromBuffer+0x18>
 800347c:	0013      	movs	r3, r2
 800347e:	61bb      	str	r3, [r7, #24]

	if( xCount > ( size_t ) 0 )
 8003480:	69bb      	ldr	r3, [r7, #24]
 8003482:	2b00      	cmp	r3, #0
 8003484:	d049      	beq.n	800351a <prvReadBytesFromBuffer+0xb4>
	{
		xNextTail = pxStreamBuffer->xTail;
 8003486:	68fb      	ldr	r3, [r7, #12]
 8003488:	681b      	ldr	r3, [r3, #0]
 800348a:	61fb      	str	r3, [r7, #28]

		/* Calculate the number of bytes that can be read - which may be
		less than the number wanted if the data wraps around to the start of
		the buffer. */
		xFirstLength = configMIN( pxStreamBuffer->xLength - xNextTail, xCount );
 800348c:	68fb      	ldr	r3, [r7, #12]
 800348e:	689a      	ldr	r2, [r3, #8]
 8003490:	69fb      	ldr	r3, [r7, #28]
 8003492:	1ad3      	subs	r3, r2, r3
 8003494:	69ba      	ldr	r2, [r7, #24]
 8003496:	4293      	cmp	r3, r2
 8003498:	d900      	bls.n	800349c <prvReadBytesFromBuffer+0x36>
 800349a:	0013      	movs	r3, r2
 800349c:	617b      	str	r3, [r7, #20]

		/* Obtain the number of bytes it is possible to obtain in the first
		read.  Asserts check bounds of read and write. */
		configASSERT( xFirstLength <= xMaxCount );
 800349e:	697a      	ldr	r2, [r7, #20]
 80034a0:	687b      	ldr	r3, [r7, #4]
 80034a2:	429a      	cmp	r2, r3
 80034a4:	d901      	bls.n	80034aa <prvReadBytesFromBuffer+0x44>
 80034a6:	b672      	cpsid	i
 80034a8:	e7fe      	b.n	80034a8 <prvReadBytesFromBuffer+0x42>
		configASSERT( ( xNextTail + xFirstLength ) <= pxStreamBuffer->xLength );
 80034aa:	69fa      	ldr	r2, [r7, #28]
 80034ac:	697b      	ldr	r3, [r7, #20]
 80034ae:	18d2      	adds	r2, r2, r3
 80034b0:	68fb      	ldr	r3, [r7, #12]
 80034b2:	689b      	ldr	r3, [r3, #8]
 80034b4:	429a      	cmp	r2, r3
 80034b6:	d901      	bls.n	80034bc <prvReadBytesFromBuffer+0x56>
 80034b8:	b672      	cpsid	i
 80034ba:	e7fe      	b.n	80034ba <prvReadBytesFromBuffer+0x54>
		( void ) memcpy( ( void * ) pucData, ( const void * ) &( pxStreamBuffer->pucBuffer[ xNextTail ] ), xFirstLength ); /*lint !e9087 memcpy() requires void *. */
 80034bc:	68fb      	ldr	r3, [r7, #12]
 80034be:	699a      	ldr	r2, [r3, #24]
 80034c0:	69fb      	ldr	r3, [r7, #28]
 80034c2:	18d1      	adds	r1, r2, r3
 80034c4:	697a      	ldr	r2, [r7, #20]
 80034c6:	68bb      	ldr	r3, [r7, #8]
 80034c8:	0018      	movs	r0, r3
 80034ca:	f003 ffd1 	bl	8007470 <memcpy>

		/* If the total number of wanted bytes is greater than the number
		that could be read in the first read... */
		if( xCount > xFirstLength )
 80034ce:	69ba      	ldr	r2, [r7, #24]
 80034d0:	697b      	ldr	r3, [r7, #20]
 80034d2:	429a      	cmp	r2, r3
 80034d4:	d910      	bls.n	80034f8 <prvReadBytesFromBuffer+0x92>
		{
			/*...then read the remaining bytes from the start of the buffer. */
			configASSERT( xCount <= xMaxCount );
 80034d6:	69ba      	ldr	r2, [r7, #24]
 80034d8:	687b      	ldr	r3, [r7, #4]
 80034da:	429a      	cmp	r2, r3
 80034dc:	d901      	bls.n	80034e2 <prvReadBytesFromBuffer+0x7c>
 80034de:	b672      	cpsid	i
 80034e0:	e7fe      	b.n	80034e0 <prvReadBytesFromBuffer+0x7a>
			( void ) memcpy( ( void * ) &( pucData[ xFirstLength ] ), ( void * ) ( pxStreamBuffer->pucBuffer ), xCount - xFirstLength ); /*lint !e9087 memcpy() requires void *. */
 80034e2:	68ba      	ldr	r2, [r7, #8]
 80034e4:	697b      	ldr	r3, [r7, #20]
 80034e6:	18d0      	adds	r0, r2, r3
 80034e8:	68fb      	ldr	r3, [r7, #12]
 80034ea:	6999      	ldr	r1, [r3, #24]
 80034ec:	69ba      	ldr	r2, [r7, #24]
 80034ee:	697b      	ldr	r3, [r7, #20]
 80034f0:	1ad3      	subs	r3, r2, r3
 80034f2:	001a      	movs	r2, r3
 80034f4:	f003 ffbc 	bl	8007470 <memcpy>
			mtCOVERAGE_TEST_MARKER();
		}

		/* Move the tail pointer to effectively remove the data read from
		the buffer. */
		xNextTail += xCount;
 80034f8:	69fa      	ldr	r2, [r7, #28]
 80034fa:	69bb      	ldr	r3, [r7, #24]
 80034fc:	18d3      	adds	r3, r2, r3
 80034fe:	61fb      	str	r3, [r7, #28]

		if( xNextTail >= pxStreamBuffer->xLength )
 8003500:	68fb      	ldr	r3, [r7, #12]
 8003502:	689a      	ldr	r2, [r3, #8]
 8003504:	69fb      	ldr	r3, [r7, #28]
 8003506:	429a      	cmp	r2, r3
 8003508:	d804      	bhi.n	8003514 <prvReadBytesFromBuffer+0xae>
		{
			xNextTail -= pxStreamBuffer->xLength;
 800350a:	68fb      	ldr	r3, [r7, #12]
 800350c:	689b      	ldr	r3, [r3, #8]
 800350e:	69fa      	ldr	r2, [r7, #28]
 8003510:	1ad3      	subs	r3, r2, r3
 8003512:	61fb      	str	r3, [r7, #28]
		}

		pxStreamBuffer->xTail = xNextTail;
 8003514:	68fb      	ldr	r3, [r7, #12]
 8003516:	69fa      	ldr	r2, [r7, #28]
 8003518:	601a      	str	r2, [r3, #0]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xCount;
 800351a:	69bb      	ldr	r3, [r7, #24]
}
 800351c:	0018      	movs	r0, r3
 800351e:	46bd      	mov	sp, r7
 8003520:	b008      	add	sp, #32
 8003522:	bd80      	pop	{r7, pc}

08003524 <prvBytesInBuffer>:
/*-----------------------------------------------------------*/

static size_t prvBytesInBuffer( const StreamBuffer_t * const pxStreamBuffer )
{
 8003524:	b580      	push	{r7, lr}
 8003526:	b084      	sub	sp, #16
 8003528:	af00      	add	r7, sp, #0
 800352a:	6078      	str	r0, [r7, #4]
/* Returns the distance between xTail and xHead. */
size_t xCount;

	xCount = pxStreamBuffer->xLength + pxStreamBuffer->xHead;
 800352c:	687b      	ldr	r3, [r7, #4]
 800352e:	689a      	ldr	r2, [r3, #8]
 8003530:	687b      	ldr	r3, [r7, #4]
 8003532:	685b      	ldr	r3, [r3, #4]
 8003534:	18d3      	adds	r3, r2, r3
 8003536:	60fb      	str	r3, [r7, #12]
	xCount -= pxStreamBuffer->xTail;
 8003538:	687b      	ldr	r3, [r7, #4]
 800353a:	681b      	ldr	r3, [r3, #0]
 800353c:	68fa      	ldr	r2, [r7, #12]
 800353e:	1ad3      	subs	r3, r2, r3
 8003540:	60fb      	str	r3, [r7, #12]
	if ( xCount >= pxStreamBuffer->xLength )
 8003542:	687b      	ldr	r3, [r7, #4]
 8003544:	689a      	ldr	r2, [r3, #8]
 8003546:	68fb      	ldr	r3, [r7, #12]
 8003548:	429a      	cmp	r2, r3
 800354a:	d804      	bhi.n	8003556 <prvBytesInBuffer+0x32>
	{
		xCount -= pxStreamBuffer->xLength;
 800354c:	687b      	ldr	r3, [r7, #4]
 800354e:	689b      	ldr	r3, [r3, #8]
 8003550:	68fa      	ldr	r2, [r7, #12]
 8003552:	1ad3      	subs	r3, r2, r3
 8003554:	60fb      	str	r3, [r7, #12]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xCount;
 8003556:	68fb      	ldr	r3, [r7, #12]
}
 8003558:	0018      	movs	r0, r3
 800355a:	46bd      	mov	sp, r7
 800355c:	b004      	add	sp, #16
 800355e:	bd80      	pop	{r7, pc}

08003560 <prvInitialiseNewStreamBuffer>:
static void prvInitialiseNewStreamBuffer( StreamBuffer_t * const pxStreamBuffer,
										  uint8_t * const pucBuffer,
										  size_t xBufferSizeBytes,
										  size_t xTriggerLevelBytes,
										  uint8_t ucFlags )
{
 8003560:	b580      	push	{r7, lr}
 8003562:	b086      	sub	sp, #24
 8003564:	af00      	add	r7, sp, #0
 8003566:	60f8      	str	r0, [r7, #12]
 8003568:	60b9      	str	r1, [r7, #8]
 800356a:	607a      	str	r2, [r7, #4]
 800356c:	603b      	str	r3, [r7, #0]
	#if( configASSERT_DEFINED == 1 )
	{
		/* The value written just has to be identifiable when looking at the
		memory.  Don't use 0xA5 as that is the stack fill value and could
		result in confusion as to what is actually being observed. */
		const BaseType_t xWriteValue = 0x55;
 800356e:	2355      	movs	r3, #85	; 0x55
 8003570:	617b      	str	r3, [r7, #20]
		configASSERT( memset( pucBuffer, ( int ) xWriteValue, xBufferSizeBytes ) == pucBuffer );
 8003572:	687a      	ldr	r2, [r7, #4]
 8003574:	6979      	ldr	r1, [r7, #20]
 8003576:	68bb      	ldr	r3, [r7, #8]
 8003578:	0018      	movs	r0, r3
 800357a:	f003 ff82 	bl	8007482 <memset>
 800357e:	0002      	movs	r2, r0
 8003580:	68bb      	ldr	r3, [r7, #8]
 8003582:	429a      	cmp	r2, r3
 8003584:	d001      	beq.n	800358a <prvInitialiseNewStreamBuffer+0x2a>
 8003586:	b672      	cpsid	i
 8003588:	e7fe      	b.n	8003588 <prvInitialiseNewStreamBuffer+0x28>
	} /*lint !e529 !e438 xWriteValue is only used if configASSERT() is defined. */
	#endif

	( void ) memset( ( void * ) pxStreamBuffer, 0x00, sizeof( StreamBuffer_t ) ); /*lint !e9087 memset() requires void *. */
 800358a:	68fb      	ldr	r3, [r7, #12]
 800358c:	2224      	movs	r2, #36	; 0x24
 800358e:	2100      	movs	r1, #0
 8003590:	0018      	movs	r0, r3
 8003592:	f003 ff76 	bl	8007482 <memset>
	pxStreamBuffer->pucBuffer = pucBuffer;
 8003596:	68fb      	ldr	r3, [r7, #12]
 8003598:	68ba      	ldr	r2, [r7, #8]
 800359a:	619a      	str	r2, [r3, #24]
	pxStreamBuffer->xLength = xBufferSizeBytes;
 800359c:	68fb      	ldr	r3, [r7, #12]
 800359e:	687a      	ldr	r2, [r7, #4]
 80035a0:	609a      	str	r2, [r3, #8]
	pxStreamBuffer->xTriggerLevelBytes = xTriggerLevelBytes;
 80035a2:	68fb      	ldr	r3, [r7, #12]
 80035a4:	683a      	ldr	r2, [r7, #0]
 80035a6:	60da      	str	r2, [r3, #12]
	pxStreamBuffer->ucFlags = ucFlags;
 80035a8:	68fb      	ldr	r3, [r7, #12]
 80035aa:	2220      	movs	r2, #32
 80035ac:	18ba      	adds	r2, r7, r2
 80035ae:	7812      	ldrb	r2, [r2, #0]
 80035b0:	771a      	strb	r2, [r3, #28]
}
 80035b2:	46c0      	nop			; (mov r8, r8)
 80035b4:	46bd      	mov	sp, r7
 80035b6:	b006      	add	sp, #24
 80035b8:	bd80      	pop	{r7, pc}

080035ba <uxStreamBufferGetStreamBufferNumber>:

#if ( configUSE_TRACE_FACILITY == 1 )

	UBaseType_t uxStreamBufferGetStreamBufferNumber( StreamBufferHandle_t xStreamBuffer )
	{
 80035ba:	b580      	push	{r7, lr}
 80035bc:	b082      	sub	sp, #8
 80035be:	af00      	add	r7, sp, #0
 80035c0:	6078      	str	r0, [r7, #4]
		return xStreamBuffer->uxStreamBufferNumber;
 80035c2:	687b      	ldr	r3, [r7, #4]
 80035c4:	6a1b      	ldr	r3, [r3, #32]
	}
 80035c6:	0018      	movs	r0, r3
 80035c8:	46bd      	mov	sp, r7
 80035ca:	b002      	add	sp, #8
 80035cc:	bd80      	pop	{r7, pc}

080035ce <vStreamBufferSetStreamBufferNumber>:
/*-----------------------------------------------------------*/

#if ( configUSE_TRACE_FACILITY == 1 )

	void vStreamBufferSetStreamBufferNumber( StreamBufferHandle_t xStreamBuffer, UBaseType_t uxStreamBufferNumber )
	{
 80035ce:	b580      	push	{r7, lr}
 80035d0:	b082      	sub	sp, #8
 80035d2:	af00      	add	r7, sp, #0
 80035d4:	6078      	str	r0, [r7, #4]
 80035d6:	6039      	str	r1, [r7, #0]
		xStreamBuffer->uxStreamBufferNumber = uxStreamBufferNumber;
 80035d8:	687b      	ldr	r3, [r7, #4]
 80035da:	683a      	ldr	r2, [r7, #0]
 80035dc:	621a      	str	r2, [r3, #32]
	}
 80035de:	46c0      	nop			; (mov r8, r8)
 80035e0:	46bd      	mov	sp, r7
 80035e2:	b002      	add	sp, #8
 80035e4:	bd80      	pop	{r7, pc}

080035e6 <ucStreamBufferGetStreamBufferType>:
/*-----------------------------------------------------------*/

#if ( configUSE_TRACE_FACILITY == 1 )

	uint8_t ucStreamBufferGetStreamBufferType( StreamBufferHandle_t xStreamBuffer )
	{
 80035e6:	b580      	push	{r7, lr}
 80035e8:	b082      	sub	sp, #8
 80035ea:	af00      	add	r7, sp, #0
 80035ec:	6078      	str	r0, [r7, #4]
		return ( xStreamBuffer->ucFlags & sbFLAGS_IS_MESSAGE_BUFFER );
 80035ee:	687b      	ldr	r3, [r7, #4]
 80035f0:	7f1b      	ldrb	r3, [r3, #28]
 80035f2:	2201      	movs	r2, #1
 80035f4:	4013      	ands	r3, r2
 80035f6:	b2db      	uxtb	r3, r3
	}
 80035f8:	0018      	movs	r0, r3
 80035fa:	46bd      	mov	sp, r7
 80035fc:	b002      	add	sp, #8
 80035fe:	bd80      	pop	{r7, pc}

08003600 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 8003600:	b590      	push	{r4, r7, lr}
 8003602:	b08d      	sub	sp, #52	; 0x34
 8003604:	af04      	add	r7, sp, #16
 8003606:	60f8      	str	r0, [r7, #12]
 8003608:	60b9      	str	r1, [r7, #8]
 800360a:	603b      	str	r3, [r7, #0]
 800360c:	1dbb      	adds	r3, r7, #6
 800360e:	801a      	strh	r2, [r3, #0]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 8003610:	1dbb      	adds	r3, r7, #6
 8003612:	881b      	ldrh	r3, [r3, #0]
 8003614:	009b      	lsls	r3, r3, #2
 8003616:	0018      	movs	r0, r3
 8003618:	f7fd fee6 	bl	80013e8 <pvPortMalloc>
 800361c:	0003      	movs	r3, r0
 800361e:	617b      	str	r3, [r7, #20]

			if( pxStack != NULL )
 8003620:	697b      	ldr	r3, [r7, #20]
 8003622:	2b00      	cmp	r3, #0
 8003624:	d010      	beq.n	8003648 <xTaskCreate+0x48>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 8003626:	2054      	movs	r0, #84	; 0x54
 8003628:	f7fd fede 	bl	80013e8 <pvPortMalloc>
 800362c:	0003      	movs	r3, r0
 800362e:	61fb      	str	r3, [r7, #28]

				if( pxNewTCB != NULL )
 8003630:	69fb      	ldr	r3, [r7, #28]
 8003632:	2b00      	cmp	r3, #0
 8003634:	d003      	beq.n	800363e <xTaskCreate+0x3e>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 8003636:	69fb      	ldr	r3, [r7, #28]
 8003638:	697a      	ldr	r2, [r7, #20]
 800363a:	631a      	str	r2, [r3, #48]	; 0x30
 800363c:	e006      	b.n	800364c <xTaskCreate+0x4c>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 800363e:	697b      	ldr	r3, [r7, #20]
 8003640:	0018      	movs	r0, r3
 8003642:	f7fd ff1b 	bl	800147c <vPortFree>
 8003646:	e001      	b.n	800364c <xTaskCreate+0x4c>
				}
			}
			else
			{
				pxNewTCB = NULL;
 8003648:	2300      	movs	r3, #0
 800364a:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 800364c:	69fb      	ldr	r3, [r7, #28]
 800364e:	2b00      	cmp	r3, #0
 8003650:	d016      	beq.n	8003680 <xTaskCreate+0x80>
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8003652:	1dbb      	adds	r3, r7, #6
 8003654:	881a      	ldrh	r2, [r3, #0]
 8003656:	683c      	ldr	r4, [r7, #0]
 8003658:	68b9      	ldr	r1, [r7, #8]
 800365a:	68f8      	ldr	r0, [r7, #12]
 800365c:	2300      	movs	r3, #0
 800365e:	9303      	str	r3, [sp, #12]
 8003660:	69fb      	ldr	r3, [r7, #28]
 8003662:	9302      	str	r3, [sp, #8]
 8003664:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003666:	9301      	str	r3, [sp, #4]
 8003668:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800366a:	9300      	str	r3, [sp, #0]
 800366c:	0023      	movs	r3, r4
 800366e:	f000 f80f 	bl	8003690 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8003672:	69fb      	ldr	r3, [r7, #28]
 8003674:	0018      	movs	r0, r3
 8003676:	f000 f895 	bl	80037a4 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 800367a:	2301      	movs	r3, #1
 800367c:	61bb      	str	r3, [r7, #24]
 800367e:	e002      	b.n	8003686 <xTaskCreate+0x86>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8003680:	2301      	movs	r3, #1
 8003682:	425b      	negs	r3, r3
 8003684:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 8003686:	69bb      	ldr	r3, [r7, #24]
	}
 8003688:	0018      	movs	r0, r3
 800368a:	46bd      	mov	sp, r7
 800368c:	b009      	add	sp, #36	; 0x24
 800368e:	bd90      	pop	{r4, r7, pc}

08003690 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 8003690:	b580      	push	{r7, lr}
 8003692:	b086      	sub	sp, #24
 8003694:	af00      	add	r7, sp, #0
 8003696:	60f8      	str	r0, [r7, #12]
 8003698:	60b9      	str	r1, [r7, #8]
 800369a:	607a      	str	r2, [r7, #4]
 800369c:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 800369e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80036a0:	6b18      	ldr	r0, [r3, #48]	; 0x30
 80036a2:	687b      	ldr	r3, [r7, #4]
 80036a4:	009b      	lsls	r3, r3, #2
 80036a6:	001a      	movs	r2, r3
 80036a8:	21a5      	movs	r1, #165	; 0xa5
 80036aa:	f003 feea 	bl	8007482 <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 80036ae:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80036b0:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80036b2:	687b      	ldr	r3, [r7, #4]
 80036b4:	493a      	ldr	r1, [pc, #232]	; (80037a0 <prvInitialiseNewTask+0x110>)
 80036b6:	468c      	mov	ip, r1
 80036b8:	4463      	add	r3, ip
 80036ba:	009b      	lsls	r3, r3, #2
 80036bc:	18d3      	adds	r3, r2, r3
 80036be:	613b      	str	r3, [r7, #16]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 80036c0:	693b      	ldr	r3, [r7, #16]
 80036c2:	2207      	movs	r2, #7
 80036c4:	4393      	bics	r3, r2
 80036c6:	613b      	str	r3, [r7, #16]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 80036c8:	693b      	ldr	r3, [r7, #16]
 80036ca:	2207      	movs	r2, #7
 80036cc:	4013      	ands	r3, r2
 80036ce:	d001      	beq.n	80036d4 <prvInitialiseNewTask+0x44>
 80036d0:	b672      	cpsid	i
 80036d2:	e7fe      	b.n	80036d2 <prvInitialiseNewTask+0x42>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 80036d4:	68bb      	ldr	r3, [r7, #8]
 80036d6:	2b00      	cmp	r3, #0
 80036d8:	d020      	beq.n	800371c <prvInitialiseNewTask+0x8c>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 80036da:	2300      	movs	r3, #0
 80036dc:	617b      	str	r3, [r7, #20]
 80036de:	e013      	b.n	8003708 <prvInitialiseNewTask+0x78>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 80036e0:	68ba      	ldr	r2, [r7, #8]
 80036e2:	697b      	ldr	r3, [r7, #20]
 80036e4:	18d3      	adds	r3, r2, r3
 80036e6:	7818      	ldrb	r0, [r3, #0]
 80036e8:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80036ea:	2134      	movs	r1, #52	; 0x34
 80036ec:	697b      	ldr	r3, [r7, #20]
 80036ee:	18d3      	adds	r3, r2, r3
 80036f0:	185b      	adds	r3, r3, r1
 80036f2:	1c02      	adds	r2, r0, #0
 80036f4:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 80036f6:	68ba      	ldr	r2, [r7, #8]
 80036f8:	697b      	ldr	r3, [r7, #20]
 80036fa:	18d3      	adds	r3, r2, r3
 80036fc:	781b      	ldrb	r3, [r3, #0]
 80036fe:	2b00      	cmp	r3, #0
 8003700:	d006      	beq.n	8003710 <prvInitialiseNewTask+0x80>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8003702:	697b      	ldr	r3, [r7, #20]
 8003704:	3301      	adds	r3, #1
 8003706:	617b      	str	r3, [r7, #20]
 8003708:	697b      	ldr	r3, [r7, #20]
 800370a:	2b04      	cmp	r3, #4
 800370c:	d9e8      	bls.n	80036e0 <prvInitialiseNewTask+0x50>
 800370e:	e000      	b.n	8003712 <prvInitialiseNewTask+0x82>
			{
				break;
 8003710:	46c0      	nop			; (mov r8, r8)
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8003712:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003714:	2238      	movs	r2, #56	; 0x38
 8003716:	2100      	movs	r1, #0
 8003718:	5499      	strb	r1, [r3, r2]
 800371a:	e003      	b.n	8003724 <prvInitialiseNewTask+0x94>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 800371c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800371e:	2234      	movs	r2, #52	; 0x34
 8003720:	2100      	movs	r1, #0
 8003722:	5499      	strb	r1, [r3, r2]
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8003724:	6a3b      	ldr	r3, [r7, #32]
 8003726:	2b04      	cmp	r3, #4
 8003728:	d901      	bls.n	800372e <prvInitialiseNewTask+0x9e>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 800372a:	2304      	movs	r3, #4
 800372c:	623b      	str	r3, [r7, #32]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 800372e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003730:	6a3a      	ldr	r2, [r7, #32]
 8003732:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 8003734:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003736:	6a3a      	ldr	r2, [r7, #32]
 8003738:	645a      	str	r2, [r3, #68]	; 0x44
		pxNewTCB->uxMutexesHeld = 0;
 800373a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800373c:	2200      	movs	r2, #0
 800373e:	649a      	str	r2, [r3, #72]	; 0x48
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8003740:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003742:	3304      	adds	r3, #4
 8003744:	0018      	movs	r0, r3
 8003746:	f7fd fedd 	bl	8001504 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 800374a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800374c:	3318      	adds	r3, #24
 800374e:	0018      	movs	r0, r3
 8003750:	f7fd fed8 	bl	8001504 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8003754:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003756:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8003758:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800375a:	6a3b      	ldr	r3, [r7, #32]
 800375c:	2205      	movs	r2, #5
 800375e:	1ad2      	subs	r2, r2, r3
 8003760:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003762:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8003764:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003766:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8003768:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 800376a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800376c:	2200      	movs	r2, #0
 800376e:	64da      	str	r2, [r3, #76]	; 0x4c
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8003770:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003772:	2250      	movs	r2, #80	; 0x50
 8003774:	2100      	movs	r1, #0
 8003776:	5499      	strb	r1, [r3, r2]
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8003778:	683a      	ldr	r2, [r7, #0]
 800377a:	68f9      	ldr	r1, [r7, #12]
 800377c:	693b      	ldr	r3, [r7, #16]
 800377e:	0018      	movs	r0, r3
 8003780:	f7fd ff4e 	bl	8001620 <pxPortInitialiseStack>
 8003784:	0002      	movs	r2, r0
 8003786:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003788:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 800378a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800378c:	2b00      	cmp	r3, #0
 800378e:	d002      	beq.n	8003796 <prvInitialiseNewTask+0x106>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8003790:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003792:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8003794:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8003796:	46c0      	nop			; (mov r8, r8)
 8003798:	46bd      	mov	sp, r7
 800379a:	b006      	add	sp, #24
 800379c:	bd80      	pop	{r7, pc}
 800379e:	46c0      	nop			; (mov r8, r8)
 80037a0:	3fffffff 	.word	0x3fffffff

080037a4 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 80037a4:	b580      	push	{r7, lr}
 80037a6:	b082      	sub	sp, #8
 80037a8:	af00      	add	r7, sp, #0
 80037aa:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 80037ac:	f7fd ffd6 	bl	800175c <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 80037b0:	4b2a      	ldr	r3, [pc, #168]	; (800385c <prvAddNewTaskToReadyList+0xb8>)
 80037b2:	681b      	ldr	r3, [r3, #0]
 80037b4:	1c5a      	adds	r2, r3, #1
 80037b6:	4b29      	ldr	r3, [pc, #164]	; (800385c <prvAddNewTaskToReadyList+0xb8>)
 80037b8:	601a      	str	r2, [r3, #0]
		if( pxCurrentTCB == NULL )
 80037ba:	4b29      	ldr	r3, [pc, #164]	; (8003860 <prvAddNewTaskToReadyList+0xbc>)
 80037bc:	681b      	ldr	r3, [r3, #0]
 80037be:	2b00      	cmp	r3, #0
 80037c0:	d109      	bne.n	80037d6 <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 80037c2:	4b27      	ldr	r3, [pc, #156]	; (8003860 <prvAddNewTaskToReadyList+0xbc>)
 80037c4:	687a      	ldr	r2, [r7, #4]
 80037c6:	601a      	str	r2, [r3, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 80037c8:	4b24      	ldr	r3, [pc, #144]	; (800385c <prvAddNewTaskToReadyList+0xb8>)
 80037ca:	681b      	ldr	r3, [r3, #0]
 80037cc:	2b01      	cmp	r3, #1
 80037ce:	d110      	bne.n	80037f2 <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 80037d0:	f001 f886 	bl	80048e0 <prvInitialiseTaskLists>
 80037d4:	e00d      	b.n	80037f2 <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 80037d6:	4b23      	ldr	r3, [pc, #140]	; (8003864 <prvAddNewTaskToReadyList+0xc0>)
 80037d8:	681b      	ldr	r3, [r3, #0]
 80037da:	2b00      	cmp	r3, #0
 80037dc:	d109      	bne.n	80037f2 <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 80037de:	4b20      	ldr	r3, [pc, #128]	; (8003860 <prvAddNewTaskToReadyList+0xbc>)
 80037e0:	681b      	ldr	r3, [r3, #0]
 80037e2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80037e4:	687b      	ldr	r3, [r7, #4]
 80037e6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80037e8:	429a      	cmp	r2, r3
 80037ea:	d802      	bhi.n	80037f2 <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 80037ec:	4b1c      	ldr	r3, [pc, #112]	; (8003860 <prvAddNewTaskToReadyList+0xbc>)
 80037ee:	687a      	ldr	r2, [r7, #4]
 80037f0:	601a      	str	r2, [r3, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 80037f2:	4b1d      	ldr	r3, [pc, #116]	; (8003868 <prvAddNewTaskToReadyList+0xc4>)
 80037f4:	681b      	ldr	r3, [r3, #0]
 80037f6:	1c5a      	adds	r2, r3, #1
 80037f8:	4b1b      	ldr	r3, [pc, #108]	; (8003868 <prvAddNewTaskToReadyList+0xc4>)
 80037fa:	601a      	str	r2, [r3, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 80037fc:	4b1a      	ldr	r3, [pc, #104]	; (8003868 <prvAddNewTaskToReadyList+0xc4>)
 80037fe:	681a      	ldr	r2, [r3, #0]
 8003800:	687b      	ldr	r3, [r7, #4]
 8003802:	63da      	str	r2, [r3, #60]	; 0x3c
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 8003804:	687b      	ldr	r3, [r7, #4]
 8003806:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003808:	4b18      	ldr	r3, [pc, #96]	; (800386c <prvAddNewTaskToReadyList+0xc8>)
 800380a:	681b      	ldr	r3, [r3, #0]
 800380c:	429a      	cmp	r2, r3
 800380e:	d903      	bls.n	8003818 <prvAddNewTaskToReadyList+0x74>
 8003810:	687b      	ldr	r3, [r7, #4]
 8003812:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003814:	4b15      	ldr	r3, [pc, #84]	; (800386c <prvAddNewTaskToReadyList+0xc8>)
 8003816:	601a      	str	r2, [r3, #0]
 8003818:	687b      	ldr	r3, [r7, #4]
 800381a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800381c:	0013      	movs	r3, r2
 800381e:	009b      	lsls	r3, r3, #2
 8003820:	189b      	adds	r3, r3, r2
 8003822:	009b      	lsls	r3, r3, #2
 8003824:	4a12      	ldr	r2, [pc, #72]	; (8003870 <prvAddNewTaskToReadyList+0xcc>)
 8003826:	189a      	adds	r2, r3, r2
 8003828:	687b      	ldr	r3, [r7, #4]
 800382a:	3304      	adds	r3, #4
 800382c:	0019      	movs	r1, r3
 800382e:	0010      	movs	r0, r2
 8003830:	f7fd fe73 	bl	800151a <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 8003834:	f7fd ffa4 	bl	8001780 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 8003838:	4b0a      	ldr	r3, [pc, #40]	; (8003864 <prvAddNewTaskToReadyList+0xc0>)
 800383a:	681b      	ldr	r3, [r3, #0]
 800383c:	2b00      	cmp	r3, #0
 800383e:	d008      	beq.n	8003852 <prvAddNewTaskToReadyList+0xae>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8003840:	4b07      	ldr	r3, [pc, #28]	; (8003860 <prvAddNewTaskToReadyList+0xbc>)
 8003842:	681b      	ldr	r3, [r3, #0]
 8003844:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003846:	687b      	ldr	r3, [r7, #4]
 8003848:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800384a:	429a      	cmp	r2, r3
 800384c:	d201      	bcs.n	8003852 <prvAddNewTaskToReadyList+0xae>
		{
			taskYIELD_IF_USING_PREEMPTION();
 800384e:	f7fd ff75 	bl	800173c <vPortYield>
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8003852:	46c0      	nop			; (mov r8, r8)
 8003854:	46bd      	mov	sp, r7
 8003856:	b002      	add	sp, #8
 8003858:	bd80      	pop	{r7, pc}
 800385a:	46c0      	nop			; (mov r8, r8)
 800385c:	20000d70 	.word	0x20000d70
 8003860:	20000c98 	.word	0x20000c98
 8003864:	20000d7c 	.word	0x20000d7c
 8003868:	20000d8c 	.word	0x20000d8c
 800386c:	20000d78 	.word	0x20000d78
 8003870:	20000c9c 	.word	0x20000c9c

08003874 <vTaskDelete>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	void vTaskDelete( TaskHandle_t xTaskToDelete )
	{
 8003874:	b580      	push	{r7, lr}
 8003876:	b084      	sub	sp, #16
 8003878:	af00      	add	r7, sp, #0
 800387a:	6078      	str	r0, [r7, #4]
	TCB_t *pxTCB;

		taskENTER_CRITICAL();
 800387c:	f7fd ff6e 	bl	800175c <vPortEnterCritical>
		{
			/* If null is passed in here then it is the calling task that is
			being deleted. */
			pxTCB = prvGetTCBFromHandle( xTaskToDelete );
 8003880:	687b      	ldr	r3, [r7, #4]
 8003882:	2b00      	cmp	r3, #0
 8003884:	d102      	bne.n	800388c <vTaskDelete+0x18>
 8003886:	4b26      	ldr	r3, [pc, #152]	; (8003920 <vTaskDelete+0xac>)
 8003888:	681b      	ldr	r3, [r3, #0]
 800388a:	e000      	b.n	800388e <vTaskDelete+0x1a>
 800388c:	687b      	ldr	r3, [r7, #4]
 800388e:	60fb      	str	r3, [r7, #12]

			/* Remove task from the ready/delayed list. */
			if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8003890:	68fb      	ldr	r3, [r7, #12]
 8003892:	3304      	adds	r3, #4
 8003894:	0018      	movs	r0, r3
 8003896:	f7fd fe98 	bl	80015ca <uxListRemove>
			{
				mtCOVERAGE_TEST_MARKER();
			}

			/* Is the task waiting on an event also? */
			if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 800389a:	68fb      	ldr	r3, [r7, #12]
 800389c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800389e:	2b00      	cmp	r3, #0
 80038a0:	d004      	beq.n	80038ac <vTaskDelete+0x38>
			{
				( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 80038a2:	68fb      	ldr	r3, [r7, #12]
 80038a4:	3318      	adds	r3, #24
 80038a6:	0018      	movs	r0, r3
 80038a8:	f7fd fe8f 	bl	80015ca <uxListRemove>

			/* Increment the uxTaskNumber also so kernel aware debuggers can
			detect that the task lists need re-generating.  This is done before
			portPRE_TASK_DELETE_HOOK() as in the Windows port that macro will
			not return. */
			uxTaskNumber++;
 80038ac:	4b1d      	ldr	r3, [pc, #116]	; (8003924 <vTaskDelete+0xb0>)
 80038ae:	681b      	ldr	r3, [r3, #0]
 80038b0:	1c5a      	adds	r2, r3, #1
 80038b2:	4b1c      	ldr	r3, [pc, #112]	; (8003924 <vTaskDelete+0xb0>)
 80038b4:	601a      	str	r2, [r3, #0]

			if( pxTCB == pxCurrentTCB )
 80038b6:	4b1a      	ldr	r3, [pc, #104]	; (8003920 <vTaskDelete+0xac>)
 80038b8:	681b      	ldr	r3, [r3, #0]
 80038ba:	68fa      	ldr	r2, [r7, #12]
 80038bc:	429a      	cmp	r2, r3
 80038be:	d10c      	bne.n	80038da <vTaskDelete+0x66>
				/* A task is deleting itself.  This cannot complete within the
				task itself, as a context switch to another task is required.
				Place the task in the termination list.  The idle task will
				check the termination list and free up any memory allocated by
				the scheduler for the TCB and stack of the deleted task. */
				vListInsertEnd( &xTasksWaitingTermination, &( pxTCB->xStateListItem ) );
 80038c0:	68fb      	ldr	r3, [r7, #12]
 80038c2:	1d1a      	adds	r2, r3, #4
 80038c4:	4b18      	ldr	r3, [pc, #96]	; (8003928 <vTaskDelete+0xb4>)
 80038c6:	0011      	movs	r1, r2
 80038c8:	0018      	movs	r0, r3
 80038ca:	f7fd fe26 	bl	800151a <vListInsertEnd>

				/* Increment the ucTasksDeleted variable so the idle task knows
				there is a task that has been deleted and that it should therefore
				check the xTasksWaitingTermination list. */
				++uxDeletedTasksWaitingCleanUp;
 80038ce:	4b17      	ldr	r3, [pc, #92]	; (800392c <vTaskDelete+0xb8>)
 80038d0:	681b      	ldr	r3, [r3, #0]
 80038d2:	1c5a      	adds	r2, r3, #1
 80038d4:	4b15      	ldr	r3, [pc, #84]	; (800392c <vTaskDelete+0xb8>)
 80038d6:	601a      	str	r2, [r3, #0]
 80038d8:	e00a      	b.n	80038f0 <vTaskDelete+0x7c>
				required. */
				portPRE_TASK_DELETE_HOOK( pxTCB, &xYieldPending );
			}
			else
			{
				--uxCurrentNumberOfTasks;
 80038da:	4b15      	ldr	r3, [pc, #84]	; (8003930 <vTaskDelete+0xbc>)
 80038dc:	681b      	ldr	r3, [r3, #0]
 80038de:	1e5a      	subs	r2, r3, #1
 80038e0:	4b13      	ldr	r3, [pc, #76]	; (8003930 <vTaskDelete+0xbc>)
 80038e2:	601a      	str	r2, [r3, #0]
				traceTASK_DELETE( pxTCB );
				prvDeleteTCB( pxTCB );
 80038e4:	68fb      	ldr	r3, [r7, #12]
 80038e6:	0018      	movs	r0, r3
 80038e8:	f001 f945 	bl	8004b76 <prvDeleteTCB>

				/* Reset the next expected unblock time in case it referred to
				the task that has just been deleted. */
				prvResetNextTaskUnblockTime();
 80038ec:	f001 f954 	bl	8004b98 <prvResetNextTaskUnblockTime>
			}
		}
		taskEXIT_CRITICAL();
 80038f0:	f7fd ff46 	bl	8001780 <vPortExitCritical>

		/* Force a reschedule if it is the currently running task that has just
		been deleted. */
		if( xSchedulerRunning != pdFALSE )
 80038f4:	4b0f      	ldr	r3, [pc, #60]	; (8003934 <vTaskDelete+0xc0>)
 80038f6:	681b      	ldr	r3, [r3, #0]
 80038f8:	2b00      	cmp	r3, #0
 80038fa:	d00c      	beq.n	8003916 <vTaskDelete+0xa2>
		{
			if( pxTCB == pxCurrentTCB )
 80038fc:	4b08      	ldr	r3, [pc, #32]	; (8003920 <vTaskDelete+0xac>)
 80038fe:	681b      	ldr	r3, [r3, #0]
 8003900:	68fa      	ldr	r2, [r7, #12]
 8003902:	429a      	cmp	r2, r3
 8003904:	d107      	bne.n	8003916 <vTaskDelete+0xa2>
			{
				configASSERT( uxSchedulerSuspended == 0 );
 8003906:	4b0c      	ldr	r3, [pc, #48]	; (8003938 <vTaskDelete+0xc4>)
 8003908:	681b      	ldr	r3, [r3, #0]
 800390a:	2b00      	cmp	r3, #0
 800390c:	d001      	beq.n	8003912 <vTaskDelete+0x9e>
 800390e:	b672      	cpsid	i
 8003910:	e7fe      	b.n	8003910 <vTaskDelete+0x9c>
				portYIELD_WITHIN_API();
 8003912:	f7fd ff13 	bl	800173c <vPortYield>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 8003916:	46c0      	nop			; (mov r8, r8)
 8003918:	46bd      	mov	sp, r7
 800391a:	b004      	add	sp, #16
 800391c:	bd80      	pop	{r7, pc}
 800391e:	46c0      	nop			; (mov r8, r8)
 8003920:	20000c98 	.word	0x20000c98
 8003924:	20000d8c 	.word	0x20000d8c
 8003928:	20000d44 	.word	0x20000d44
 800392c:	20000d58 	.word	0x20000d58
 8003930:	20000d70 	.word	0x20000d70
 8003934:	20000d7c 	.word	0x20000d7c
 8003938:	20000d98 	.word	0x20000d98

0800393c <vTaskDelayUntil>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelayUntil == 1 )

	void vTaskDelayUntil( TickType_t * const pxPreviousWakeTime, const TickType_t xTimeIncrement )
	{
 800393c:	b580      	push	{r7, lr}
 800393e:	b086      	sub	sp, #24
 8003940:	af00      	add	r7, sp, #0
 8003942:	6078      	str	r0, [r7, #4]
 8003944:	6039      	str	r1, [r7, #0]
	TickType_t xTimeToWake;
	BaseType_t xAlreadyYielded, xShouldDelay = pdFALSE;
 8003946:	2300      	movs	r3, #0
 8003948:	617b      	str	r3, [r7, #20]

		configASSERT( pxPreviousWakeTime );
 800394a:	687b      	ldr	r3, [r7, #4]
 800394c:	2b00      	cmp	r3, #0
 800394e:	d101      	bne.n	8003954 <vTaskDelayUntil+0x18>
 8003950:	b672      	cpsid	i
 8003952:	e7fe      	b.n	8003952 <vTaskDelayUntil+0x16>
		configASSERT( ( xTimeIncrement > 0U ) );
 8003954:	683b      	ldr	r3, [r7, #0]
 8003956:	2b00      	cmp	r3, #0
 8003958:	d101      	bne.n	800395e <vTaskDelayUntil+0x22>
 800395a:	b672      	cpsid	i
 800395c:	e7fe      	b.n	800395c <vTaskDelayUntil+0x20>
		configASSERT( uxSchedulerSuspended == 0 );
 800395e:	4b23      	ldr	r3, [pc, #140]	; (80039ec <vTaskDelayUntil+0xb0>)
 8003960:	681b      	ldr	r3, [r3, #0]
 8003962:	2b00      	cmp	r3, #0
 8003964:	d001      	beq.n	800396a <vTaskDelayUntil+0x2e>
 8003966:	b672      	cpsid	i
 8003968:	e7fe      	b.n	8003968 <vTaskDelayUntil+0x2c>

		vTaskSuspendAll();
 800396a:	f000 fb1d 	bl	8003fa8 <vTaskSuspendAll>
		{
			/* Minor optimisation.  The tick count cannot change in this
			block. */
			const TickType_t xConstTickCount = xTickCount;
 800396e:	4b20      	ldr	r3, [pc, #128]	; (80039f0 <vTaskDelayUntil+0xb4>)
 8003970:	681b      	ldr	r3, [r3, #0]
 8003972:	613b      	str	r3, [r7, #16]

			/* Generate the tick time at which the task wants to wake. */
			xTimeToWake = *pxPreviousWakeTime + xTimeIncrement;
 8003974:	687b      	ldr	r3, [r7, #4]
 8003976:	681a      	ldr	r2, [r3, #0]
 8003978:	683b      	ldr	r3, [r7, #0]
 800397a:	18d3      	adds	r3, r2, r3
 800397c:	60fb      	str	r3, [r7, #12]

			if( xConstTickCount < *pxPreviousWakeTime )
 800397e:	687b      	ldr	r3, [r7, #4]
 8003980:	681a      	ldr	r2, [r3, #0]
 8003982:	693b      	ldr	r3, [r7, #16]
 8003984:	429a      	cmp	r2, r3
 8003986:	d90b      	bls.n	80039a0 <vTaskDelayUntil+0x64>
				/* The tick count has overflowed since this function was
				lasted called.  In this case the only time we should ever
				actually delay is if the wake time has also	overflowed,
				and the wake time is greater than the tick time.  When this
				is the case it is as if neither time had overflowed. */
				if( ( xTimeToWake < *pxPreviousWakeTime ) && ( xTimeToWake > xConstTickCount ) )
 8003988:	687b      	ldr	r3, [r7, #4]
 800398a:	681a      	ldr	r2, [r3, #0]
 800398c:	68fb      	ldr	r3, [r7, #12]
 800398e:	429a      	cmp	r2, r3
 8003990:	d911      	bls.n	80039b6 <vTaskDelayUntil+0x7a>
 8003992:	68fa      	ldr	r2, [r7, #12]
 8003994:	693b      	ldr	r3, [r7, #16]
 8003996:	429a      	cmp	r2, r3
 8003998:	d90d      	bls.n	80039b6 <vTaskDelayUntil+0x7a>
				{
					xShouldDelay = pdTRUE;
 800399a:	2301      	movs	r3, #1
 800399c:	617b      	str	r3, [r7, #20]
 800399e:	e00a      	b.n	80039b6 <vTaskDelayUntil+0x7a>
			else
			{
				/* The tick time has not overflowed.  In this case we will
				delay if either the wake time has overflowed, and/or the
				tick time is less than the wake time. */
				if( ( xTimeToWake < *pxPreviousWakeTime ) || ( xTimeToWake > xConstTickCount ) )
 80039a0:	687b      	ldr	r3, [r7, #4]
 80039a2:	681a      	ldr	r2, [r3, #0]
 80039a4:	68fb      	ldr	r3, [r7, #12]
 80039a6:	429a      	cmp	r2, r3
 80039a8:	d803      	bhi.n	80039b2 <vTaskDelayUntil+0x76>
 80039aa:	68fa      	ldr	r2, [r7, #12]
 80039ac:	693b      	ldr	r3, [r7, #16]
 80039ae:	429a      	cmp	r2, r3
 80039b0:	d901      	bls.n	80039b6 <vTaskDelayUntil+0x7a>
				{
					xShouldDelay = pdTRUE;
 80039b2:	2301      	movs	r3, #1
 80039b4:	617b      	str	r3, [r7, #20]
					mtCOVERAGE_TEST_MARKER();
				}
			}

			/* Update the wake time ready for the next call. */
			*pxPreviousWakeTime = xTimeToWake;
 80039b6:	687b      	ldr	r3, [r7, #4]
 80039b8:	68fa      	ldr	r2, [r7, #12]
 80039ba:	601a      	str	r2, [r3, #0]

			if( xShouldDelay != pdFALSE )
 80039bc:	697b      	ldr	r3, [r7, #20]
 80039be:	2b00      	cmp	r3, #0
 80039c0:	d006      	beq.n	80039d0 <vTaskDelayUntil+0x94>
			{
				traceTASK_DELAY_UNTIL( xTimeToWake );

				/* prvAddCurrentTaskToDelayedList() needs the block time, not
				the time to wake, so subtract the current tick count. */
				prvAddCurrentTaskToDelayedList( xTimeToWake - xConstTickCount, pdFALSE );
 80039c2:	68fa      	ldr	r2, [r7, #12]
 80039c4:	693b      	ldr	r3, [r7, #16]
 80039c6:	1ad3      	subs	r3, r2, r3
 80039c8:	2100      	movs	r1, #0
 80039ca:	0018      	movs	r0, r3
 80039cc:	f001 fd26 	bl	800541c <prvAddCurrentTaskToDelayedList>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
		xAlreadyYielded = xTaskResumeAll();
 80039d0:	f000 faf6 	bl	8003fc0 <xTaskResumeAll>
 80039d4:	0003      	movs	r3, r0
 80039d6:	60bb      	str	r3, [r7, #8]

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 80039d8:	68bb      	ldr	r3, [r7, #8]
 80039da:	2b00      	cmp	r3, #0
 80039dc:	d101      	bne.n	80039e2 <vTaskDelayUntil+0xa6>
		{
			portYIELD_WITHIN_API();
 80039de:	f7fd fead 	bl	800173c <vPortYield>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 80039e2:	46c0      	nop			; (mov r8, r8)
 80039e4:	46bd      	mov	sp, r7
 80039e6:	b006      	add	sp, #24
 80039e8:	bd80      	pop	{r7, pc}
 80039ea:	46c0      	nop			; (mov r8, r8)
 80039ec:	20000d98 	.word	0x20000d98
 80039f0:	20000d74 	.word	0x20000d74

080039f4 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 80039f4:	b580      	push	{r7, lr}
 80039f6:	b084      	sub	sp, #16
 80039f8:	af00      	add	r7, sp, #0
 80039fa:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 80039fc:	2300      	movs	r3, #0
 80039fe:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 8003a00:	687b      	ldr	r3, [r7, #4]
 8003a02:	2b00      	cmp	r3, #0
 8003a04:	d010      	beq.n	8003a28 <vTaskDelay+0x34>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 8003a06:	4b0d      	ldr	r3, [pc, #52]	; (8003a3c <vTaskDelay+0x48>)
 8003a08:	681b      	ldr	r3, [r3, #0]
 8003a0a:	2b00      	cmp	r3, #0
 8003a0c:	d001      	beq.n	8003a12 <vTaskDelay+0x1e>
 8003a0e:	b672      	cpsid	i
 8003a10:	e7fe      	b.n	8003a10 <vTaskDelay+0x1c>
			vTaskSuspendAll();
 8003a12:	f000 fac9 	bl	8003fa8 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 8003a16:	687b      	ldr	r3, [r7, #4]
 8003a18:	2100      	movs	r1, #0
 8003a1a:	0018      	movs	r0, r3
 8003a1c:	f001 fcfe 	bl	800541c <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 8003a20:	f000 face 	bl	8003fc0 <xTaskResumeAll>
 8003a24:	0003      	movs	r3, r0
 8003a26:	60fb      	str	r3, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 8003a28:	68fb      	ldr	r3, [r7, #12]
 8003a2a:	2b00      	cmp	r3, #0
 8003a2c:	d101      	bne.n	8003a32 <vTaskDelay+0x3e>
		{
			portYIELD_WITHIN_API();
 8003a2e:	f7fd fe85 	bl	800173c <vPortYield>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8003a32:	46c0      	nop			; (mov r8, r8)
 8003a34:	46bd      	mov	sp, r7
 8003a36:	b004      	add	sp, #16
 8003a38:	bd80      	pop	{r7, pc}
 8003a3a:	46c0      	nop			; (mov r8, r8)
 8003a3c:	20000d98 	.word	0x20000d98

08003a40 <eTaskGetState>:
/*-----------------------------------------------------------*/

#if( ( INCLUDE_eTaskGetState == 1 ) || ( configUSE_TRACE_FACILITY == 1 ) || ( INCLUDE_xTaskAbortDelay == 1 ) )

	eTaskState eTaskGetState( TaskHandle_t xTask )
	{
 8003a40:	b580      	push	{r7, lr}
 8003a42:	b088      	sub	sp, #32
 8003a44:	af00      	add	r7, sp, #0
 8003a46:	6078      	str	r0, [r7, #4]
	eTaskState eReturn;
	List_t const * pxStateList, *pxDelayedList, *pxOverflowedDelayedList;
	const TCB_t * const pxTCB = xTask;
 8003a48:	687b      	ldr	r3, [r7, #4]
 8003a4a:	61bb      	str	r3, [r7, #24]

		configASSERT( pxTCB );
 8003a4c:	69bb      	ldr	r3, [r7, #24]
 8003a4e:	2b00      	cmp	r3, #0
 8003a50:	d101      	bne.n	8003a56 <eTaskGetState+0x16>
 8003a52:	b672      	cpsid	i
 8003a54:	e7fe      	b.n	8003a54 <eTaskGetState+0x14>

		if( pxTCB == pxCurrentTCB )
 8003a56:	4b2c      	ldr	r3, [pc, #176]	; (8003b08 <eTaskGetState+0xc8>)
 8003a58:	681b      	ldr	r3, [r3, #0]
 8003a5a:	69ba      	ldr	r2, [r7, #24]
 8003a5c:	429a      	cmp	r2, r3
 8003a5e:	d104      	bne.n	8003a6a <eTaskGetState+0x2a>
		{
			/* The task calling this function is querying its own state. */
			eReturn = eRunning;
 8003a60:	231f      	movs	r3, #31
 8003a62:	18fb      	adds	r3, r7, r3
 8003a64:	2200      	movs	r2, #0
 8003a66:	701a      	strb	r2, [r3, #0]
 8003a68:	e046      	b.n	8003af8 <eTaskGetState+0xb8>
		}
		else
		{
			taskENTER_CRITICAL();
 8003a6a:	f7fd fe77 	bl	800175c <vPortEnterCritical>
			{
				pxStateList = listLIST_ITEM_CONTAINER( &( pxTCB->xStateListItem ) );
 8003a6e:	69bb      	ldr	r3, [r7, #24]
 8003a70:	695b      	ldr	r3, [r3, #20]
 8003a72:	617b      	str	r3, [r7, #20]
				pxDelayedList = pxDelayedTaskList;
 8003a74:	4b25      	ldr	r3, [pc, #148]	; (8003b0c <eTaskGetState+0xcc>)
 8003a76:	681b      	ldr	r3, [r3, #0]
 8003a78:	613b      	str	r3, [r7, #16]
				pxOverflowedDelayedList = pxOverflowDelayedTaskList;
 8003a7a:	4b25      	ldr	r3, [pc, #148]	; (8003b10 <eTaskGetState+0xd0>)
 8003a7c:	681b      	ldr	r3, [r3, #0]
 8003a7e:	60fb      	str	r3, [r7, #12]
			}
			taskEXIT_CRITICAL();
 8003a80:	f7fd fe7e 	bl	8001780 <vPortExitCritical>

			if( ( pxStateList == pxDelayedList ) || ( pxStateList == pxOverflowedDelayedList ) )
 8003a84:	697a      	ldr	r2, [r7, #20]
 8003a86:	693b      	ldr	r3, [r7, #16]
 8003a88:	429a      	cmp	r2, r3
 8003a8a:	d003      	beq.n	8003a94 <eTaskGetState+0x54>
 8003a8c:	697a      	ldr	r2, [r7, #20]
 8003a8e:	68fb      	ldr	r3, [r7, #12]
 8003a90:	429a      	cmp	r2, r3
 8003a92:	d104      	bne.n	8003a9e <eTaskGetState+0x5e>
			{
				/* The task being queried is referenced from one of the Blocked
				lists. */
				eReturn = eBlocked;
 8003a94:	231f      	movs	r3, #31
 8003a96:	18fb      	adds	r3, r7, r3
 8003a98:	2202      	movs	r2, #2
 8003a9a:	701a      	strb	r2, [r3, #0]
 8003a9c:	e02c      	b.n	8003af8 <eTaskGetState+0xb8>
			}

			#if ( INCLUDE_vTaskSuspend == 1 )
				else if( pxStateList == &xSuspendedTaskList )
 8003a9e:	697a      	ldr	r2, [r7, #20]
 8003aa0:	4b1c      	ldr	r3, [pc, #112]	; (8003b14 <eTaskGetState+0xd4>)
 8003aa2:	429a      	cmp	r2, r3
 8003aa4:	d118      	bne.n	8003ad8 <eTaskGetState+0x98>
				{
					/* The task being queried is referenced from the suspended
					list.  Is it genuinely suspended or is it blocked
					indefinitely? */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) == NULL )
 8003aa6:	69bb      	ldr	r3, [r7, #24]
 8003aa8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003aaa:	2b00      	cmp	r3, #0
 8003aac:	d10f      	bne.n	8003ace <eTaskGetState+0x8e>
						{
							/* The task does not appear on the event list item of
							and of the RTOS objects, but could still be in the
							blocked state if it is waiting on its notification
							rather than waiting on an object. */
							if( pxTCB->ucNotifyState == taskWAITING_NOTIFICATION )
 8003aae:	69bb      	ldr	r3, [r7, #24]
 8003ab0:	2250      	movs	r2, #80	; 0x50
 8003ab2:	5c9b      	ldrb	r3, [r3, r2]
 8003ab4:	b2db      	uxtb	r3, r3
 8003ab6:	2b01      	cmp	r3, #1
 8003ab8:	d104      	bne.n	8003ac4 <eTaskGetState+0x84>
							{
								eReturn = eBlocked;
 8003aba:	231f      	movs	r3, #31
 8003abc:	18fb      	adds	r3, r7, r3
 8003abe:	2202      	movs	r2, #2
 8003ac0:	701a      	strb	r2, [r3, #0]
 8003ac2:	e019      	b.n	8003af8 <eTaskGetState+0xb8>
							}
							else
							{
								eReturn = eSuspended;
 8003ac4:	231f      	movs	r3, #31
 8003ac6:	18fb      	adds	r3, r7, r3
 8003ac8:	2203      	movs	r2, #3
 8003aca:	701a      	strb	r2, [r3, #0]
 8003acc:	e014      	b.n	8003af8 <eTaskGetState+0xb8>
						}
						#endif
					}
					else
					{
						eReturn = eBlocked;
 8003ace:	231f      	movs	r3, #31
 8003ad0:	18fb      	adds	r3, r7, r3
 8003ad2:	2202      	movs	r2, #2
 8003ad4:	701a      	strb	r2, [r3, #0]
 8003ad6:	e00f      	b.n	8003af8 <eTaskGetState+0xb8>
					}
				}
			#endif

			#if ( INCLUDE_vTaskDelete == 1 )
				else if( ( pxStateList == &xTasksWaitingTermination ) || ( pxStateList == NULL ) )
 8003ad8:	697a      	ldr	r2, [r7, #20]
 8003ada:	4b0f      	ldr	r3, [pc, #60]	; (8003b18 <eTaskGetState+0xd8>)
 8003adc:	429a      	cmp	r2, r3
 8003ade:	d002      	beq.n	8003ae6 <eTaskGetState+0xa6>
 8003ae0:	697b      	ldr	r3, [r7, #20]
 8003ae2:	2b00      	cmp	r3, #0
 8003ae4:	d104      	bne.n	8003af0 <eTaskGetState+0xb0>
				{
					/* The task being queried is referenced from the deleted
					tasks list, or it is not referenced from any lists at
					all. */
					eReturn = eDeleted;
 8003ae6:	231f      	movs	r3, #31
 8003ae8:	18fb      	adds	r3, r7, r3
 8003aea:	2204      	movs	r2, #4
 8003aec:	701a      	strb	r2, [r3, #0]
 8003aee:	e003      	b.n	8003af8 <eTaskGetState+0xb8>

			else /*lint !e525 Negative indentation is intended to make use of pre-processor clearer. */
			{
				/* If the task is not in any other state, it must be in the
				Ready (including pending ready) state. */
				eReturn = eReady;
 8003af0:	231f      	movs	r3, #31
 8003af2:	18fb      	adds	r3, r7, r3
 8003af4:	2201      	movs	r2, #1
 8003af6:	701a      	strb	r2, [r3, #0]
			}
		}

		return eReturn;
 8003af8:	231f      	movs	r3, #31
 8003afa:	18fb      	adds	r3, r7, r3
 8003afc:	781b      	ldrb	r3, [r3, #0]
	} /*lint !e818 xTask cannot be a pointer to const because it is a typedef. */
 8003afe:	0018      	movs	r0, r3
 8003b00:	46bd      	mov	sp, r7
 8003b02:	b008      	add	sp, #32
 8003b04:	bd80      	pop	{r7, pc}
 8003b06:	46c0      	nop			; (mov r8, r8)
 8003b08:	20000c98 	.word	0x20000c98
 8003b0c:	20000d28 	.word	0x20000d28
 8003b10:	20000d2c 	.word	0x20000d2c
 8003b14:	20000d5c 	.word	0x20000d5c
 8003b18:	20000d44 	.word	0x20000d44

08003b1c <uxTaskPriorityGet>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_uxTaskPriorityGet == 1 )

	UBaseType_t uxTaskPriorityGet( const TaskHandle_t xTask )
	{
 8003b1c:	b580      	push	{r7, lr}
 8003b1e:	b084      	sub	sp, #16
 8003b20:	af00      	add	r7, sp, #0
 8003b22:	6078      	str	r0, [r7, #4]
	TCB_t const *pxTCB;
	UBaseType_t uxReturn;

		taskENTER_CRITICAL();
 8003b24:	f7fd fe1a 	bl	800175c <vPortEnterCritical>
		{
			/* If null is passed in here then it is the priority of the task
			that called uxTaskPriorityGet() that is being queried. */
			pxTCB = prvGetTCBFromHandle( xTask );
 8003b28:	687b      	ldr	r3, [r7, #4]
 8003b2a:	2b00      	cmp	r3, #0
 8003b2c:	d102      	bne.n	8003b34 <uxTaskPriorityGet+0x18>
 8003b2e:	4b07      	ldr	r3, [pc, #28]	; (8003b4c <uxTaskPriorityGet+0x30>)
 8003b30:	681b      	ldr	r3, [r3, #0]
 8003b32:	e000      	b.n	8003b36 <uxTaskPriorityGet+0x1a>
 8003b34:	687b      	ldr	r3, [r7, #4]
 8003b36:	60fb      	str	r3, [r7, #12]
			uxReturn = pxTCB->uxPriority;
 8003b38:	68fb      	ldr	r3, [r7, #12]
 8003b3a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003b3c:	60bb      	str	r3, [r7, #8]
		}
		taskEXIT_CRITICAL();
 8003b3e:	f7fd fe1f 	bl	8001780 <vPortExitCritical>

		return uxReturn;
 8003b42:	68bb      	ldr	r3, [r7, #8]
	}
 8003b44:	0018      	movs	r0, r3
 8003b46:	46bd      	mov	sp, r7
 8003b48:	b004      	add	sp, #16
 8003b4a:	bd80      	pop	{r7, pc}
 8003b4c:	20000c98 	.word	0x20000c98

08003b50 <uxTaskPriorityGetFromISR>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_uxTaskPriorityGet == 1 )

	UBaseType_t uxTaskPriorityGetFromISR( const TaskHandle_t xTask )
	{
 8003b50:	b580      	push	{r7, lr}
 8003b52:	b086      	sub	sp, #24
 8003b54:	af00      	add	r7, sp, #0
 8003b56:	6078      	str	r0, [r7, #4]
		simple as possible.  More information (albeit Cortex-M specific) is
		provided on the following link:
		https://www.freertos.org/RTOS-Cortex-M3-M4.html */
		portASSERT_IF_INTERRUPT_PRIORITY_INVALID();

		uxSavedInterruptState = portSET_INTERRUPT_MASK_FROM_ISR();
 8003b58:	f7fd fe2a 	bl	80017b0 <ulSetInterruptMaskFromISR>
 8003b5c:	0003      	movs	r3, r0
 8003b5e:	617b      	str	r3, [r7, #20]
		{
			/* If null is passed in here then it is the priority of the calling
			task that is being queried. */
			pxTCB = prvGetTCBFromHandle( xTask );
 8003b60:	687b      	ldr	r3, [r7, #4]
 8003b62:	2b00      	cmp	r3, #0
 8003b64:	d102      	bne.n	8003b6c <uxTaskPriorityGetFromISR+0x1c>
 8003b66:	4b08      	ldr	r3, [pc, #32]	; (8003b88 <uxTaskPriorityGetFromISR+0x38>)
 8003b68:	681b      	ldr	r3, [r3, #0]
 8003b6a:	e000      	b.n	8003b6e <uxTaskPriorityGetFromISR+0x1e>
 8003b6c:	687b      	ldr	r3, [r7, #4]
 8003b6e:	613b      	str	r3, [r7, #16]
			uxReturn = pxTCB->uxPriority;
 8003b70:	693b      	ldr	r3, [r7, #16]
 8003b72:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003b74:	60fb      	str	r3, [r7, #12]
		}
		portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptState );
 8003b76:	697b      	ldr	r3, [r7, #20]
 8003b78:	0018      	movs	r0, r3
 8003b7a:	f7fd fe1f 	bl	80017bc <vClearInterruptMaskFromISR>

		return uxReturn;
 8003b7e:	68fb      	ldr	r3, [r7, #12]
	}
 8003b80:	0018      	movs	r0, r3
 8003b82:	46bd      	mov	sp, r7
 8003b84:	b006      	add	sp, #24
 8003b86:	bd80      	pop	{r7, pc}
 8003b88:	20000c98 	.word	0x20000c98

08003b8c <vTaskPrioritySet>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskPrioritySet == 1 )

	void vTaskPrioritySet( TaskHandle_t xTask, UBaseType_t uxNewPriority )
	{
 8003b8c:	b580      	push	{r7, lr}
 8003b8e:	b086      	sub	sp, #24
 8003b90:	af00      	add	r7, sp, #0
 8003b92:	6078      	str	r0, [r7, #4]
 8003b94:	6039      	str	r1, [r7, #0]
	TCB_t *pxTCB;
	UBaseType_t uxCurrentBasePriority, uxPriorityUsedOnEntry;
	BaseType_t xYieldRequired = pdFALSE;
 8003b96:	2300      	movs	r3, #0
 8003b98:	617b      	str	r3, [r7, #20]

		configASSERT( ( uxNewPriority < configMAX_PRIORITIES ) );
 8003b9a:	683b      	ldr	r3, [r7, #0]
 8003b9c:	2b04      	cmp	r3, #4
 8003b9e:	d901      	bls.n	8003ba4 <vTaskPrioritySet+0x18>
 8003ba0:	b672      	cpsid	i
 8003ba2:	e7fe      	b.n	8003ba2 <vTaskPrioritySet+0x16>

		/* Ensure the new priority is valid. */
		if( uxNewPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8003ba4:	683b      	ldr	r3, [r7, #0]
 8003ba6:	2b04      	cmp	r3, #4
 8003ba8:	d901      	bls.n	8003bae <vTaskPrioritySet+0x22>
		{
			uxNewPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8003baa:	2304      	movs	r3, #4
 8003bac:	603b      	str	r3, [r7, #0]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		taskENTER_CRITICAL();
 8003bae:	f7fd fdd5 	bl	800175c <vPortEnterCritical>
		{
			/* If null is passed in here then it is the priority of the calling
			task that is being changed. */
			pxTCB = prvGetTCBFromHandle( xTask );
 8003bb2:	687b      	ldr	r3, [r7, #4]
 8003bb4:	2b00      	cmp	r3, #0
 8003bb6:	d102      	bne.n	8003bbe <vTaskPrioritySet+0x32>
 8003bb8:	4b37      	ldr	r3, [pc, #220]	; (8003c98 <vTaskPrioritySet+0x10c>)
 8003bba:	681b      	ldr	r3, [r3, #0]
 8003bbc:	e000      	b.n	8003bc0 <vTaskPrioritySet+0x34>
 8003bbe:	687b      	ldr	r3, [r7, #4]
 8003bc0:	613b      	str	r3, [r7, #16]

			traceTASK_PRIORITY_SET( pxTCB, uxNewPriority );

			#if ( configUSE_MUTEXES == 1 )
			{
				uxCurrentBasePriority = pxTCB->uxBasePriority;
 8003bc2:	693b      	ldr	r3, [r7, #16]
 8003bc4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003bc6:	60fb      	str	r3, [r7, #12]
			{
				uxCurrentBasePriority = pxTCB->uxPriority;
			}
			#endif

			if( uxCurrentBasePriority != uxNewPriority )
 8003bc8:	68fa      	ldr	r2, [r7, #12]
 8003bca:	683b      	ldr	r3, [r7, #0]
 8003bcc:	429a      	cmp	r2, r3
 8003bce:	d05d      	beq.n	8003c8c <vTaskPrioritySet+0x100>
			{
				/* The priority change may have readied a task of higher
				priority than the calling task. */
				if( uxNewPriority > uxCurrentBasePriority )
 8003bd0:	683a      	ldr	r2, [r7, #0]
 8003bd2:	68fb      	ldr	r3, [r7, #12]
 8003bd4:	429a      	cmp	r2, r3
 8003bd6:	d90d      	bls.n	8003bf4 <vTaskPrioritySet+0x68>
				{
					if( pxTCB != pxCurrentTCB )
 8003bd8:	4b2f      	ldr	r3, [pc, #188]	; (8003c98 <vTaskPrioritySet+0x10c>)
 8003bda:	681b      	ldr	r3, [r3, #0]
 8003bdc:	693a      	ldr	r2, [r7, #16]
 8003bde:	429a      	cmp	r2, r3
 8003be0:	d00f      	beq.n	8003c02 <vTaskPrioritySet+0x76>
					{
						/* The priority of a task other than the currently
						running task is being raised.  Is the priority being
						raised above that of the running task? */
						if( uxNewPriority >= pxCurrentTCB->uxPriority )
 8003be2:	4b2d      	ldr	r3, [pc, #180]	; (8003c98 <vTaskPrioritySet+0x10c>)
 8003be4:	681b      	ldr	r3, [r3, #0]
 8003be6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003be8:	683b      	ldr	r3, [r7, #0]
 8003bea:	429a      	cmp	r2, r3
 8003bec:	d809      	bhi.n	8003c02 <vTaskPrioritySet+0x76>
						{
							xYieldRequired = pdTRUE;
 8003bee:	2301      	movs	r3, #1
 8003bf0:	617b      	str	r3, [r7, #20]
 8003bf2:	e006      	b.n	8003c02 <vTaskPrioritySet+0x76>
						/* The priority of the running task is being raised,
						but the running task must already be the highest
						priority task able to run so no yield is required. */
					}
				}
				else if( pxTCB == pxCurrentTCB )
 8003bf4:	4b28      	ldr	r3, [pc, #160]	; (8003c98 <vTaskPrioritySet+0x10c>)
 8003bf6:	681b      	ldr	r3, [r3, #0]
 8003bf8:	693a      	ldr	r2, [r7, #16]
 8003bfa:	429a      	cmp	r2, r3
 8003bfc:	d101      	bne.n	8003c02 <vTaskPrioritySet+0x76>
				{
					/* Setting the priority of the running task down means
					there may now be another task of higher priority that
					is ready to execute. */
					xYieldRequired = pdTRUE;
 8003bfe:	2301      	movs	r3, #1
 8003c00:	617b      	str	r3, [r7, #20]
				}

				/* Remember the ready list the task might be referenced from
				before its uxPriority member is changed so the
				taskRESET_READY_PRIORITY() macro can function correctly. */
				uxPriorityUsedOnEntry = pxTCB->uxPriority;
 8003c02:	693b      	ldr	r3, [r7, #16]
 8003c04:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003c06:	60bb      	str	r3, [r7, #8]

				#if ( configUSE_MUTEXES == 1 )
				{
					/* Only change the priority being used if the task is not
					currently using an inherited priority. */
					if( pxTCB->uxBasePriority == pxTCB->uxPriority )
 8003c08:	693b      	ldr	r3, [r7, #16]
 8003c0a:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8003c0c:	693b      	ldr	r3, [r7, #16]
 8003c0e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003c10:	429a      	cmp	r2, r3
 8003c12:	d102      	bne.n	8003c1a <vTaskPrioritySet+0x8e>
					{
						pxTCB->uxPriority = uxNewPriority;
 8003c14:	693b      	ldr	r3, [r7, #16]
 8003c16:	683a      	ldr	r2, [r7, #0]
 8003c18:	62da      	str	r2, [r3, #44]	; 0x2c
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* The base priority gets set whatever. */
					pxTCB->uxBasePriority = uxNewPriority;
 8003c1a:	693b      	ldr	r3, [r7, #16]
 8003c1c:	683a      	ldr	r2, [r7, #0]
 8003c1e:	645a      	str	r2, [r3, #68]	; 0x44
				}
				#endif

				/* Only reset the event list item value if the value is not
				being used for anything else. */
				if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 8003c20:	693b      	ldr	r3, [r7, #16]
 8003c22:	699b      	ldr	r3, [r3, #24]
 8003c24:	2b00      	cmp	r3, #0
 8003c26:	db04      	blt.n	8003c32 <vTaskPrioritySet+0xa6>
				{
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxNewPriority ) ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8003c28:	683b      	ldr	r3, [r7, #0]
 8003c2a:	2205      	movs	r2, #5
 8003c2c:	1ad2      	subs	r2, r2, r3
 8003c2e:	693b      	ldr	r3, [r7, #16]
 8003c30:	619a      	str	r2, [r3, #24]

				/* If the task is in the blocked or suspended list we need do
				nothing more than change its priority variable. However, if
				the task is in a ready list it needs to be removed and placed
				in the list appropriate to its new priority. */
				if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ uxPriorityUsedOnEntry ] ), &( pxTCB->xStateListItem ) ) != pdFALSE )
 8003c32:	693b      	ldr	r3, [r7, #16]
 8003c34:	6959      	ldr	r1, [r3, #20]
 8003c36:	68ba      	ldr	r2, [r7, #8]
 8003c38:	0013      	movs	r3, r2
 8003c3a:	009b      	lsls	r3, r3, #2
 8003c3c:	189b      	adds	r3, r3, r2
 8003c3e:	009b      	lsls	r3, r3, #2
 8003c40:	4a16      	ldr	r2, [pc, #88]	; (8003c9c <vTaskPrioritySet+0x110>)
 8003c42:	189b      	adds	r3, r3, r2
 8003c44:	4299      	cmp	r1, r3
 8003c46:	d11c      	bne.n	8003c82 <vTaskPrioritySet+0xf6>
				{
					/* The task is currently in its ready list - remove before
					adding it to it's new ready list.  As we are in a critical
					section we can do this even if the scheduler is suspended. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8003c48:	693b      	ldr	r3, [r7, #16]
 8003c4a:	3304      	adds	r3, #4
 8003c4c:	0018      	movs	r0, r3
 8003c4e:	f7fd fcbc 	bl	80015ca <uxListRemove>
					}
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}
					prvAddTaskToReadyList( pxTCB );
 8003c52:	693b      	ldr	r3, [r7, #16]
 8003c54:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003c56:	4b12      	ldr	r3, [pc, #72]	; (8003ca0 <vTaskPrioritySet+0x114>)
 8003c58:	681b      	ldr	r3, [r3, #0]
 8003c5a:	429a      	cmp	r2, r3
 8003c5c:	d903      	bls.n	8003c66 <vTaskPrioritySet+0xda>
 8003c5e:	693b      	ldr	r3, [r7, #16]
 8003c60:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003c62:	4b0f      	ldr	r3, [pc, #60]	; (8003ca0 <vTaskPrioritySet+0x114>)
 8003c64:	601a      	str	r2, [r3, #0]
 8003c66:	693b      	ldr	r3, [r7, #16]
 8003c68:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003c6a:	0013      	movs	r3, r2
 8003c6c:	009b      	lsls	r3, r3, #2
 8003c6e:	189b      	adds	r3, r3, r2
 8003c70:	009b      	lsls	r3, r3, #2
 8003c72:	4a0a      	ldr	r2, [pc, #40]	; (8003c9c <vTaskPrioritySet+0x110>)
 8003c74:	189a      	adds	r2, r3, r2
 8003c76:	693b      	ldr	r3, [r7, #16]
 8003c78:	3304      	adds	r3, #4
 8003c7a:	0019      	movs	r1, r3
 8003c7c:	0010      	movs	r0, r2
 8003c7e:	f7fd fc4c 	bl	800151a <vListInsertEnd>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				if( xYieldRequired != pdFALSE )
 8003c82:	697b      	ldr	r3, [r7, #20]
 8003c84:	2b00      	cmp	r3, #0
 8003c86:	d001      	beq.n	8003c8c <vTaskPrioritySet+0x100>
				{
					taskYIELD_IF_USING_PREEMPTION();
 8003c88:	f7fd fd58 	bl	800173c <vPortYield>
				/* Remove compiler warning about unused variables when the port
				optimised task selection is not being used. */
				( void ) uxPriorityUsedOnEntry;
			}
		}
		taskEXIT_CRITICAL();
 8003c8c:	f7fd fd78 	bl	8001780 <vPortExitCritical>
	}
 8003c90:	46c0      	nop			; (mov r8, r8)
 8003c92:	46bd      	mov	sp, r7
 8003c94:	b006      	add	sp, #24
 8003c96:	bd80      	pop	{r7, pc}
 8003c98:	20000c98 	.word	0x20000c98
 8003c9c:	20000c9c 	.word	0x20000c9c
 8003ca0:	20000d78 	.word	0x20000d78

08003ca4 <vTaskSuspend>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskSuspend == 1 )

	void vTaskSuspend( TaskHandle_t xTaskToSuspend )
	{
 8003ca4:	b580      	push	{r7, lr}
 8003ca6:	b084      	sub	sp, #16
 8003ca8:	af00      	add	r7, sp, #0
 8003caa:	6078      	str	r0, [r7, #4]
	TCB_t *pxTCB;

		taskENTER_CRITICAL();
 8003cac:	f7fd fd56 	bl	800175c <vPortEnterCritical>
		{
			/* If null is passed in here then it is the running task that is
			being suspended. */
			pxTCB = prvGetTCBFromHandle( xTaskToSuspend );
 8003cb0:	687b      	ldr	r3, [r7, #4]
 8003cb2:	2b00      	cmp	r3, #0
 8003cb4:	d102      	bne.n	8003cbc <vTaskSuspend+0x18>
 8003cb6:	4b29      	ldr	r3, [pc, #164]	; (8003d5c <vTaskSuspend+0xb8>)
 8003cb8:	681b      	ldr	r3, [r3, #0]
 8003cba:	e000      	b.n	8003cbe <vTaskSuspend+0x1a>
 8003cbc:	687b      	ldr	r3, [r7, #4]
 8003cbe:	60fb      	str	r3, [r7, #12]

			traceTASK_SUSPEND( pxTCB );

			/* Remove task from the ready/delayed list and place in the
			suspended list. */
			if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8003cc0:	68fb      	ldr	r3, [r7, #12]
 8003cc2:	3304      	adds	r3, #4
 8003cc4:	0018      	movs	r0, r3
 8003cc6:	f7fd fc80 	bl	80015ca <uxListRemove>
			{
				mtCOVERAGE_TEST_MARKER();
			}

			/* Is the task waiting on an event also? */
			if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8003cca:	68fb      	ldr	r3, [r7, #12]
 8003ccc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003cce:	2b00      	cmp	r3, #0
 8003cd0:	d004      	beq.n	8003cdc <vTaskSuspend+0x38>
			{
				( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8003cd2:	68fb      	ldr	r3, [r7, #12]
 8003cd4:	3318      	adds	r3, #24
 8003cd6:	0018      	movs	r0, r3
 8003cd8:	f7fd fc77 	bl	80015ca <uxListRemove>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			vListInsertEnd( &xSuspendedTaskList, &( pxTCB->xStateListItem ) );
 8003cdc:	68fb      	ldr	r3, [r7, #12]
 8003cde:	1d1a      	adds	r2, r3, #4
 8003ce0:	4b1f      	ldr	r3, [pc, #124]	; (8003d60 <vTaskSuspend+0xbc>)
 8003ce2:	0011      	movs	r1, r2
 8003ce4:	0018      	movs	r0, r3
 8003ce6:	f7fd fc18 	bl	800151a <vListInsertEnd>

			#if( configUSE_TASK_NOTIFICATIONS == 1 )
			{
				if( pxTCB->ucNotifyState == taskWAITING_NOTIFICATION )
 8003cea:	68fb      	ldr	r3, [r7, #12]
 8003cec:	2250      	movs	r2, #80	; 0x50
 8003cee:	5c9b      	ldrb	r3, [r3, r2]
 8003cf0:	b2db      	uxtb	r3, r3
 8003cf2:	2b01      	cmp	r3, #1
 8003cf4:	d103      	bne.n	8003cfe <vTaskSuspend+0x5a>
				{
					/* The task was blocked to wait for a notification, but is
					now suspended, so no notification was received. */
					pxTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8003cf6:	68fb      	ldr	r3, [r7, #12]
 8003cf8:	2250      	movs	r2, #80	; 0x50
 8003cfa:	2100      	movs	r1, #0
 8003cfc:	5499      	strb	r1, [r3, r2]
				}
			}
			#endif
		}
		taskEXIT_CRITICAL();
 8003cfe:	f7fd fd3f 	bl	8001780 <vPortExitCritical>

		if( xSchedulerRunning != pdFALSE )
 8003d02:	4b18      	ldr	r3, [pc, #96]	; (8003d64 <vTaskSuspend+0xc0>)
 8003d04:	681b      	ldr	r3, [r3, #0]
 8003d06:	2b00      	cmp	r3, #0
 8003d08:	d005      	beq.n	8003d16 <vTaskSuspend+0x72>
		{
			/* Reset the next expected unblock time in case it referred to the
			task that is now in the Suspended state. */
			taskENTER_CRITICAL();
 8003d0a:	f7fd fd27 	bl	800175c <vPortEnterCritical>
			{
				prvResetNextTaskUnblockTime();
 8003d0e:	f000 ff43 	bl	8004b98 <prvResetNextTaskUnblockTime>
			}
			taskEXIT_CRITICAL();
 8003d12:	f7fd fd35 	bl	8001780 <vPortExitCritical>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( pxTCB == pxCurrentTCB )
 8003d16:	4b11      	ldr	r3, [pc, #68]	; (8003d5c <vTaskSuspend+0xb8>)
 8003d18:	681b      	ldr	r3, [r3, #0]
 8003d1a:	68fa      	ldr	r2, [r7, #12]
 8003d1c:	429a      	cmp	r2, r3
 8003d1e:	d118      	bne.n	8003d52 <vTaskSuspend+0xae>
		{
			if( xSchedulerRunning != pdFALSE )
 8003d20:	4b10      	ldr	r3, [pc, #64]	; (8003d64 <vTaskSuspend+0xc0>)
 8003d22:	681b      	ldr	r3, [r3, #0]
 8003d24:	2b00      	cmp	r3, #0
 8003d26:	d008      	beq.n	8003d3a <vTaskSuspend+0x96>
			{
				/* The current task has just been suspended. */
				configASSERT( uxSchedulerSuspended == 0 );
 8003d28:	4b0f      	ldr	r3, [pc, #60]	; (8003d68 <vTaskSuspend+0xc4>)
 8003d2a:	681b      	ldr	r3, [r3, #0]
 8003d2c:	2b00      	cmp	r3, #0
 8003d2e:	d001      	beq.n	8003d34 <vTaskSuspend+0x90>
 8003d30:	b672      	cpsid	i
 8003d32:	e7fe      	b.n	8003d32 <vTaskSuspend+0x8e>
				portYIELD_WITHIN_API();
 8003d34:	f7fd fd02 	bl	800173c <vPortYield>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8003d38:	e00b      	b.n	8003d52 <vTaskSuspend+0xae>
				if( listCURRENT_LIST_LENGTH( &xSuspendedTaskList ) == uxCurrentNumberOfTasks ) /*lint !e931 Right has no side effect, just volatile. */
 8003d3a:	4b09      	ldr	r3, [pc, #36]	; (8003d60 <vTaskSuspend+0xbc>)
 8003d3c:	681a      	ldr	r2, [r3, #0]
 8003d3e:	4b0b      	ldr	r3, [pc, #44]	; (8003d6c <vTaskSuspend+0xc8>)
 8003d40:	681b      	ldr	r3, [r3, #0]
 8003d42:	429a      	cmp	r2, r3
 8003d44:	d103      	bne.n	8003d4e <vTaskSuspend+0xaa>
					pxCurrentTCB = NULL;
 8003d46:	4b05      	ldr	r3, [pc, #20]	; (8003d5c <vTaskSuspend+0xb8>)
 8003d48:	2200      	movs	r2, #0
 8003d4a:	601a      	str	r2, [r3, #0]
	}
 8003d4c:	e001      	b.n	8003d52 <vTaskSuspend+0xae>
					vTaskSwitchContext();
 8003d4e:	f000 fb6d 	bl	800442c <vTaskSwitchContext>
	}
 8003d52:	46c0      	nop			; (mov r8, r8)
 8003d54:	46bd      	mov	sp, r7
 8003d56:	b004      	add	sp, #16
 8003d58:	bd80      	pop	{r7, pc}
 8003d5a:	46c0      	nop			; (mov r8, r8)
 8003d5c:	20000c98 	.word	0x20000c98
 8003d60:	20000d5c 	.word	0x20000d5c
 8003d64:	20000d7c 	.word	0x20000d7c
 8003d68:	20000d98 	.word	0x20000d98
 8003d6c:	20000d70 	.word	0x20000d70

08003d70 <prvTaskIsTaskSuspended>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskSuspend == 1 )

	static BaseType_t prvTaskIsTaskSuspended( const TaskHandle_t xTask )
	{
 8003d70:	b580      	push	{r7, lr}
 8003d72:	b084      	sub	sp, #16
 8003d74:	af00      	add	r7, sp, #0
 8003d76:	6078      	str	r0, [r7, #4]
	BaseType_t xReturn = pdFALSE;
 8003d78:	2300      	movs	r3, #0
 8003d7a:	60fb      	str	r3, [r7, #12]
	const TCB_t * const pxTCB = xTask;
 8003d7c:	687b      	ldr	r3, [r7, #4]
 8003d7e:	60bb      	str	r3, [r7, #8]

		/* Accesses xPendingReadyList so must be called from a critical
		section. */

		/* It does not make sense to check if the calling task is suspended. */
		configASSERT( xTask );
 8003d80:	687b      	ldr	r3, [r7, #4]
 8003d82:	2b00      	cmp	r3, #0
 8003d84:	d101      	bne.n	8003d8a <prvTaskIsTaskSuspended+0x1a>
 8003d86:	b672      	cpsid	i
 8003d88:	e7fe      	b.n	8003d88 <prvTaskIsTaskSuspended+0x18>

		/* Is the task being resumed actually in the suspended list? */
		if( listIS_CONTAINED_WITHIN( &xSuspendedTaskList, &( pxTCB->xStateListItem ) ) != pdFALSE )
 8003d8a:	68bb      	ldr	r3, [r7, #8]
 8003d8c:	695a      	ldr	r2, [r3, #20]
 8003d8e:	4b09      	ldr	r3, [pc, #36]	; (8003db4 <prvTaskIsTaskSuspended+0x44>)
 8003d90:	429a      	cmp	r2, r3
 8003d92:	d10a      	bne.n	8003daa <prvTaskIsTaskSuspended+0x3a>
		{
			/* Has the task already been resumed from within an ISR? */
			if( listIS_CONTAINED_WITHIN( &xPendingReadyList, &( pxTCB->xEventListItem ) ) == pdFALSE )
 8003d94:	68bb      	ldr	r3, [r7, #8]
 8003d96:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8003d98:	4b07      	ldr	r3, [pc, #28]	; (8003db8 <prvTaskIsTaskSuspended+0x48>)
 8003d9a:	429a      	cmp	r2, r3
 8003d9c:	d005      	beq.n	8003daa <prvTaskIsTaskSuspended+0x3a>
			{
				/* Is it in the suspended list because it is in the	Suspended
				state, or because is is blocked with no timeout? */
				if( listIS_CONTAINED_WITHIN( NULL, &( pxTCB->xEventListItem ) ) != pdFALSE ) /*lint !e961.  The cast is only redundant when NULL is used. */
 8003d9e:	68bb      	ldr	r3, [r7, #8]
 8003da0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003da2:	2b00      	cmp	r3, #0
 8003da4:	d101      	bne.n	8003daa <prvTaskIsTaskSuspended+0x3a>
				{
					xReturn = pdTRUE;
 8003da6:	2301      	movs	r3, #1
 8003da8:	60fb      	str	r3, [r7, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8003daa:	68fb      	ldr	r3, [r7, #12]
	} /*lint !e818 xTask cannot be a pointer to const because it is a typedef. */
 8003dac:	0018      	movs	r0, r3
 8003dae:	46bd      	mov	sp, r7
 8003db0:	b004      	add	sp, #16
 8003db2:	bd80      	pop	{r7, pc}
 8003db4:	20000d5c 	.word	0x20000d5c
 8003db8:	20000d30 	.word	0x20000d30

08003dbc <vTaskResume>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskSuspend == 1 )

	void vTaskResume( TaskHandle_t xTaskToResume )
	{
 8003dbc:	b580      	push	{r7, lr}
 8003dbe:	b084      	sub	sp, #16
 8003dc0:	af00      	add	r7, sp, #0
 8003dc2:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = xTaskToResume;
 8003dc4:	687b      	ldr	r3, [r7, #4]
 8003dc6:	60fb      	str	r3, [r7, #12]

		/* It does not make sense to resume the calling task. */
		configASSERT( xTaskToResume );
 8003dc8:	687b      	ldr	r3, [r7, #4]
 8003dca:	2b00      	cmp	r3, #0
 8003dcc:	d101      	bne.n	8003dd2 <vTaskResume+0x16>
 8003dce:	b672      	cpsid	i
 8003dd0:	e7fe      	b.n	8003dd0 <vTaskResume+0x14>

		/* The parameter cannot be NULL as it is impossible to resume the
		currently executing task. */
		if( ( pxTCB != pxCurrentTCB ) && ( pxTCB != NULL ) )
 8003dd2:	4b1e      	ldr	r3, [pc, #120]	; (8003e4c <vTaskResume+0x90>)
 8003dd4:	681b      	ldr	r3, [r3, #0]
 8003dd6:	68fa      	ldr	r2, [r7, #12]
 8003dd8:	429a      	cmp	r2, r3
 8003dda:	d032      	beq.n	8003e42 <vTaskResume+0x86>
 8003ddc:	68fb      	ldr	r3, [r7, #12]
 8003dde:	2b00      	cmp	r3, #0
 8003de0:	d02f      	beq.n	8003e42 <vTaskResume+0x86>
		{
			taskENTER_CRITICAL();
 8003de2:	f7fd fcbb 	bl	800175c <vPortEnterCritical>
			{
				if( prvTaskIsTaskSuspended( pxTCB ) != pdFALSE )
 8003de6:	68fb      	ldr	r3, [r7, #12]
 8003de8:	0018      	movs	r0, r3
 8003dea:	f7ff ffc1 	bl	8003d70 <prvTaskIsTaskSuspended>
 8003dee:	1e03      	subs	r3, r0, #0
 8003df0:	d025      	beq.n	8003e3e <vTaskResume+0x82>
				{
					traceTASK_RESUME( pxTCB );

					/* The ready list can be accessed even if the scheduler is
					suspended because this is inside a critical section. */
					( void ) uxListRemove(  &( pxTCB->xStateListItem ) );
 8003df2:	68fb      	ldr	r3, [r7, #12]
 8003df4:	3304      	adds	r3, #4
 8003df6:	0018      	movs	r0, r3
 8003df8:	f7fd fbe7 	bl	80015ca <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8003dfc:	68fb      	ldr	r3, [r7, #12]
 8003dfe:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003e00:	4b13      	ldr	r3, [pc, #76]	; (8003e50 <vTaskResume+0x94>)
 8003e02:	681b      	ldr	r3, [r3, #0]
 8003e04:	429a      	cmp	r2, r3
 8003e06:	d903      	bls.n	8003e10 <vTaskResume+0x54>
 8003e08:	68fb      	ldr	r3, [r7, #12]
 8003e0a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003e0c:	4b10      	ldr	r3, [pc, #64]	; (8003e50 <vTaskResume+0x94>)
 8003e0e:	601a      	str	r2, [r3, #0]
 8003e10:	68fb      	ldr	r3, [r7, #12]
 8003e12:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003e14:	0013      	movs	r3, r2
 8003e16:	009b      	lsls	r3, r3, #2
 8003e18:	189b      	adds	r3, r3, r2
 8003e1a:	009b      	lsls	r3, r3, #2
 8003e1c:	4a0d      	ldr	r2, [pc, #52]	; (8003e54 <vTaskResume+0x98>)
 8003e1e:	189a      	adds	r2, r3, r2
 8003e20:	68fb      	ldr	r3, [r7, #12]
 8003e22:	3304      	adds	r3, #4
 8003e24:	0019      	movs	r1, r3
 8003e26:	0010      	movs	r0, r2
 8003e28:	f7fd fb77 	bl	800151a <vListInsertEnd>

					/* A higher priority task may have just been resumed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8003e2c:	68fb      	ldr	r3, [r7, #12]
 8003e2e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003e30:	4b06      	ldr	r3, [pc, #24]	; (8003e4c <vTaskResume+0x90>)
 8003e32:	681b      	ldr	r3, [r3, #0]
 8003e34:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003e36:	429a      	cmp	r2, r3
 8003e38:	d301      	bcc.n	8003e3e <vTaskResume+0x82>
					{
						/* This yield may not cause the task just resumed to run,
						but will leave the lists in the correct state for the
						next yield. */
						taskYIELD_IF_USING_PREEMPTION();
 8003e3a:	f7fd fc7f 	bl	800173c <vPortYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}
			}
			taskEXIT_CRITICAL();
 8003e3e:	f7fd fc9f 	bl	8001780 <vPortExitCritical>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8003e42:	46c0      	nop			; (mov r8, r8)
 8003e44:	46bd      	mov	sp, r7
 8003e46:	b004      	add	sp, #16
 8003e48:	bd80      	pop	{r7, pc}
 8003e4a:	46c0      	nop			; (mov r8, r8)
 8003e4c:	20000c98 	.word	0x20000c98
 8003e50:	20000d78 	.word	0x20000d78
 8003e54:	20000c9c 	.word	0x20000c9c

08003e58 <xTaskResumeFromISR>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) )

	BaseType_t xTaskResumeFromISR( TaskHandle_t xTaskToResume )
	{
 8003e58:	b580      	push	{r7, lr}
 8003e5a:	b086      	sub	sp, #24
 8003e5c:	af00      	add	r7, sp, #0
 8003e5e:	6078      	str	r0, [r7, #4]
	BaseType_t xYieldRequired = pdFALSE;
 8003e60:	2300      	movs	r3, #0
 8003e62:	617b      	str	r3, [r7, #20]
	TCB_t * const pxTCB = xTaskToResume;
 8003e64:	687b      	ldr	r3, [r7, #4]
 8003e66:	613b      	str	r3, [r7, #16]
	UBaseType_t uxSavedInterruptStatus;

		configASSERT( xTaskToResume );
 8003e68:	687b      	ldr	r3, [r7, #4]
 8003e6a:	2b00      	cmp	r3, #0
 8003e6c:	d101      	bne.n	8003e72 <xTaskResumeFromISR+0x1a>
 8003e6e:	b672      	cpsid	i
 8003e70:	e7fe      	b.n	8003e70 <xTaskResumeFromISR+0x18>
		simple as possible.  More information (albeit Cortex-M specific) is
		provided on the following link:
		https://www.freertos.org/RTOS-Cortex-M3-M4.html */
		portASSERT_IF_INTERRUPT_PRIORITY_INVALID();

		uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8003e72:	f7fd fc9d 	bl	80017b0 <ulSetInterruptMaskFromISR>
 8003e76:	0003      	movs	r3, r0
 8003e78:	60fb      	str	r3, [r7, #12]
		{
			if( prvTaskIsTaskSuspended( pxTCB ) != pdFALSE )
 8003e7a:	693b      	ldr	r3, [r7, #16]
 8003e7c:	0018      	movs	r0, r3
 8003e7e:	f7ff ff77 	bl	8003d70 <prvTaskIsTaskSuspended>
 8003e82:	1e03      	subs	r3, r0, #0
 8003e84:	d032      	beq.n	8003eec <xTaskResumeFromISR+0x94>
			{
				traceTASK_RESUME_FROM_ISR( pxTCB );

				/* Check the ready lists can be accessed. */
				if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8003e86:	4b1e      	ldr	r3, [pc, #120]	; (8003f00 <xTaskResumeFromISR+0xa8>)
 8003e88:	681b      	ldr	r3, [r3, #0]
 8003e8a:	2b00      	cmp	r3, #0
 8003e8c:	d126      	bne.n	8003edc <xTaskResumeFromISR+0x84>
				{
					/* Ready lists can be accessed so move the task from the
					suspended list to the ready list directly. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8003e8e:	693b      	ldr	r3, [r7, #16]
 8003e90:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003e92:	4b1c      	ldr	r3, [pc, #112]	; (8003f04 <xTaskResumeFromISR+0xac>)
 8003e94:	681b      	ldr	r3, [r3, #0]
 8003e96:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003e98:	429a      	cmp	r2, r3
 8003e9a:	d301      	bcc.n	8003ea0 <xTaskResumeFromISR+0x48>
					{
						xYieldRequired = pdTRUE;
 8003e9c:	2301      	movs	r3, #1
 8003e9e:	617b      	str	r3, [r7, #20]
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8003ea0:	693b      	ldr	r3, [r7, #16]
 8003ea2:	3304      	adds	r3, #4
 8003ea4:	0018      	movs	r0, r3
 8003ea6:	f7fd fb90 	bl	80015ca <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8003eaa:	693b      	ldr	r3, [r7, #16]
 8003eac:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003eae:	4b16      	ldr	r3, [pc, #88]	; (8003f08 <xTaskResumeFromISR+0xb0>)
 8003eb0:	681b      	ldr	r3, [r3, #0]
 8003eb2:	429a      	cmp	r2, r3
 8003eb4:	d903      	bls.n	8003ebe <xTaskResumeFromISR+0x66>
 8003eb6:	693b      	ldr	r3, [r7, #16]
 8003eb8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003eba:	4b13      	ldr	r3, [pc, #76]	; (8003f08 <xTaskResumeFromISR+0xb0>)
 8003ebc:	601a      	str	r2, [r3, #0]
 8003ebe:	693b      	ldr	r3, [r7, #16]
 8003ec0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003ec2:	0013      	movs	r3, r2
 8003ec4:	009b      	lsls	r3, r3, #2
 8003ec6:	189b      	adds	r3, r3, r2
 8003ec8:	009b      	lsls	r3, r3, #2
 8003eca:	4a10      	ldr	r2, [pc, #64]	; (8003f0c <xTaskResumeFromISR+0xb4>)
 8003ecc:	189a      	adds	r2, r3, r2
 8003ece:	693b      	ldr	r3, [r7, #16]
 8003ed0:	3304      	adds	r3, #4
 8003ed2:	0019      	movs	r1, r3
 8003ed4:	0010      	movs	r0, r2
 8003ed6:	f7fd fb20 	bl	800151a <vListInsertEnd>
 8003eda:	e007      	b.n	8003eec <xTaskResumeFromISR+0x94>
				else
				{
					/* The delayed or ready lists cannot be accessed so the task
					is held in the pending ready list until the scheduler is
					unsuspended. */
					vListInsertEnd( &( xPendingReadyList ), &( pxTCB->xEventListItem ) );
 8003edc:	693b      	ldr	r3, [r7, #16]
 8003ede:	3318      	adds	r3, #24
 8003ee0:	001a      	movs	r2, r3
 8003ee2:	4b0b      	ldr	r3, [pc, #44]	; (8003f10 <xTaskResumeFromISR+0xb8>)
 8003ee4:	0011      	movs	r1, r2
 8003ee6:	0018      	movs	r0, r3
 8003ee8:	f7fd fb17 	bl	800151a <vListInsertEnd>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
		portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );
 8003eec:	68fb      	ldr	r3, [r7, #12]
 8003eee:	0018      	movs	r0, r3
 8003ef0:	f7fd fc64 	bl	80017bc <vClearInterruptMaskFromISR>

		return xYieldRequired;
 8003ef4:	697b      	ldr	r3, [r7, #20]
	}
 8003ef6:	0018      	movs	r0, r3
 8003ef8:	46bd      	mov	sp, r7
 8003efa:	b006      	add	sp, #24
 8003efc:	bd80      	pop	{r7, pc}
 8003efe:	46c0      	nop			; (mov r8, r8)
 8003f00:	20000d98 	.word	0x20000d98
 8003f04:	20000c98 	.word	0x20000c98
 8003f08:	20000d78 	.word	0x20000d78
 8003f0c:	20000c9c 	.word	0x20000c9c
 8003f10:	20000d30 	.word	0x20000d30

08003f14 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8003f14:	b580      	push	{r7, lr}
 8003f16:	b084      	sub	sp, #16
 8003f18:	af02      	add	r7, sp, #8
		}
	}
	#else
	{
		/* The Idle task is being created using dynamically allocated RAM. */
		xReturn = xTaskCreate(	prvIdleTask,
 8003f1a:	4916      	ldr	r1, [pc, #88]	; (8003f74 <vTaskStartScheduler+0x60>)
 8003f1c:	4816      	ldr	r0, [pc, #88]	; (8003f78 <vTaskStartScheduler+0x64>)
 8003f1e:	4b17      	ldr	r3, [pc, #92]	; (8003f7c <vTaskStartScheduler+0x68>)
 8003f20:	9301      	str	r3, [sp, #4]
 8003f22:	2300      	movs	r3, #0
 8003f24:	9300      	str	r3, [sp, #0]
 8003f26:	2300      	movs	r3, #0
 8003f28:	223c      	movs	r2, #60	; 0x3c
 8003f2a:	f7ff fb69 	bl	8003600 <xTaskCreate>
 8003f2e:	0003      	movs	r3, r0
 8003f30:	607b      	str	r3, [r7, #4]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 8003f32:	687b      	ldr	r3, [r7, #4]
 8003f34:	2b01      	cmp	r3, #1
 8003f36:	d103      	bne.n	8003f40 <vTaskStartScheduler+0x2c>
		{
			xReturn = xTimerCreateTimerTask();
 8003f38:	f001 fac4 	bl	80054c4 <xTimerCreateTimerTask>
 8003f3c:	0003      	movs	r3, r0
 8003f3e:	607b      	str	r3, [r7, #4]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 8003f40:	687b      	ldr	r3, [r7, #4]
 8003f42:	2b01      	cmp	r3, #1
 8003f44:	d10d      	bne.n	8003f62 <vTaskStartScheduler+0x4e>
		/* Interrupts are turned off here, to ensure a tick does not occur
		before or during the call to xPortStartScheduler().  The stacks of
		the created tasks contain a status word with interrupts switched on
		so interrupts will automatically get re-enabled when the first task
		starts to run. */
		portDISABLE_INTERRUPTS();
 8003f46:	b672      	cpsid	i
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 8003f48:	4b0d      	ldr	r3, [pc, #52]	; (8003f80 <vTaskStartScheduler+0x6c>)
 8003f4a:	2201      	movs	r2, #1
 8003f4c:	4252      	negs	r2, r2
 8003f4e:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 8003f50:	4b0c      	ldr	r3, [pc, #48]	; (8003f84 <vTaskStartScheduler+0x70>)
 8003f52:	2201      	movs	r2, #1
 8003f54:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 8003f56:	4b0c      	ldr	r3, [pc, #48]	; (8003f88 <vTaskStartScheduler+0x74>)
 8003f58:	2200      	movs	r2, #0
 8003f5a:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 8003f5c:	f7fd fbbb 	bl	80016d6 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 8003f60:	e004      	b.n	8003f6c <vTaskStartScheduler+0x58>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8003f62:	687b      	ldr	r3, [r7, #4]
 8003f64:	3301      	adds	r3, #1
 8003f66:	d101      	bne.n	8003f6c <vTaskStartScheduler+0x58>
 8003f68:	b672      	cpsid	i
 8003f6a:	e7fe      	b.n	8003f6a <vTaskStartScheduler+0x56>
}
 8003f6c:	46c0      	nop			; (mov r8, r8)
 8003f6e:	46bd      	mov	sp, r7
 8003f70:	b002      	add	sp, #8
 8003f72:	bd80      	pop	{r7, pc}
 8003f74:	080074c8 	.word	0x080074c8
 8003f78:	080048c3 	.word	0x080048c3
 8003f7c:	20000d94 	.word	0x20000d94
 8003f80:	20000d90 	.word	0x20000d90
 8003f84:	20000d7c 	.word	0x20000d7c
 8003f88:	20000d74 	.word	0x20000d74

08003f8c <vTaskEndScheduler>:
/*-----------------------------------------------------------*/

void vTaskEndScheduler( void )
{
 8003f8c:	b580      	push	{r7, lr}
 8003f8e:	af00      	add	r7, sp, #0
	/* Stop the scheduler interrupts and call the portable scheduler end
	routine so the original ISRs can be restored if necessary.  The port
	layer must ensure interrupts enable	bit is left in the correct state. */
	portDISABLE_INTERRUPTS();
 8003f90:	b672      	cpsid	i
	xSchedulerRunning = pdFALSE;
 8003f92:	4b04      	ldr	r3, [pc, #16]	; (8003fa4 <vTaskEndScheduler+0x18>)
 8003f94:	2200      	movs	r2, #0
 8003f96:	601a      	str	r2, [r3, #0]
	vPortEndScheduler();
 8003f98:	f7fd fbc0 	bl	800171c <vPortEndScheduler>
}
 8003f9c:	46c0      	nop			; (mov r8, r8)
 8003f9e:	46bd      	mov	sp, r7
 8003fa0:	bd80      	pop	{r7, pc}
 8003fa2:	46c0      	nop			; (mov r8, r8)
 8003fa4:	20000d7c 	.word	0x20000d7c

08003fa8 <vTaskSuspendAll>:
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8003fa8:	b580      	push	{r7, lr}
 8003faa:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 8003fac:	4b03      	ldr	r3, [pc, #12]	; (8003fbc <vTaskSuspendAll+0x14>)
 8003fae:	681b      	ldr	r3, [r3, #0]
 8003fb0:	1c5a      	adds	r2, r3, #1
 8003fb2:	4b02      	ldr	r3, [pc, #8]	; (8003fbc <vTaskSuspendAll+0x14>)
 8003fb4:	601a      	str	r2, [r3, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 8003fb6:	46c0      	nop			; (mov r8, r8)
 8003fb8:	46bd      	mov	sp, r7
 8003fba:	bd80      	pop	{r7, pc}
 8003fbc:	20000d98 	.word	0x20000d98

08003fc0 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8003fc0:	b580      	push	{r7, lr}
 8003fc2:	b084      	sub	sp, #16
 8003fc4:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 8003fc6:	2300      	movs	r3, #0
 8003fc8:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 8003fca:	2300      	movs	r3, #0
 8003fcc:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 8003fce:	4b3a      	ldr	r3, [pc, #232]	; (80040b8 <xTaskResumeAll+0xf8>)
 8003fd0:	681b      	ldr	r3, [r3, #0]
 8003fd2:	2b00      	cmp	r3, #0
 8003fd4:	d101      	bne.n	8003fda <xTaskResumeAll+0x1a>
 8003fd6:	b672      	cpsid	i
 8003fd8:	e7fe      	b.n	8003fd8 <xTaskResumeAll+0x18>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 8003fda:	f7fd fbbf 	bl	800175c <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 8003fde:	4b36      	ldr	r3, [pc, #216]	; (80040b8 <xTaskResumeAll+0xf8>)
 8003fe0:	681b      	ldr	r3, [r3, #0]
 8003fe2:	1e5a      	subs	r2, r3, #1
 8003fe4:	4b34      	ldr	r3, [pc, #208]	; (80040b8 <xTaskResumeAll+0xf8>)
 8003fe6:	601a      	str	r2, [r3, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8003fe8:	4b33      	ldr	r3, [pc, #204]	; (80040b8 <xTaskResumeAll+0xf8>)
 8003fea:	681b      	ldr	r3, [r3, #0]
 8003fec:	2b00      	cmp	r3, #0
 8003fee:	d15b      	bne.n	80040a8 <xTaskResumeAll+0xe8>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8003ff0:	4b32      	ldr	r3, [pc, #200]	; (80040bc <xTaskResumeAll+0xfc>)
 8003ff2:	681b      	ldr	r3, [r3, #0]
 8003ff4:	2b00      	cmp	r3, #0
 8003ff6:	d057      	beq.n	80040a8 <xTaskResumeAll+0xe8>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8003ff8:	e02f      	b.n	800405a <xTaskResumeAll+0x9a>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8003ffa:	4b31      	ldr	r3, [pc, #196]	; (80040c0 <xTaskResumeAll+0x100>)
 8003ffc:	68db      	ldr	r3, [r3, #12]
 8003ffe:	68db      	ldr	r3, [r3, #12]
 8004000:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8004002:	68fb      	ldr	r3, [r7, #12]
 8004004:	3318      	adds	r3, #24
 8004006:	0018      	movs	r0, r3
 8004008:	f7fd fadf 	bl	80015ca <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800400c:	68fb      	ldr	r3, [r7, #12]
 800400e:	3304      	adds	r3, #4
 8004010:	0018      	movs	r0, r3
 8004012:	f7fd fada 	bl	80015ca <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8004016:	68fb      	ldr	r3, [r7, #12]
 8004018:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800401a:	4b2a      	ldr	r3, [pc, #168]	; (80040c4 <xTaskResumeAll+0x104>)
 800401c:	681b      	ldr	r3, [r3, #0]
 800401e:	429a      	cmp	r2, r3
 8004020:	d903      	bls.n	800402a <xTaskResumeAll+0x6a>
 8004022:	68fb      	ldr	r3, [r7, #12]
 8004024:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004026:	4b27      	ldr	r3, [pc, #156]	; (80040c4 <xTaskResumeAll+0x104>)
 8004028:	601a      	str	r2, [r3, #0]
 800402a:	68fb      	ldr	r3, [r7, #12]
 800402c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800402e:	0013      	movs	r3, r2
 8004030:	009b      	lsls	r3, r3, #2
 8004032:	189b      	adds	r3, r3, r2
 8004034:	009b      	lsls	r3, r3, #2
 8004036:	4a24      	ldr	r2, [pc, #144]	; (80040c8 <xTaskResumeAll+0x108>)
 8004038:	189a      	adds	r2, r3, r2
 800403a:	68fb      	ldr	r3, [r7, #12]
 800403c:	3304      	adds	r3, #4
 800403e:	0019      	movs	r1, r3
 8004040:	0010      	movs	r0, r2
 8004042:	f7fd fa6a 	bl	800151a <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8004046:	68fb      	ldr	r3, [r7, #12]
 8004048:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800404a:	4b20      	ldr	r3, [pc, #128]	; (80040cc <xTaskResumeAll+0x10c>)
 800404c:	681b      	ldr	r3, [r3, #0]
 800404e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004050:	429a      	cmp	r2, r3
 8004052:	d302      	bcc.n	800405a <xTaskResumeAll+0x9a>
					{
						xYieldPending = pdTRUE;
 8004054:	4b1e      	ldr	r3, [pc, #120]	; (80040d0 <xTaskResumeAll+0x110>)
 8004056:	2201      	movs	r2, #1
 8004058:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800405a:	4b19      	ldr	r3, [pc, #100]	; (80040c0 <xTaskResumeAll+0x100>)
 800405c:	681b      	ldr	r3, [r3, #0]
 800405e:	2b00      	cmp	r3, #0
 8004060:	d1cb      	bne.n	8003ffa <xTaskResumeAll+0x3a>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 8004062:	68fb      	ldr	r3, [r7, #12]
 8004064:	2b00      	cmp	r3, #0
 8004066:	d001      	beq.n	800406c <xTaskResumeAll+0xac>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 8004068:	f000 fd96 	bl	8004b98 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 800406c:	4b19      	ldr	r3, [pc, #100]	; (80040d4 <xTaskResumeAll+0x114>)
 800406e:	681b      	ldr	r3, [r3, #0]
 8004070:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 8004072:	687b      	ldr	r3, [r7, #4]
 8004074:	2b00      	cmp	r3, #0
 8004076:	d00f      	beq.n	8004098 <xTaskResumeAll+0xd8>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 8004078:	f000 f920 	bl	80042bc <xTaskIncrementTick>
 800407c:	1e03      	subs	r3, r0, #0
 800407e:	d002      	beq.n	8004086 <xTaskResumeAll+0xc6>
							{
								xYieldPending = pdTRUE;
 8004080:	4b13      	ldr	r3, [pc, #76]	; (80040d0 <xTaskResumeAll+0x110>)
 8004082:	2201      	movs	r2, #1
 8004084:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 8004086:	687b      	ldr	r3, [r7, #4]
 8004088:	3b01      	subs	r3, #1
 800408a:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 800408c:	687b      	ldr	r3, [r7, #4]
 800408e:	2b00      	cmp	r3, #0
 8004090:	d1f2      	bne.n	8004078 <xTaskResumeAll+0xb8>

						xPendedTicks = 0;
 8004092:	4b10      	ldr	r3, [pc, #64]	; (80040d4 <xTaskResumeAll+0x114>)
 8004094:	2200      	movs	r2, #0
 8004096:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 8004098:	4b0d      	ldr	r3, [pc, #52]	; (80040d0 <xTaskResumeAll+0x110>)
 800409a:	681b      	ldr	r3, [r3, #0]
 800409c:	2b00      	cmp	r3, #0
 800409e:	d003      	beq.n	80040a8 <xTaskResumeAll+0xe8>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 80040a0:	2301      	movs	r3, #1
 80040a2:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 80040a4:	f7fd fb4a 	bl	800173c <vPortYield>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 80040a8:	f7fd fb6a 	bl	8001780 <vPortExitCritical>

	return xAlreadyYielded;
 80040ac:	68bb      	ldr	r3, [r7, #8]
}
 80040ae:	0018      	movs	r0, r3
 80040b0:	46bd      	mov	sp, r7
 80040b2:	b004      	add	sp, #16
 80040b4:	bd80      	pop	{r7, pc}
 80040b6:	46c0      	nop			; (mov r8, r8)
 80040b8:	20000d98 	.word	0x20000d98
 80040bc:	20000d70 	.word	0x20000d70
 80040c0:	20000d30 	.word	0x20000d30
 80040c4:	20000d78 	.word	0x20000d78
 80040c8:	20000c9c 	.word	0x20000c9c
 80040cc:	20000c98 	.word	0x20000c98
 80040d0:	20000d84 	.word	0x20000d84
 80040d4:	20000d80 	.word	0x20000d80

080040d8 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 80040d8:	b580      	push	{r7, lr}
 80040da:	b082      	sub	sp, #8
 80040dc:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 80040de:	4b04      	ldr	r3, [pc, #16]	; (80040f0 <xTaskGetTickCount+0x18>)
 80040e0:	681b      	ldr	r3, [r3, #0]
 80040e2:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 80040e4:	687b      	ldr	r3, [r7, #4]
}
 80040e6:	0018      	movs	r0, r3
 80040e8:	46bd      	mov	sp, r7
 80040ea:	b002      	add	sp, #8
 80040ec:	bd80      	pop	{r7, pc}
 80040ee:	46c0      	nop			; (mov r8, r8)
 80040f0:	20000d74 	.word	0x20000d74

080040f4 <xTaskGetTickCountFromISR>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCountFromISR( void )
{
 80040f4:	b580      	push	{r7, lr}
 80040f6:	b082      	sub	sp, #8
 80040f8:	af00      	add	r7, sp, #0
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: https://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();

	uxSavedInterruptStatus = portTICK_TYPE_SET_INTERRUPT_MASK_FROM_ISR();
 80040fa:	2300      	movs	r3, #0
 80040fc:	607b      	str	r3, [r7, #4]
	{
		xReturn = xTickCount;
 80040fe:	4b04      	ldr	r3, [pc, #16]	; (8004110 <xTaskGetTickCountFromISR+0x1c>)
 8004100:	681b      	ldr	r3, [r3, #0]
 8004102:	603b      	str	r3, [r7, #0]
	}
	portTICK_TYPE_CLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8004104:	683b      	ldr	r3, [r7, #0]
}
 8004106:	0018      	movs	r0, r3
 8004108:	46bd      	mov	sp, r7
 800410a:	b002      	add	sp, #8
 800410c:	bd80      	pop	{r7, pc}
 800410e:	46c0      	nop			; (mov r8, r8)
 8004110:	20000d74 	.word	0x20000d74

08004114 <uxTaskGetNumberOfTasks>:
/*-----------------------------------------------------------*/

UBaseType_t uxTaskGetNumberOfTasks( void )
{
 8004114:	b580      	push	{r7, lr}
 8004116:	af00      	add	r7, sp, #0
	/* A critical section is not required because the variables are of type
	BaseType_t. */
	return uxCurrentNumberOfTasks;
 8004118:	4b02      	ldr	r3, [pc, #8]	; (8004124 <uxTaskGetNumberOfTasks+0x10>)
 800411a:	681b      	ldr	r3, [r3, #0]
}
 800411c:	0018      	movs	r0, r3
 800411e:	46bd      	mov	sp, r7
 8004120:	bd80      	pop	{r7, pc}
 8004122:	46c0      	nop			; (mov r8, r8)
 8004124:	20000d70 	.word	0x20000d70

08004128 <pcTaskGetName>:
/*-----------------------------------------------------------*/

char *pcTaskGetName( TaskHandle_t xTaskToQuery ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
{
 8004128:	b580      	push	{r7, lr}
 800412a:	b084      	sub	sp, #16
 800412c:	af00      	add	r7, sp, #0
 800412e:	6078      	str	r0, [r7, #4]
TCB_t *pxTCB;

	/* If null is passed in here then the name of the calling task is being
	queried. */
	pxTCB = prvGetTCBFromHandle( xTaskToQuery );
 8004130:	687b      	ldr	r3, [r7, #4]
 8004132:	2b00      	cmp	r3, #0
 8004134:	d102      	bne.n	800413c <pcTaskGetName+0x14>
 8004136:	4b08      	ldr	r3, [pc, #32]	; (8004158 <pcTaskGetName+0x30>)
 8004138:	681b      	ldr	r3, [r3, #0]
 800413a:	e000      	b.n	800413e <pcTaskGetName+0x16>
 800413c:	687b      	ldr	r3, [r7, #4]
 800413e:	60fb      	str	r3, [r7, #12]
	configASSERT( pxTCB );
 8004140:	68fb      	ldr	r3, [r7, #12]
 8004142:	2b00      	cmp	r3, #0
 8004144:	d101      	bne.n	800414a <pcTaskGetName+0x22>
 8004146:	b672      	cpsid	i
 8004148:	e7fe      	b.n	8004148 <pcTaskGetName+0x20>
	return &( pxTCB->pcTaskName[ 0 ] );
 800414a:	68fb      	ldr	r3, [r7, #12]
 800414c:	3334      	adds	r3, #52	; 0x34
}
 800414e:	0018      	movs	r0, r3
 8004150:	46bd      	mov	sp, r7
 8004152:	b004      	add	sp, #16
 8004154:	bd80      	pop	{r7, pc}
 8004156:	46c0      	nop			; (mov r8, r8)
 8004158:	20000c98 	.word	0x20000c98

0800415c <uxTaskGetSystemState>:
/*-----------------------------------------------------------*/

#if ( configUSE_TRACE_FACILITY == 1 )

	UBaseType_t uxTaskGetSystemState( TaskStatus_t * const pxTaskStatusArray, const UBaseType_t uxArraySize, uint32_t * const pulTotalRunTime )
	{
 800415c:	b580      	push	{r7, lr}
 800415e:	b086      	sub	sp, #24
 8004160:	af00      	add	r7, sp, #0
 8004162:	60f8      	str	r0, [r7, #12]
 8004164:	60b9      	str	r1, [r7, #8]
 8004166:	607a      	str	r2, [r7, #4]
	UBaseType_t uxTask = 0, uxQueue = configMAX_PRIORITIES;
 8004168:	2300      	movs	r3, #0
 800416a:	617b      	str	r3, [r7, #20]
 800416c:	2305      	movs	r3, #5
 800416e:	613b      	str	r3, [r7, #16]

		vTaskSuspendAll();
 8004170:	f7ff ff1a 	bl	8003fa8 <vTaskSuspendAll>
		{
			/* Is there a space in the array for each task in the system? */
			if( uxArraySize >= uxCurrentNumberOfTasks )
 8004174:	4b3a      	ldr	r3, [pc, #232]	; (8004260 <uxTaskGetSystemState+0x104>)
 8004176:	681b      	ldr	r3, [r3, #0]
 8004178:	68ba      	ldr	r2, [r7, #8]
 800417a:	429a      	cmp	r2, r3
 800417c:	d368      	bcc.n	8004250 <uxTaskGetSystemState+0xf4>
			{
				/* Fill in an TaskStatus_t structure with information on each
				task in the Ready state. */
				do
				{
					uxQueue--;
 800417e:	693b      	ldr	r3, [r7, #16]
 8004180:	3b01      	subs	r3, #1
 8004182:	613b      	str	r3, [r7, #16]
					uxTask += prvListTasksWithinSingleList( &( pxTaskStatusArray[ uxTask ] ), &( pxReadyTasksLists[ uxQueue ] ), eReady );
 8004184:	697a      	ldr	r2, [r7, #20]
 8004186:	0013      	movs	r3, r2
 8004188:	00db      	lsls	r3, r3, #3
 800418a:	189b      	adds	r3, r3, r2
 800418c:	009b      	lsls	r3, r3, #2
 800418e:	001a      	movs	r2, r3
 8004190:	68fb      	ldr	r3, [r7, #12]
 8004192:	1898      	adds	r0, r3, r2
 8004194:	693a      	ldr	r2, [r7, #16]
 8004196:	0013      	movs	r3, r2
 8004198:	009b      	lsls	r3, r3, #2
 800419a:	189b      	adds	r3, r3, r2
 800419c:	009b      	lsls	r3, r3, #2
 800419e:	4a31      	ldr	r2, [pc, #196]	; (8004264 <uxTaskGetSystemState+0x108>)
 80041a0:	189b      	adds	r3, r3, r2
 80041a2:	2201      	movs	r2, #1
 80041a4:	0019      	movs	r1, r3
 80041a6:	f000 fc79 	bl	8004a9c <prvListTasksWithinSingleList>
 80041aa:	0002      	movs	r2, r0
 80041ac:	697b      	ldr	r3, [r7, #20]
 80041ae:	189b      	adds	r3, r3, r2
 80041b0:	617b      	str	r3, [r7, #20]

				} while( uxQueue > ( UBaseType_t ) tskIDLE_PRIORITY ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80041b2:	693b      	ldr	r3, [r7, #16]
 80041b4:	2b00      	cmp	r3, #0
 80041b6:	d1e2      	bne.n	800417e <uxTaskGetSystemState+0x22>

				/* Fill in an TaskStatus_t structure with information on each
				task in the Blocked state. */
				uxTask += prvListTasksWithinSingleList( &( pxTaskStatusArray[ uxTask ] ), ( List_t * ) pxDelayedTaskList, eBlocked );
 80041b8:	697a      	ldr	r2, [r7, #20]
 80041ba:	0013      	movs	r3, r2
 80041bc:	00db      	lsls	r3, r3, #3
 80041be:	189b      	adds	r3, r3, r2
 80041c0:	009b      	lsls	r3, r3, #2
 80041c2:	001a      	movs	r2, r3
 80041c4:	68fb      	ldr	r3, [r7, #12]
 80041c6:	1898      	adds	r0, r3, r2
 80041c8:	4b27      	ldr	r3, [pc, #156]	; (8004268 <uxTaskGetSystemState+0x10c>)
 80041ca:	681b      	ldr	r3, [r3, #0]
 80041cc:	2202      	movs	r2, #2
 80041ce:	0019      	movs	r1, r3
 80041d0:	f000 fc64 	bl	8004a9c <prvListTasksWithinSingleList>
 80041d4:	0002      	movs	r2, r0
 80041d6:	697b      	ldr	r3, [r7, #20]
 80041d8:	189b      	adds	r3, r3, r2
 80041da:	617b      	str	r3, [r7, #20]
				uxTask += prvListTasksWithinSingleList( &( pxTaskStatusArray[ uxTask ] ), ( List_t * ) pxOverflowDelayedTaskList, eBlocked );
 80041dc:	697a      	ldr	r2, [r7, #20]
 80041de:	0013      	movs	r3, r2
 80041e0:	00db      	lsls	r3, r3, #3
 80041e2:	189b      	adds	r3, r3, r2
 80041e4:	009b      	lsls	r3, r3, #2
 80041e6:	001a      	movs	r2, r3
 80041e8:	68fb      	ldr	r3, [r7, #12]
 80041ea:	1898      	adds	r0, r3, r2
 80041ec:	4b1f      	ldr	r3, [pc, #124]	; (800426c <uxTaskGetSystemState+0x110>)
 80041ee:	681b      	ldr	r3, [r3, #0]
 80041f0:	2202      	movs	r2, #2
 80041f2:	0019      	movs	r1, r3
 80041f4:	f000 fc52 	bl	8004a9c <prvListTasksWithinSingleList>
 80041f8:	0002      	movs	r2, r0
 80041fa:	697b      	ldr	r3, [r7, #20]
 80041fc:	189b      	adds	r3, r3, r2
 80041fe:	617b      	str	r3, [r7, #20]

				#if( INCLUDE_vTaskDelete == 1 )
				{
					/* Fill in an TaskStatus_t structure with information on
					each task that has been deleted but not yet cleaned up. */
					uxTask += prvListTasksWithinSingleList( &( pxTaskStatusArray[ uxTask ] ), &xTasksWaitingTermination, eDeleted );
 8004200:	697a      	ldr	r2, [r7, #20]
 8004202:	0013      	movs	r3, r2
 8004204:	00db      	lsls	r3, r3, #3
 8004206:	189b      	adds	r3, r3, r2
 8004208:	009b      	lsls	r3, r3, #2
 800420a:	001a      	movs	r2, r3
 800420c:	68fb      	ldr	r3, [r7, #12]
 800420e:	189b      	adds	r3, r3, r2
 8004210:	4917      	ldr	r1, [pc, #92]	; (8004270 <uxTaskGetSystemState+0x114>)
 8004212:	2204      	movs	r2, #4
 8004214:	0018      	movs	r0, r3
 8004216:	f000 fc41 	bl	8004a9c <prvListTasksWithinSingleList>
 800421a:	0002      	movs	r2, r0
 800421c:	697b      	ldr	r3, [r7, #20]
 800421e:	189b      	adds	r3, r3, r2
 8004220:	617b      	str	r3, [r7, #20]

				#if ( INCLUDE_vTaskSuspend == 1 )
				{
					/* Fill in an TaskStatus_t structure with information on
					each task in the Suspended state. */
					uxTask += prvListTasksWithinSingleList( &( pxTaskStatusArray[ uxTask ] ), &xSuspendedTaskList, eSuspended );
 8004222:	697a      	ldr	r2, [r7, #20]
 8004224:	0013      	movs	r3, r2
 8004226:	00db      	lsls	r3, r3, #3
 8004228:	189b      	adds	r3, r3, r2
 800422a:	009b      	lsls	r3, r3, #2
 800422c:	001a      	movs	r2, r3
 800422e:	68fb      	ldr	r3, [r7, #12]
 8004230:	189b      	adds	r3, r3, r2
 8004232:	4910      	ldr	r1, [pc, #64]	; (8004274 <uxTaskGetSystemState+0x118>)
 8004234:	2203      	movs	r2, #3
 8004236:	0018      	movs	r0, r3
 8004238:	f000 fc30 	bl	8004a9c <prvListTasksWithinSingleList>
 800423c:	0002      	movs	r2, r0
 800423e:	697b      	ldr	r3, [r7, #20]
 8004240:	189b      	adds	r3, r3, r2
 8004242:	617b      	str	r3, [r7, #20]
						#endif
					}
				}
				#else
				{
					if( pulTotalRunTime != NULL )
 8004244:	687b      	ldr	r3, [r7, #4]
 8004246:	2b00      	cmp	r3, #0
 8004248:	d002      	beq.n	8004250 <uxTaskGetSystemState+0xf4>
					{
						*pulTotalRunTime = 0;
 800424a:	687b      	ldr	r3, [r7, #4]
 800424c:	2200      	movs	r2, #0
 800424e:	601a      	str	r2, [r3, #0]
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
		( void ) xTaskResumeAll();
 8004250:	f7ff feb6 	bl	8003fc0 <xTaskResumeAll>

		return uxTask;
 8004254:	697b      	ldr	r3, [r7, #20]
	}
 8004256:	0018      	movs	r0, r3
 8004258:	46bd      	mov	sp, r7
 800425a:	b006      	add	sp, #24
 800425c:	bd80      	pop	{r7, pc}
 800425e:	46c0      	nop			; (mov r8, r8)
 8004260:	20000d70 	.word	0x20000d70
 8004264:	20000c9c 	.word	0x20000c9c
 8004268:	20000d28 	.word	0x20000d28
 800426c:	20000d2c 	.word	0x20000d2c
 8004270:	20000d44 	.word	0x20000d44
 8004274:	20000d5c 	.word	0x20000d5c

08004278 <xTaskCatchUpTicks>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskCatchUpTicks( TickType_t xTicksToCatchUp )
{
 8004278:	b580      	push	{r7, lr}
 800427a:	b084      	sub	sp, #16
 800427c:	af00      	add	r7, sp, #0
 800427e:	6078      	str	r0, [r7, #4]
BaseType_t xYieldRequired = pdFALSE;
 8004280:	2300      	movs	r3, #0
 8004282:	60fb      	str	r3, [r7, #12]

	/* Must not be called with the scheduler suspended as the implementation
	relies on xPendedTicks being wound down to 0 in xTaskResumeAll(). */
	configASSERT( uxSchedulerSuspended == 0 );
 8004284:	4b0b      	ldr	r3, [pc, #44]	; (80042b4 <xTaskCatchUpTicks+0x3c>)
 8004286:	681b      	ldr	r3, [r3, #0]
 8004288:	2b00      	cmp	r3, #0
 800428a:	d001      	beq.n	8004290 <xTaskCatchUpTicks+0x18>
 800428c:	b672      	cpsid	i
 800428e:	e7fe      	b.n	800428e <xTaskCatchUpTicks+0x16>

	/* Use xPendedTicks to mimic xTicksToCatchUp number of ticks occurring when
	the scheduler is suspended so the ticks are executed in xTaskResumeAll(). */
	vTaskSuspendAll();
 8004290:	f7ff fe8a 	bl	8003fa8 <vTaskSuspendAll>
	xPendedTicks += xTicksToCatchUp;
 8004294:	4b08      	ldr	r3, [pc, #32]	; (80042b8 <xTaskCatchUpTicks+0x40>)
 8004296:	681a      	ldr	r2, [r3, #0]
 8004298:	687b      	ldr	r3, [r7, #4]
 800429a:	18d2      	adds	r2, r2, r3
 800429c:	4b06      	ldr	r3, [pc, #24]	; (80042b8 <xTaskCatchUpTicks+0x40>)
 800429e:	601a      	str	r2, [r3, #0]
	xYieldRequired = xTaskResumeAll();
 80042a0:	f7ff fe8e 	bl	8003fc0 <xTaskResumeAll>
 80042a4:	0003      	movs	r3, r0
 80042a6:	60fb      	str	r3, [r7, #12]

	return xYieldRequired;
 80042a8:	68fb      	ldr	r3, [r7, #12]
}
 80042aa:	0018      	movs	r0, r3
 80042ac:	46bd      	mov	sp, r7
 80042ae:	b004      	add	sp, #16
 80042b0:	bd80      	pop	{r7, pc}
 80042b2:	46c0      	nop			; (mov r8, r8)
 80042b4:	20000d98 	.word	0x20000d98
 80042b8:	20000d80 	.word	0x20000d80

080042bc <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 80042bc:	b580      	push	{r7, lr}
 80042be:	b086      	sub	sp, #24
 80042c0:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 80042c2:	2300      	movs	r3, #0
 80042c4:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80042c6:	4b4e      	ldr	r3, [pc, #312]	; (8004400 <xTaskIncrementTick+0x144>)
 80042c8:	681b      	ldr	r3, [r3, #0]
 80042ca:	2b00      	cmp	r3, #0
 80042cc:	d000      	beq.n	80042d0 <xTaskIncrementTick+0x14>
 80042ce:	e08a      	b.n	80043e6 <xTaskIncrementTick+0x12a>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 80042d0:	4b4c      	ldr	r3, [pc, #304]	; (8004404 <xTaskIncrementTick+0x148>)
 80042d2:	681b      	ldr	r3, [r3, #0]
 80042d4:	3301      	adds	r3, #1
 80042d6:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 80042d8:	4b4a      	ldr	r3, [pc, #296]	; (8004404 <xTaskIncrementTick+0x148>)
 80042da:	693a      	ldr	r2, [r7, #16]
 80042dc:	601a      	str	r2, [r3, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 80042de:	693b      	ldr	r3, [r7, #16]
 80042e0:	2b00      	cmp	r3, #0
 80042e2:	d117      	bne.n	8004314 <xTaskIncrementTick+0x58>
		{
			taskSWITCH_DELAYED_LISTS();
 80042e4:	4b48      	ldr	r3, [pc, #288]	; (8004408 <xTaskIncrementTick+0x14c>)
 80042e6:	681b      	ldr	r3, [r3, #0]
 80042e8:	681b      	ldr	r3, [r3, #0]
 80042ea:	2b00      	cmp	r3, #0
 80042ec:	d001      	beq.n	80042f2 <xTaskIncrementTick+0x36>
 80042ee:	b672      	cpsid	i
 80042f0:	e7fe      	b.n	80042f0 <xTaskIncrementTick+0x34>
 80042f2:	4b45      	ldr	r3, [pc, #276]	; (8004408 <xTaskIncrementTick+0x14c>)
 80042f4:	681b      	ldr	r3, [r3, #0]
 80042f6:	60fb      	str	r3, [r7, #12]
 80042f8:	4b44      	ldr	r3, [pc, #272]	; (800440c <xTaskIncrementTick+0x150>)
 80042fa:	681a      	ldr	r2, [r3, #0]
 80042fc:	4b42      	ldr	r3, [pc, #264]	; (8004408 <xTaskIncrementTick+0x14c>)
 80042fe:	601a      	str	r2, [r3, #0]
 8004300:	4b42      	ldr	r3, [pc, #264]	; (800440c <xTaskIncrementTick+0x150>)
 8004302:	68fa      	ldr	r2, [r7, #12]
 8004304:	601a      	str	r2, [r3, #0]
 8004306:	4b42      	ldr	r3, [pc, #264]	; (8004410 <xTaskIncrementTick+0x154>)
 8004308:	681b      	ldr	r3, [r3, #0]
 800430a:	1c5a      	adds	r2, r3, #1
 800430c:	4b40      	ldr	r3, [pc, #256]	; (8004410 <xTaskIncrementTick+0x154>)
 800430e:	601a      	str	r2, [r3, #0]
 8004310:	f000 fc42 	bl	8004b98 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 8004314:	4b3f      	ldr	r3, [pc, #252]	; (8004414 <xTaskIncrementTick+0x158>)
 8004316:	681b      	ldr	r3, [r3, #0]
 8004318:	693a      	ldr	r2, [r7, #16]
 800431a:	429a      	cmp	r2, r3
 800431c:	d349      	bcc.n	80043b2 <xTaskIncrementTick+0xf6>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800431e:	4b3a      	ldr	r3, [pc, #232]	; (8004408 <xTaskIncrementTick+0x14c>)
 8004320:	681b      	ldr	r3, [r3, #0]
 8004322:	681b      	ldr	r3, [r3, #0]
 8004324:	2b00      	cmp	r3, #0
 8004326:	d104      	bne.n	8004332 <xTaskIncrementTick+0x76>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8004328:	4b3a      	ldr	r3, [pc, #232]	; (8004414 <xTaskIncrementTick+0x158>)
 800432a:	2201      	movs	r2, #1
 800432c:	4252      	negs	r2, r2
 800432e:	601a      	str	r2, [r3, #0]
					break;
 8004330:	e03f      	b.n	80043b2 <xTaskIncrementTick+0xf6>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8004332:	4b35      	ldr	r3, [pc, #212]	; (8004408 <xTaskIncrementTick+0x14c>)
 8004334:	681b      	ldr	r3, [r3, #0]
 8004336:	68db      	ldr	r3, [r3, #12]
 8004338:	68db      	ldr	r3, [r3, #12]
 800433a:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 800433c:	68bb      	ldr	r3, [r7, #8]
 800433e:	685b      	ldr	r3, [r3, #4]
 8004340:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 8004342:	693a      	ldr	r2, [r7, #16]
 8004344:	687b      	ldr	r3, [r7, #4]
 8004346:	429a      	cmp	r2, r3
 8004348:	d203      	bcs.n	8004352 <xTaskIncrementTick+0x96>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 800434a:	4b32      	ldr	r3, [pc, #200]	; (8004414 <xTaskIncrementTick+0x158>)
 800434c:	687a      	ldr	r2, [r7, #4]
 800434e:	601a      	str	r2, [r3, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 8004350:	e02f      	b.n	80043b2 <xTaskIncrementTick+0xf6>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8004352:	68bb      	ldr	r3, [r7, #8]
 8004354:	3304      	adds	r3, #4
 8004356:	0018      	movs	r0, r3
 8004358:	f7fd f937 	bl	80015ca <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 800435c:	68bb      	ldr	r3, [r7, #8]
 800435e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004360:	2b00      	cmp	r3, #0
 8004362:	d004      	beq.n	800436e <xTaskIncrementTick+0xb2>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8004364:	68bb      	ldr	r3, [r7, #8]
 8004366:	3318      	adds	r3, #24
 8004368:	0018      	movs	r0, r3
 800436a:	f7fd f92e 	bl	80015ca <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 800436e:	68bb      	ldr	r3, [r7, #8]
 8004370:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004372:	4b29      	ldr	r3, [pc, #164]	; (8004418 <xTaskIncrementTick+0x15c>)
 8004374:	681b      	ldr	r3, [r3, #0]
 8004376:	429a      	cmp	r2, r3
 8004378:	d903      	bls.n	8004382 <xTaskIncrementTick+0xc6>
 800437a:	68bb      	ldr	r3, [r7, #8]
 800437c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800437e:	4b26      	ldr	r3, [pc, #152]	; (8004418 <xTaskIncrementTick+0x15c>)
 8004380:	601a      	str	r2, [r3, #0]
 8004382:	68bb      	ldr	r3, [r7, #8]
 8004384:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004386:	0013      	movs	r3, r2
 8004388:	009b      	lsls	r3, r3, #2
 800438a:	189b      	adds	r3, r3, r2
 800438c:	009b      	lsls	r3, r3, #2
 800438e:	4a23      	ldr	r2, [pc, #140]	; (800441c <xTaskIncrementTick+0x160>)
 8004390:	189a      	adds	r2, r3, r2
 8004392:	68bb      	ldr	r3, [r7, #8]
 8004394:	3304      	adds	r3, #4
 8004396:	0019      	movs	r1, r3
 8004398:	0010      	movs	r0, r2
 800439a:	f7fd f8be 	bl	800151a <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800439e:	68bb      	ldr	r3, [r7, #8]
 80043a0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80043a2:	4b1f      	ldr	r3, [pc, #124]	; (8004420 <xTaskIncrementTick+0x164>)
 80043a4:	681b      	ldr	r3, [r3, #0]
 80043a6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80043a8:	429a      	cmp	r2, r3
 80043aa:	d3b8      	bcc.n	800431e <xTaskIncrementTick+0x62>
						{
							xSwitchRequired = pdTRUE;
 80043ac:	2301      	movs	r3, #1
 80043ae:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80043b0:	e7b5      	b.n	800431e <xTaskIncrementTick+0x62>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 80043b2:	4b1b      	ldr	r3, [pc, #108]	; (8004420 <xTaskIncrementTick+0x164>)
 80043b4:	681b      	ldr	r3, [r3, #0]
 80043b6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80043b8:	4918      	ldr	r1, [pc, #96]	; (800441c <xTaskIncrementTick+0x160>)
 80043ba:	0013      	movs	r3, r2
 80043bc:	009b      	lsls	r3, r3, #2
 80043be:	189b      	adds	r3, r3, r2
 80043c0:	009b      	lsls	r3, r3, #2
 80043c2:	585b      	ldr	r3, [r3, r1]
 80043c4:	2b01      	cmp	r3, #1
 80043c6:	d901      	bls.n	80043cc <xTaskIncrementTick+0x110>
			{
				xSwitchRequired = pdTRUE;
 80043c8:	2301      	movs	r3, #1
 80043ca:	617b      	str	r3, [r7, #20]

		#if ( configUSE_TICK_HOOK == 1 )
		{
			/* Guard against the tick hook being called when the pended tick
			count is being unwound (when the scheduler is being unlocked). */
			if( xPendedTicks == ( TickType_t ) 0 )
 80043cc:	4b15      	ldr	r3, [pc, #84]	; (8004424 <xTaskIncrementTick+0x168>)
 80043ce:	681b      	ldr	r3, [r3, #0]
 80043d0:	2b00      	cmp	r3, #0
 80043d2:	d101      	bne.n	80043d8 <xTaskIncrementTick+0x11c>
			{
				vApplicationTickHook();
 80043d4:	f002 fdcc 	bl	8006f70 <vApplicationTickHook>
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 80043d8:	4b13      	ldr	r3, [pc, #76]	; (8004428 <xTaskIncrementTick+0x16c>)
 80043da:	681b      	ldr	r3, [r3, #0]
 80043dc:	2b00      	cmp	r3, #0
 80043de:	d009      	beq.n	80043f4 <xTaskIncrementTick+0x138>
			{
				xSwitchRequired = pdTRUE;
 80043e0:	2301      	movs	r3, #1
 80043e2:	617b      	str	r3, [r7, #20]
 80043e4:	e006      	b.n	80043f4 <xTaskIncrementTick+0x138>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 80043e6:	4b0f      	ldr	r3, [pc, #60]	; (8004424 <xTaskIncrementTick+0x168>)
 80043e8:	681b      	ldr	r3, [r3, #0]
 80043ea:	1c5a      	adds	r2, r3, #1
 80043ec:	4b0d      	ldr	r3, [pc, #52]	; (8004424 <xTaskIncrementTick+0x168>)
 80043ee:	601a      	str	r2, [r3, #0]

		/* The tick hook gets called at regular intervals, even if the
		scheduler is locked. */
		#if ( configUSE_TICK_HOOK == 1 )
		{
			vApplicationTickHook();
 80043f0:	f002 fdbe 	bl	8006f70 <vApplicationTickHook>
		}
		#endif
	}

	return xSwitchRequired;
 80043f4:	697b      	ldr	r3, [r7, #20]
}
 80043f6:	0018      	movs	r0, r3
 80043f8:	46bd      	mov	sp, r7
 80043fa:	b006      	add	sp, #24
 80043fc:	bd80      	pop	{r7, pc}
 80043fe:	46c0      	nop			; (mov r8, r8)
 8004400:	20000d98 	.word	0x20000d98
 8004404:	20000d74 	.word	0x20000d74
 8004408:	20000d28 	.word	0x20000d28
 800440c:	20000d2c 	.word	0x20000d2c
 8004410:	20000d88 	.word	0x20000d88
 8004414:	20000d90 	.word	0x20000d90
 8004418:	20000d78 	.word	0x20000d78
 800441c:	20000c9c 	.word	0x20000c9c
 8004420:	20000c98 	.word	0x20000c98
 8004424:	20000d80 	.word	0x20000d80
 8004428:	20000d84 	.word	0x20000d84

0800442c <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 800442c:	b580      	push	{r7, lr}
 800442e:	b084      	sub	sp, #16
 8004430:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8004432:	4b35      	ldr	r3, [pc, #212]	; (8004508 <vTaskSwitchContext+0xdc>)
 8004434:	681b      	ldr	r3, [r3, #0]
 8004436:	2b00      	cmp	r3, #0
 8004438:	d003      	beq.n	8004442 <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 800443a:	4b34      	ldr	r3, [pc, #208]	; (800450c <vTaskSwitchContext+0xe0>)
 800443c:	2201      	movs	r2, #1
 800443e:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 8004440:	e05d      	b.n	80044fe <vTaskSwitchContext+0xd2>
		xYieldPending = pdFALSE;
 8004442:	4b32      	ldr	r3, [pc, #200]	; (800450c <vTaskSwitchContext+0xe0>)
 8004444:	2200      	movs	r2, #0
 8004446:	601a      	str	r2, [r3, #0]
		taskCHECK_FOR_STACK_OVERFLOW();
 8004448:	4b31      	ldr	r3, [pc, #196]	; (8004510 <vTaskSwitchContext+0xe4>)
 800444a:	681b      	ldr	r3, [r3, #0]
 800444c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800444e:	60bb      	str	r3, [r7, #8]
 8004450:	4b30      	ldr	r3, [pc, #192]	; (8004514 <vTaskSwitchContext+0xe8>)
 8004452:	607b      	str	r3, [r7, #4]
 8004454:	68bb      	ldr	r3, [r7, #8]
 8004456:	681a      	ldr	r2, [r3, #0]
 8004458:	687b      	ldr	r3, [r7, #4]
 800445a:	429a      	cmp	r2, r3
 800445c:	d111      	bne.n	8004482 <vTaskSwitchContext+0x56>
 800445e:	68bb      	ldr	r3, [r7, #8]
 8004460:	3304      	adds	r3, #4
 8004462:	681a      	ldr	r2, [r3, #0]
 8004464:	687b      	ldr	r3, [r7, #4]
 8004466:	429a      	cmp	r2, r3
 8004468:	d10b      	bne.n	8004482 <vTaskSwitchContext+0x56>
 800446a:	68bb      	ldr	r3, [r7, #8]
 800446c:	3308      	adds	r3, #8
 800446e:	681a      	ldr	r2, [r3, #0]
 8004470:	687b      	ldr	r3, [r7, #4]
 8004472:	429a      	cmp	r2, r3
 8004474:	d105      	bne.n	8004482 <vTaskSwitchContext+0x56>
 8004476:	68bb      	ldr	r3, [r7, #8]
 8004478:	330c      	adds	r3, #12
 800447a:	681a      	ldr	r2, [r3, #0]
 800447c:	687b      	ldr	r3, [r7, #4]
 800447e:	429a      	cmp	r2, r3
 8004480:	d008      	beq.n	8004494 <vTaskSwitchContext+0x68>
 8004482:	4b23      	ldr	r3, [pc, #140]	; (8004510 <vTaskSwitchContext+0xe4>)
 8004484:	681a      	ldr	r2, [r3, #0]
 8004486:	4b22      	ldr	r3, [pc, #136]	; (8004510 <vTaskSwitchContext+0xe4>)
 8004488:	681b      	ldr	r3, [r3, #0]
 800448a:	3334      	adds	r3, #52	; 0x34
 800448c:	0019      	movs	r1, r3
 800448e:	0010      	movs	r0, r2
 8004490:	f002 fd68 	bl	8006f64 <vApplicationStackOverflowHook>
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8004494:	4b20      	ldr	r3, [pc, #128]	; (8004518 <vTaskSwitchContext+0xec>)
 8004496:	681b      	ldr	r3, [r3, #0]
 8004498:	60fb      	str	r3, [r7, #12]
 800449a:	e007      	b.n	80044ac <vTaskSwitchContext+0x80>
 800449c:	68fb      	ldr	r3, [r7, #12]
 800449e:	2b00      	cmp	r3, #0
 80044a0:	d101      	bne.n	80044a6 <vTaskSwitchContext+0x7a>
 80044a2:	b672      	cpsid	i
 80044a4:	e7fe      	b.n	80044a4 <vTaskSwitchContext+0x78>
 80044a6:	68fb      	ldr	r3, [r7, #12]
 80044a8:	3b01      	subs	r3, #1
 80044aa:	60fb      	str	r3, [r7, #12]
 80044ac:	491b      	ldr	r1, [pc, #108]	; (800451c <vTaskSwitchContext+0xf0>)
 80044ae:	68fa      	ldr	r2, [r7, #12]
 80044b0:	0013      	movs	r3, r2
 80044b2:	009b      	lsls	r3, r3, #2
 80044b4:	189b      	adds	r3, r3, r2
 80044b6:	009b      	lsls	r3, r3, #2
 80044b8:	585b      	ldr	r3, [r3, r1]
 80044ba:	2b00      	cmp	r3, #0
 80044bc:	d0ee      	beq.n	800449c <vTaskSwitchContext+0x70>
 80044be:	68fa      	ldr	r2, [r7, #12]
 80044c0:	0013      	movs	r3, r2
 80044c2:	009b      	lsls	r3, r3, #2
 80044c4:	189b      	adds	r3, r3, r2
 80044c6:	009b      	lsls	r3, r3, #2
 80044c8:	4a14      	ldr	r2, [pc, #80]	; (800451c <vTaskSwitchContext+0xf0>)
 80044ca:	189b      	adds	r3, r3, r2
 80044cc:	603b      	str	r3, [r7, #0]
 80044ce:	683b      	ldr	r3, [r7, #0]
 80044d0:	685b      	ldr	r3, [r3, #4]
 80044d2:	685a      	ldr	r2, [r3, #4]
 80044d4:	683b      	ldr	r3, [r7, #0]
 80044d6:	605a      	str	r2, [r3, #4]
 80044d8:	683b      	ldr	r3, [r7, #0]
 80044da:	685a      	ldr	r2, [r3, #4]
 80044dc:	683b      	ldr	r3, [r7, #0]
 80044de:	3308      	adds	r3, #8
 80044e0:	429a      	cmp	r2, r3
 80044e2:	d104      	bne.n	80044ee <vTaskSwitchContext+0xc2>
 80044e4:	683b      	ldr	r3, [r7, #0]
 80044e6:	685b      	ldr	r3, [r3, #4]
 80044e8:	685a      	ldr	r2, [r3, #4]
 80044ea:	683b      	ldr	r3, [r7, #0]
 80044ec:	605a      	str	r2, [r3, #4]
 80044ee:	683b      	ldr	r3, [r7, #0]
 80044f0:	685b      	ldr	r3, [r3, #4]
 80044f2:	68da      	ldr	r2, [r3, #12]
 80044f4:	4b06      	ldr	r3, [pc, #24]	; (8004510 <vTaskSwitchContext+0xe4>)
 80044f6:	601a      	str	r2, [r3, #0]
 80044f8:	4b07      	ldr	r3, [pc, #28]	; (8004518 <vTaskSwitchContext+0xec>)
 80044fa:	68fa      	ldr	r2, [r7, #12]
 80044fc:	601a      	str	r2, [r3, #0]
}
 80044fe:	46c0      	nop			; (mov r8, r8)
 8004500:	46bd      	mov	sp, r7
 8004502:	b004      	add	sp, #16
 8004504:	bd80      	pop	{r7, pc}
 8004506:	46c0      	nop			; (mov r8, r8)
 8004508:	20000d98 	.word	0x20000d98
 800450c:	20000d84 	.word	0x20000d84
 8004510:	20000c98 	.word	0x20000c98
 8004514:	a5a5a5a5 	.word	0xa5a5a5a5
 8004518:	20000d78 	.word	0x20000d78
 800451c:	20000c9c 	.word	0x20000c9c

08004520 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 8004520:	b580      	push	{r7, lr}
 8004522:	b082      	sub	sp, #8
 8004524:	af00      	add	r7, sp, #0
 8004526:	6078      	str	r0, [r7, #4]
 8004528:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 800452a:	687b      	ldr	r3, [r7, #4]
 800452c:	2b00      	cmp	r3, #0
 800452e:	d101      	bne.n	8004534 <vTaskPlaceOnEventList+0x14>
 8004530:	b672      	cpsid	i
 8004532:	e7fe      	b.n	8004532 <vTaskPlaceOnEventList+0x12>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8004534:	4b08      	ldr	r3, [pc, #32]	; (8004558 <vTaskPlaceOnEventList+0x38>)
 8004536:	681b      	ldr	r3, [r3, #0]
 8004538:	3318      	adds	r3, #24
 800453a:	001a      	movs	r2, r3
 800453c:	687b      	ldr	r3, [r7, #4]
 800453e:	0011      	movs	r1, r2
 8004540:	0018      	movs	r0, r3
 8004542:	f7fd f80c 	bl	800155e <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8004546:	683b      	ldr	r3, [r7, #0]
 8004548:	2101      	movs	r1, #1
 800454a:	0018      	movs	r0, r3
 800454c:	f000 ff66 	bl	800541c <prvAddCurrentTaskToDelayedList>
}
 8004550:	46c0      	nop			; (mov r8, r8)
 8004552:	46bd      	mov	sp, r7
 8004554:	b002      	add	sp, #8
 8004556:	bd80      	pop	{r7, pc}
 8004558:	20000c98 	.word	0x20000c98

0800455c <vTaskPlaceOnUnorderedEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnUnorderedEventList( List_t * pxEventList, const TickType_t xItemValue, const TickType_t xTicksToWait )
{
 800455c:	b580      	push	{r7, lr}
 800455e:	b084      	sub	sp, #16
 8004560:	af00      	add	r7, sp, #0
 8004562:	60f8      	str	r0, [r7, #12]
 8004564:	60b9      	str	r1, [r7, #8]
 8004566:	607a      	str	r2, [r7, #4]
	configASSERT( pxEventList );
 8004568:	68fb      	ldr	r3, [r7, #12]
 800456a:	2b00      	cmp	r3, #0
 800456c:	d101      	bne.n	8004572 <vTaskPlaceOnUnorderedEventList+0x16>
 800456e:	b672      	cpsid	i
 8004570:	e7fe      	b.n	8004570 <vTaskPlaceOnUnorderedEventList+0x14>

	/* THIS FUNCTION MUST BE CALLED WITH THE SCHEDULER SUSPENDED.  It is used by
	the event groups implementation. */
	configASSERT( uxSchedulerSuspended != 0 );
 8004572:	4b0f      	ldr	r3, [pc, #60]	; (80045b0 <vTaskPlaceOnUnorderedEventList+0x54>)
 8004574:	681b      	ldr	r3, [r3, #0]
 8004576:	2b00      	cmp	r3, #0
 8004578:	d101      	bne.n	800457e <vTaskPlaceOnUnorderedEventList+0x22>
 800457a:	b672      	cpsid	i
 800457c:	e7fe      	b.n	800457c <vTaskPlaceOnUnorderedEventList+0x20>

	/* Store the item value in the event list item.  It is safe to access the
	event list item here as interrupts won't access the event list item of a
	task that is not in the Blocked state. */
	listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xEventListItem ), xItemValue | taskEVENT_LIST_ITEM_VALUE_IN_USE );
 800457e:	4b0d      	ldr	r3, [pc, #52]	; (80045b4 <vTaskPlaceOnUnorderedEventList+0x58>)
 8004580:	681b      	ldr	r3, [r3, #0]
 8004582:	68ba      	ldr	r2, [r7, #8]
 8004584:	2180      	movs	r1, #128	; 0x80
 8004586:	0609      	lsls	r1, r1, #24
 8004588:	430a      	orrs	r2, r1
 800458a:	619a      	str	r2, [r3, #24]
	/* Place the event list item of the TCB at the end of the appropriate event
	list.  It is safe to access the event list here because it is part of an
	event group implementation - and interrupts don't access event groups
	directly (instead they access them indirectly by pending function calls to
	the task level). */
	vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800458c:	4b09      	ldr	r3, [pc, #36]	; (80045b4 <vTaskPlaceOnUnorderedEventList+0x58>)
 800458e:	681b      	ldr	r3, [r3, #0]
 8004590:	3318      	adds	r3, #24
 8004592:	001a      	movs	r2, r3
 8004594:	68fb      	ldr	r3, [r7, #12]
 8004596:	0011      	movs	r1, r2
 8004598:	0018      	movs	r0, r3
 800459a:	f7fc ffbe 	bl	800151a <vListInsertEnd>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 800459e:	687b      	ldr	r3, [r7, #4]
 80045a0:	2101      	movs	r1, #1
 80045a2:	0018      	movs	r0, r3
 80045a4:	f000 ff3a 	bl	800541c <prvAddCurrentTaskToDelayedList>
}
 80045a8:	46c0      	nop			; (mov r8, r8)
 80045aa:	46bd      	mov	sp, r7
 80045ac:	b004      	add	sp, #16
 80045ae:	bd80      	pop	{r7, pc}
 80045b0:	20000d98 	.word	0x20000d98
 80045b4:	20000c98 	.word	0x20000c98

080045b8 <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 80045b8:	b580      	push	{r7, lr}
 80045ba:	b084      	sub	sp, #16
 80045bc:	af00      	add	r7, sp, #0
 80045be:	60f8      	str	r0, [r7, #12]
 80045c0:	60b9      	str	r1, [r7, #8]
 80045c2:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 80045c4:	68fb      	ldr	r3, [r7, #12]
 80045c6:	2b00      	cmp	r3, #0
 80045c8:	d101      	bne.n	80045ce <vTaskPlaceOnEventListRestricted+0x16>
 80045ca:	b672      	cpsid	i
 80045cc:	e7fe      	b.n	80045cc <vTaskPlaceOnEventListRestricted+0x14>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 80045ce:	4b0c      	ldr	r3, [pc, #48]	; (8004600 <vTaskPlaceOnEventListRestricted+0x48>)
 80045d0:	681b      	ldr	r3, [r3, #0]
 80045d2:	3318      	adds	r3, #24
 80045d4:	001a      	movs	r2, r3
 80045d6:	68fb      	ldr	r3, [r7, #12]
 80045d8:	0011      	movs	r1, r2
 80045da:	0018      	movs	r0, r3
 80045dc:	f7fc ff9d 	bl	800151a <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 80045e0:	687b      	ldr	r3, [r7, #4]
 80045e2:	2b00      	cmp	r3, #0
 80045e4:	d002      	beq.n	80045ec <vTaskPlaceOnEventListRestricted+0x34>
		{
			xTicksToWait = portMAX_DELAY;
 80045e6:	2301      	movs	r3, #1
 80045e8:	425b      	negs	r3, r3
 80045ea:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 80045ec:	687a      	ldr	r2, [r7, #4]
 80045ee:	68bb      	ldr	r3, [r7, #8]
 80045f0:	0011      	movs	r1, r2
 80045f2:	0018      	movs	r0, r3
 80045f4:	f000 ff12 	bl	800541c <prvAddCurrentTaskToDelayedList>
	}
 80045f8:	46c0      	nop			; (mov r8, r8)
 80045fa:	46bd      	mov	sp, r7
 80045fc:	b004      	add	sp, #16
 80045fe:	bd80      	pop	{r7, pc}
 8004600:	20000c98 	.word	0x20000c98

08004604 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 8004604:	b580      	push	{r7, lr}
 8004606:	b084      	sub	sp, #16
 8004608:	af00      	add	r7, sp, #0
 800460a:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800460c:	687b      	ldr	r3, [r7, #4]
 800460e:	68db      	ldr	r3, [r3, #12]
 8004610:	68db      	ldr	r3, [r3, #12]
 8004612:	60bb      	str	r3, [r7, #8]
	configASSERT( pxUnblockedTCB );
 8004614:	68bb      	ldr	r3, [r7, #8]
 8004616:	2b00      	cmp	r3, #0
 8004618:	d101      	bne.n	800461e <xTaskRemoveFromEventList+0x1a>
 800461a:	b672      	cpsid	i
 800461c:	e7fe      	b.n	800461c <xTaskRemoveFromEventList+0x18>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 800461e:	68bb      	ldr	r3, [r7, #8]
 8004620:	3318      	adds	r3, #24
 8004622:	0018      	movs	r0, r3
 8004624:	f7fc ffd1 	bl	80015ca <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8004628:	4b1e      	ldr	r3, [pc, #120]	; (80046a4 <xTaskRemoveFromEventList+0xa0>)
 800462a:	681b      	ldr	r3, [r3, #0]
 800462c:	2b00      	cmp	r3, #0
 800462e:	d11d      	bne.n	800466c <xTaskRemoveFromEventList+0x68>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 8004630:	68bb      	ldr	r3, [r7, #8]
 8004632:	3304      	adds	r3, #4
 8004634:	0018      	movs	r0, r3
 8004636:	f7fc ffc8 	bl	80015ca <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 800463a:	68bb      	ldr	r3, [r7, #8]
 800463c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800463e:	4b1a      	ldr	r3, [pc, #104]	; (80046a8 <xTaskRemoveFromEventList+0xa4>)
 8004640:	681b      	ldr	r3, [r3, #0]
 8004642:	429a      	cmp	r2, r3
 8004644:	d903      	bls.n	800464e <xTaskRemoveFromEventList+0x4a>
 8004646:	68bb      	ldr	r3, [r7, #8]
 8004648:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800464a:	4b17      	ldr	r3, [pc, #92]	; (80046a8 <xTaskRemoveFromEventList+0xa4>)
 800464c:	601a      	str	r2, [r3, #0]
 800464e:	68bb      	ldr	r3, [r7, #8]
 8004650:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004652:	0013      	movs	r3, r2
 8004654:	009b      	lsls	r3, r3, #2
 8004656:	189b      	adds	r3, r3, r2
 8004658:	009b      	lsls	r3, r3, #2
 800465a:	4a14      	ldr	r2, [pc, #80]	; (80046ac <xTaskRemoveFromEventList+0xa8>)
 800465c:	189a      	adds	r2, r3, r2
 800465e:	68bb      	ldr	r3, [r7, #8]
 8004660:	3304      	adds	r3, #4
 8004662:	0019      	movs	r1, r3
 8004664:	0010      	movs	r0, r2
 8004666:	f7fc ff58 	bl	800151a <vListInsertEnd>
 800466a:	e007      	b.n	800467c <xTaskRemoveFromEventList+0x78>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 800466c:	68bb      	ldr	r3, [r7, #8]
 800466e:	3318      	adds	r3, #24
 8004670:	001a      	movs	r2, r3
 8004672:	4b0f      	ldr	r3, [pc, #60]	; (80046b0 <xTaskRemoveFromEventList+0xac>)
 8004674:	0011      	movs	r1, r2
 8004676:	0018      	movs	r0, r3
 8004678:	f7fc ff4f 	bl	800151a <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 800467c:	68bb      	ldr	r3, [r7, #8]
 800467e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004680:	4b0c      	ldr	r3, [pc, #48]	; (80046b4 <xTaskRemoveFromEventList+0xb0>)
 8004682:	681b      	ldr	r3, [r3, #0]
 8004684:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004686:	429a      	cmp	r2, r3
 8004688:	d905      	bls.n	8004696 <xTaskRemoveFromEventList+0x92>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 800468a:	2301      	movs	r3, #1
 800468c:	60fb      	str	r3, [r7, #12]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 800468e:	4b0a      	ldr	r3, [pc, #40]	; (80046b8 <xTaskRemoveFromEventList+0xb4>)
 8004690:	2201      	movs	r2, #1
 8004692:	601a      	str	r2, [r3, #0]
 8004694:	e001      	b.n	800469a <xTaskRemoveFromEventList+0x96>
	}
	else
	{
		xReturn = pdFALSE;
 8004696:	2300      	movs	r3, #0
 8004698:	60fb      	str	r3, [r7, #12]
	}

	return xReturn;
 800469a:	68fb      	ldr	r3, [r7, #12]
}
 800469c:	0018      	movs	r0, r3
 800469e:	46bd      	mov	sp, r7
 80046a0:	b004      	add	sp, #16
 80046a2:	bd80      	pop	{r7, pc}
 80046a4:	20000d98 	.word	0x20000d98
 80046a8:	20000d78 	.word	0x20000d78
 80046ac:	20000c9c 	.word	0x20000c9c
 80046b0:	20000d30 	.word	0x20000d30
 80046b4:	20000c98 	.word	0x20000c98
 80046b8:	20000d84 	.word	0x20000d84

080046bc <vTaskRemoveFromUnorderedEventList>:
/*-----------------------------------------------------------*/

void vTaskRemoveFromUnorderedEventList( ListItem_t * pxEventListItem, const TickType_t xItemValue )
{
 80046bc:	b580      	push	{r7, lr}
 80046be:	b084      	sub	sp, #16
 80046c0:	af00      	add	r7, sp, #0
 80046c2:	6078      	str	r0, [r7, #4]
 80046c4:	6039      	str	r1, [r7, #0]
TCB_t *pxUnblockedTCB;

	/* THIS FUNCTION MUST BE CALLED WITH THE SCHEDULER SUSPENDED.  It is used by
	the event flags implementation. */
	configASSERT( uxSchedulerSuspended != pdFALSE );
 80046c6:	4b21      	ldr	r3, [pc, #132]	; (800474c <vTaskRemoveFromUnorderedEventList+0x90>)
 80046c8:	681b      	ldr	r3, [r3, #0]
 80046ca:	2b00      	cmp	r3, #0
 80046cc:	d101      	bne.n	80046d2 <vTaskRemoveFromUnorderedEventList+0x16>
 80046ce:	b672      	cpsid	i
 80046d0:	e7fe      	b.n	80046d0 <vTaskRemoveFromUnorderedEventList+0x14>

	/* Store the new item value in the event list. */
	listSET_LIST_ITEM_VALUE( pxEventListItem, xItemValue | taskEVENT_LIST_ITEM_VALUE_IN_USE );
 80046d2:	683b      	ldr	r3, [r7, #0]
 80046d4:	2280      	movs	r2, #128	; 0x80
 80046d6:	0612      	lsls	r2, r2, #24
 80046d8:	431a      	orrs	r2, r3
 80046da:	687b      	ldr	r3, [r7, #4]
 80046dc:	601a      	str	r2, [r3, #0]

	/* Remove the event list form the event flag.  Interrupts do not access
	event flags. */
	pxUnblockedTCB = listGET_LIST_ITEM_OWNER( pxEventListItem ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80046de:	687b      	ldr	r3, [r7, #4]
 80046e0:	68db      	ldr	r3, [r3, #12]
 80046e2:	60fb      	str	r3, [r7, #12]
	configASSERT( pxUnblockedTCB );
 80046e4:	68fb      	ldr	r3, [r7, #12]
 80046e6:	2b00      	cmp	r3, #0
 80046e8:	d101      	bne.n	80046ee <vTaskRemoveFromUnorderedEventList+0x32>
 80046ea:	b672      	cpsid	i
 80046ec:	e7fe      	b.n	80046ec <vTaskRemoveFromUnorderedEventList+0x30>
	( void ) uxListRemove( pxEventListItem );
 80046ee:	687b      	ldr	r3, [r7, #4]
 80046f0:	0018      	movs	r0, r3
 80046f2:	f7fc ff6a 	bl	80015ca <uxListRemove>
	#endif

	/* Remove the task from the delayed list and add it to the ready list.  The
	scheduler is suspended so interrupts will not be accessing the ready
	lists. */
	( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 80046f6:	68fb      	ldr	r3, [r7, #12]
 80046f8:	3304      	adds	r3, #4
 80046fa:	0018      	movs	r0, r3
 80046fc:	f7fc ff65 	bl	80015ca <uxListRemove>
	prvAddTaskToReadyList( pxUnblockedTCB );
 8004700:	68fb      	ldr	r3, [r7, #12]
 8004702:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004704:	4b12      	ldr	r3, [pc, #72]	; (8004750 <vTaskRemoveFromUnorderedEventList+0x94>)
 8004706:	681b      	ldr	r3, [r3, #0]
 8004708:	429a      	cmp	r2, r3
 800470a:	d903      	bls.n	8004714 <vTaskRemoveFromUnorderedEventList+0x58>
 800470c:	68fb      	ldr	r3, [r7, #12]
 800470e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004710:	4b0f      	ldr	r3, [pc, #60]	; (8004750 <vTaskRemoveFromUnorderedEventList+0x94>)
 8004712:	601a      	str	r2, [r3, #0]
 8004714:	68fb      	ldr	r3, [r7, #12]
 8004716:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004718:	0013      	movs	r3, r2
 800471a:	009b      	lsls	r3, r3, #2
 800471c:	189b      	adds	r3, r3, r2
 800471e:	009b      	lsls	r3, r3, #2
 8004720:	4a0c      	ldr	r2, [pc, #48]	; (8004754 <vTaskRemoveFromUnorderedEventList+0x98>)
 8004722:	189a      	adds	r2, r3, r2
 8004724:	68fb      	ldr	r3, [r7, #12]
 8004726:	3304      	adds	r3, #4
 8004728:	0019      	movs	r1, r3
 800472a:	0010      	movs	r0, r2
 800472c:	f7fc fef5 	bl	800151a <vListInsertEnd>

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 8004730:	68fb      	ldr	r3, [r7, #12]
 8004732:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004734:	4b08      	ldr	r3, [pc, #32]	; (8004758 <vTaskRemoveFromUnorderedEventList+0x9c>)
 8004736:	681b      	ldr	r3, [r3, #0]
 8004738:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800473a:	429a      	cmp	r2, r3
 800473c:	d902      	bls.n	8004744 <vTaskRemoveFromUnorderedEventList+0x88>
	{
		/* The unblocked task has a priority above that of the calling task, so
		a context switch is required.  This function is called with the
		scheduler suspended so xYieldPending is set so the context switch
		occurs immediately that the scheduler is resumed (unsuspended). */
		xYieldPending = pdTRUE;
 800473e:	4b07      	ldr	r3, [pc, #28]	; (800475c <vTaskRemoveFromUnorderedEventList+0xa0>)
 8004740:	2201      	movs	r2, #1
 8004742:	601a      	str	r2, [r3, #0]
	}
}
 8004744:	46c0      	nop			; (mov r8, r8)
 8004746:	46bd      	mov	sp, r7
 8004748:	b004      	add	sp, #16
 800474a:	bd80      	pop	{r7, pc}
 800474c:	20000d98 	.word	0x20000d98
 8004750:	20000d78 	.word	0x20000d78
 8004754:	20000c9c 	.word	0x20000c9c
 8004758:	20000c98 	.word	0x20000c98
 800475c:	20000d84 	.word	0x20000d84

08004760 <vTaskSetTimeOutState>:
/*-----------------------------------------------------------*/

void vTaskSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 8004760:	b580      	push	{r7, lr}
 8004762:	b082      	sub	sp, #8
 8004764:	af00      	add	r7, sp, #0
 8004766:	6078      	str	r0, [r7, #4]
	configASSERT( pxTimeOut );
 8004768:	687b      	ldr	r3, [r7, #4]
 800476a:	2b00      	cmp	r3, #0
 800476c:	d101      	bne.n	8004772 <vTaskSetTimeOutState+0x12>
 800476e:	b672      	cpsid	i
 8004770:	e7fe      	b.n	8004770 <vTaskSetTimeOutState+0x10>
	taskENTER_CRITICAL();
 8004772:	f7fc fff3 	bl	800175c <vPortEnterCritical>
	{
		pxTimeOut->xOverflowCount = xNumOfOverflows;
 8004776:	4b07      	ldr	r3, [pc, #28]	; (8004794 <vTaskSetTimeOutState+0x34>)
 8004778:	681a      	ldr	r2, [r3, #0]
 800477a:	687b      	ldr	r3, [r7, #4]
 800477c:	601a      	str	r2, [r3, #0]
		pxTimeOut->xTimeOnEntering = xTickCount;
 800477e:	4b06      	ldr	r3, [pc, #24]	; (8004798 <vTaskSetTimeOutState+0x38>)
 8004780:	681a      	ldr	r2, [r3, #0]
 8004782:	687b      	ldr	r3, [r7, #4]
 8004784:	605a      	str	r2, [r3, #4]
	}
	taskEXIT_CRITICAL();
 8004786:	f7fc fffb 	bl	8001780 <vPortExitCritical>
}
 800478a:	46c0      	nop			; (mov r8, r8)
 800478c:	46bd      	mov	sp, r7
 800478e:	b002      	add	sp, #8
 8004790:	bd80      	pop	{r7, pc}
 8004792:	46c0      	nop			; (mov r8, r8)
 8004794:	20000d88 	.word	0x20000d88
 8004798:	20000d74 	.word	0x20000d74

0800479c <vTaskInternalSetTimeOutState>:
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 800479c:	b580      	push	{r7, lr}
 800479e:	b082      	sub	sp, #8
 80047a0:	af00      	add	r7, sp, #0
 80047a2:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 80047a4:	4b05      	ldr	r3, [pc, #20]	; (80047bc <vTaskInternalSetTimeOutState+0x20>)
 80047a6:	681a      	ldr	r2, [r3, #0]
 80047a8:	687b      	ldr	r3, [r7, #4]
 80047aa:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 80047ac:	4b04      	ldr	r3, [pc, #16]	; (80047c0 <vTaskInternalSetTimeOutState+0x24>)
 80047ae:	681a      	ldr	r2, [r3, #0]
 80047b0:	687b      	ldr	r3, [r7, #4]
 80047b2:	605a      	str	r2, [r3, #4]
}
 80047b4:	46c0      	nop			; (mov r8, r8)
 80047b6:	46bd      	mov	sp, r7
 80047b8:	b002      	add	sp, #8
 80047ba:	bd80      	pop	{r7, pc}
 80047bc:	20000d88 	.word	0x20000d88
 80047c0:	20000d74 	.word	0x20000d74

080047c4 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 80047c4:	b580      	push	{r7, lr}
 80047c6:	b086      	sub	sp, #24
 80047c8:	af00      	add	r7, sp, #0
 80047ca:	6078      	str	r0, [r7, #4]
 80047cc:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 80047ce:	687b      	ldr	r3, [r7, #4]
 80047d0:	2b00      	cmp	r3, #0
 80047d2:	d101      	bne.n	80047d8 <xTaskCheckForTimeOut+0x14>
 80047d4:	b672      	cpsid	i
 80047d6:	e7fe      	b.n	80047d6 <xTaskCheckForTimeOut+0x12>
	configASSERT( pxTicksToWait );
 80047d8:	683b      	ldr	r3, [r7, #0]
 80047da:	2b00      	cmp	r3, #0
 80047dc:	d101      	bne.n	80047e2 <xTaskCheckForTimeOut+0x1e>
 80047de:	b672      	cpsid	i
 80047e0:	e7fe      	b.n	80047e0 <xTaskCheckForTimeOut+0x1c>

	taskENTER_CRITICAL();
 80047e2:	f7fc ffbb 	bl	800175c <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 80047e6:	4b1d      	ldr	r3, [pc, #116]	; (800485c <xTaskCheckForTimeOut+0x98>)
 80047e8:	681b      	ldr	r3, [r3, #0]
 80047ea:	613b      	str	r3, [r7, #16]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 80047ec:	687b      	ldr	r3, [r7, #4]
 80047ee:	685b      	ldr	r3, [r3, #4]
 80047f0:	693a      	ldr	r2, [r7, #16]
 80047f2:	1ad3      	subs	r3, r2, r3
 80047f4:	60fb      	str	r3, [r7, #12]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 80047f6:	683b      	ldr	r3, [r7, #0]
 80047f8:	681b      	ldr	r3, [r3, #0]
 80047fa:	3301      	adds	r3, #1
 80047fc:	d102      	bne.n	8004804 <xTaskCheckForTimeOut+0x40>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 80047fe:	2300      	movs	r3, #0
 8004800:	617b      	str	r3, [r7, #20]
 8004802:	e024      	b.n	800484e <xTaskCheckForTimeOut+0x8a>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 8004804:	687b      	ldr	r3, [r7, #4]
 8004806:	681a      	ldr	r2, [r3, #0]
 8004808:	4b15      	ldr	r3, [pc, #84]	; (8004860 <xTaskCheckForTimeOut+0x9c>)
 800480a:	681b      	ldr	r3, [r3, #0]
 800480c:	429a      	cmp	r2, r3
 800480e:	d007      	beq.n	8004820 <xTaskCheckForTimeOut+0x5c>
 8004810:	687b      	ldr	r3, [r7, #4]
 8004812:	685a      	ldr	r2, [r3, #4]
 8004814:	693b      	ldr	r3, [r7, #16]
 8004816:	429a      	cmp	r2, r3
 8004818:	d802      	bhi.n	8004820 <xTaskCheckForTimeOut+0x5c>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 800481a:	2301      	movs	r3, #1
 800481c:	617b      	str	r3, [r7, #20]
 800481e:	e016      	b.n	800484e <xTaskCheckForTimeOut+0x8a>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 8004820:	683b      	ldr	r3, [r7, #0]
 8004822:	681a      	ldr	r2, [r3, #0]
 8004824:	68fb      	ldr	r3, [r7, #12]
 8004826:	429a      	cmp	r2, r3
 8004828:	d90c      	bls.n	8004844 <xTaskCheckForTimeOut+0x80>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 800482a:	683b      	ldr	r3, [r7, #0]
 800482c:	681a      	ldr	r2, [r3, #0]
 800482e:	68fb      	ldr	r3, [r7, #12]
 8004830:	1ad2      	subs	r2, r2, r3
 8004832:	683b      	ldr	r3, [r7, #0]
 8004834:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 8004836:	687b      	ldr	r3, [r7, #4]
 8004838:	0018      	movs	r0, r3
 800483a:	f7ff ffaf 	bl	800479c <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 800483e:	2300      	movs	r3, #0
 8004840:	617b      	str	r3, [r7, #20]
 8004842:	e004      	b.n	800484e <xTaskCheckForTimeOut+0x8a>
		}
		else
		{
			*pxTicksToWait = 0;
 8004844:	683b      	ldr	r3, [r7, #0]
 8004846:	2200      	movs	r2, #0
 8004848:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 800484a:	2301      	movs	r3, #1
 800484c:	617b      	str	r3, [r7, #20]
		}
	}
	taskEXIT_CRITICAL();
 800484e:	f7fc ff97 	bl	8001780 <vPortExitCritical>

	return xReturn;
 8004852:	697b      	ldr	r3, [r7, #20]
}
 8004854:	0018      	movs	r0, r3
 8004856:	46bd      	mov	sp, r7
 8004858:	b006      	add	sp, #24
 800485a:	bd80      	pop	{r7, pc}
 800485c:	20000d74 	.word	0x20000d74
 8004860:	20000d88 	.word	0x20000d88

08004864 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 8004864:	b580      	push	{r7, lr}
 8004866:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 8004868:	4b02      	ldr	r3, [pc, #8]	; (8004874 <vTaskMissedYield+0x10>)
 800486a:	2201      	movs	r2, #1
 800486c:	601a      	str	r2, [r3, #0]
}
 800486e:	46c0      	nop			; (mov r8, r8)
 8004870:	46bd      	mov	sp, r7
 8004872:	bd80      	pop	{r7, pc}
 8004874:	20000d84 	.word	0x20000d84

08004878 <uxTaskGetTaskNumber>:
/*-----------------------------------------------------------*/

#if ( configUSE_TRACE_FACILITY == 1 )

	UBaseType_t uxTaskGetTaskNumber( TaskHandle_t xTask )
	{
 8004878:	b580      	push	{r7, lr}
 800487a:	b084      	sub	sp, #16
 800487c:	af00      	add	r7, sp, #0
 800487e:	6078      	str	r0, [r7, #4]
	UBaseType_t uxReturn;
	TCB_t const *pxTCB;

		if( xTask != NULL )
 8004880:	687b      	ldr	r3, [r7, #4]
 8004882:	2b00      	cmp	r3, #0
 8004884:	d005      	beq.n	8004892 <uxTaskGetTaskNumber+0x1a>
		{
			pxTCB = xTask;
 8004886:	687b      	ldr	r3, [r7, #4]
 8004888:	60bb      	str	r3, [r7, #8]
			uxReturn = pxTCB->uxTaskNumber;
 800488a:	68bb      	ldr	r3, [r7, #8]
 800488c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800488e:	60fb      	str	r3, [r7, #12]
 8004890:	e001      	b.n	8004896 <uxTaskGetTaskNumber+0x1e>
		}
		else
		{
			uxReturn = 0U;
 8004892:	2300      	movs	r3, #0
 8004894:	60fb      	str	r3, [r7, #12]
		}

		return uxReturn;
 8004896:	68fb      	ldr	r3, [r7, #12]
	}
 8004898:	0018      	movs	r0, r3
 800489a:	46bd      	mov	sp, r7
 800489c:	b004      	add	sp, #16
 800489e:	bd80      	pop	{r7, pc}

080048a0 <vTaskSetTaskNumber>:
/*-----------------------------------------------------------*/

#if ( configUSE_TRACE_FACILITY == 1 )

	void vTaskSetTaskNumber( TaskHandle_t xTask, const UBaseType_t uxHandle )
	{
 80048a0:	b580      	push	{r7, lr}
 80048a2:	b084      	sub	sp, #16
 80048a4:	af00      	add	r7, sp, #0
 80048a6:	6078      	str	r0, [r7, #4]
 80048a8:	6039      	str	r1, [r7, #0]
	TCB_t * pxTCB;

		if( xTask != NULL )
 80048aa:	687b      	ldr	r3, [r7, #4]
 80048ac:	2b00      	cmp	r3, #0
 80048ae:	d004      	beq.n	80048ba <vTaskSetTaskNumber+0x1a>
		{
			pxTCB = xTask;
 80048b0:	687b      	ldr	r3, [r7, #4]
 80048b2:	60fb      	str	r3, [r7, #12]
			pxTCB->uxTaskNumber = uxHandle;
 80048b4:	68fb      	ldr	r3, [r7, #12]
 80048b6:	683a      	ldr	r2, [r7, #0]
 80048b8:	641a      	str	r2, [r3, #64]	; 0x40
		}
	}
 80048ba:	46c0      	nop			; (mov r8, r8)
 80048bc:	46bd      	mov	sp, r7
 80048be:	b004      	add	sp, #16
 80048c0:	bd80      	pop	{r7, pc}

080048c2 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 80048c2:	b580      	push	{r7, lr}
 80048c4:	b082      	sub	sp, #8
 80048c6:	af00      	add	r7, sp, #0
 80048c8:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 80048ca:	f000 f84d 	bl	8004968 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 80048ce:	4b03      	ldr	r3, [pc, #12]	; (80048dc <prvIdleTask+0x1a>)
 80048d0:	681b      	ldr	r3, [r3, #0]
 80048d2:	2b01      	cmp	r3, #1
 80048d4:	d9f9      	bls.n	80048ca <prvIdleTask+0x8>
			{
				taskYIELD();
 80048d6:	f7fc ff31 	bl	800173c <vPortYield>
		prvCheckTasksWaitingTermination();
 80048da:	e7f6      	b.n	80048ca <prvIdleTask+0x8>
 80048dc:	20000c9c 	.word	0x20000c9c

080048e0 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 80048e0:	b580      	push	{r7, lr}
 80048e2:	b082      	sub	sp, #8
 80048e4:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 80048e6:	2300      	movs	r3, #0
 80048e8:	607b      	str	r3, [r7, #4]
 80048ea:	e00c      	b.n	8004906 <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 80048ec:	687a      	ldr	r2, [r7, #4]
 80048ee:	0013      	movs	r3, r2
 80048f0:	009b      	lsls	r3, r3, #2
 80048f2:	189b      	adds	r3, r3, r2
 80048f4:	009b      	lsls	r3, r3, #2
 80048f6:	4a14      	ldr	r2, [pc, #80]	; (8004948 <prvInitialiseTaskLists+0x68>)
 80048f8:	189b      	adds	r3, r3, r2
 80048fa:	0018      	movs	r0, r3
 80048fc:	f7fc fde4 	bl	80014c8 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8004900:	687b      	ldr	r3, [r7, #4]
 8004902:	3301      	adds	r3, #1
 8004904:	607b      	str	r3, [r7, #4]
 8004906:	687b      	ldr	r3, [r7, #4]
 8004908:	2b04      	cmp	r3, #4
 800490a:	d9ef      	bls.n	80048ec <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 800490c:	4b0f      	ldr	r3, [pc, #60]	; (800494c <prvInitialiseTaskLists+0x6c>)
 800490e:	0018      	movs	r0, r3
 8004910:	f7fc fdda 	bl	80014c8 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 8004914:	4b0e      	ldr	r3, [pc, #56]	; (8004950 <prvInitialiseTaskLists+0x70>)
 8004916:	0018      	movs	r0, r3
 8004918:	f7fc fdd6 	bl	80014c8 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 800491c:	4b0d      	ldr	r3, [pc, #52]	; (8004954 <prvInitialiseTaskLists+0x74>)
 800491e:	0018      	movs	r0, r3
 8004920:	f7fc fdd2 	bl	80014c8 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 8004924:	4b0c      	ldr	r3, [pc, #48]	; (8004958 <prvInitialiseTaskLists+0x78>)
 8004926:	0018      	movs	r0, r3
 8004928:	f7fc fdce 	bl	80014c8 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 800492c:	4b0b      	ldr	r3, [pc, #44]	; (800495c <prvInitialiseTaskLists+0x7c>)
 800492e:	0018      	movs	r0, r3
 8004930:	f7fc fdca 	bl	80014c8 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 8004934:	4b0a      	ldr	r3, [pc, #40]	; (8004960 <prvInitialiseTaskLists+0x80>)
 8004936:	4a05      	ldr	r2, [pc, #20]	; (800494c <prvInitialiseTaskLists+0x6c>)
 8004938:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 800493a:	4b0a      	ldr	r3, [pc, #40]	; (8004964 <prvInitialiseTaskLists+0x84>)
 800493c:	4a04      	ldr	r2, [pc, #16]	; (8004950 <prvInitialiseTaskLists+0x70>)
 800493e:	601a      	str	r2, [r3, #0]
}
 8004940:	46c0      	nop			; (mov r8, r8)
 8004942:	46bd      	mov	sp, r7
 8004944:	b002      	add	sp, #8
 8004946:	bd80      	pop	{r7, pc}
 8004948:	20000c9c 	.word	0x20000c9c
 800494c:	20000d00 	.word	0x20000d00
 8004950:	20000d14 	.word	0x20000d14
 8004954:	20000d30 	.word	0x20000d30
 8004958:	20000d44 	.word	0x20000d44
 800495c:	20000d5c 	.word	0x20000d5c
 8004960:	20000d28 	.word	0x20000d28
 8004964:	20000d2c 	.word	0x20000d2c

08004968 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8004968:	b580      	push	{r7, lr}
 800496a:	b082      	sub	sp, #8
 800496c:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800496e:	e01a      	b.n	80049a6 <prvCheckTasksWaitingTermination+0x3e>
		{
			taskENTER_CRITICAL();
 8004970:	f7fc fef4 	bl	800175c <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8004974:	4b10      	ldr	r3, [pc, #64]	; (80049b8 <prvCheckTasksWaitingTermination+0x50>)
 8004976:	68db      	ldr	r3, [r3, #12]
 8004978:	68db      	ldr	r3, [r3, #12]
 800497a:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800497c:	687b      	ldr	r3, [r7, #4]
 800497e:	3304      	adds	r3, #4
 8004980:	0018      	movs	r0, r3
 8004982:	f7fc fe22 	bl	80015ca <uxListRemove>
				--uxCurrentNumberOfTasks;
 8004986:	4b0d      	ldr	r3, [pc, #52]	; (80049bc <prvCheckTasksWaitingTermination+0x54>)
 8004988:	681b      	ldr	r3, [r3, #0]
 800498a:	1e5a      	subs	r2, r3, #1
 800498c:	4b0b      	ldr	r3, [pc, #44]	; (80049bc <prvCheckTasksWaitingTermination+0x54>)
 800498e:	601a      	str	r2, [r3, #0]
				--uxDeletedTasksWaitingCleanUp;
 8004990:	4b0b      	ldr	r3, [pc, #44]	; (80049c0 <prvCheckTasksWaitingTermination+0x58>)
 8004992:	681b      	ldr	r3, [r3, #0]
 8004994:	1e5a      	subs	r2, r3, #1
 8004996:	4b0a      	ldr	r3, [pc, #40]	; (80049c0 <prvCheckTasksWaitingTermination+0x58>)
 8004998:	601a      	str	r2, [r3, #0]
			}
			taskEXIT_CRITICAL();
 800499a:	f7fc fef1 	bl	8001780 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 800499e:	687b      	ldr	r3, [r7, #4]
 80049a0:	0018      	movs	r0, r3
 80049a2:	f000 f8e8 	bl	8004b76 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 80049a6:	4b06      	ldr	r3, [pc, #24]	; (80049c0 <prvCheckTasksWaitingTermination+0x58>)
 80049a8:	681b      	ldr	r3, [r3, #0]
 80049aa:	2b00      	cmp	r3, #0
 80049ac:	d1e0      	bne.n	8004970 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 80049ae:	46c0      	nop			; (mov r8, r8)
 80049b0:	46bd      	mov	sp, r7
 80049b2:	b002      	add	sp, #8
 80049b4:	bd80      	pop	{r7, pc}
 80049b6:	46c0      	nop			; (mov r8, r8)
 80049b8:	20000d44 	.word	0x20000d44
 80049bc:	20000d70 	.word	0x20000d70
 80049c0:	20000d58 	.word	0x20000d58

080049c4 <vTaskGetInfo>:
/*-----------------------------------------------------------*/

#if( configUSE_TRACE_FACILITY == 1 )

	void vTaskGetInfo( TaskHandle_t xTask, TaskStatus_t *pxTaskStatus, BaseType_t xGetFreeStackSpace, eTaskState eState )
	{
 80049c4:	b580      	push	{r7, lr}
 80049c6:	b086      	sub	sp, #24
 80049c8:	af00      	add	r7, sp, #0
 80049ca:	60f8      	str	r0, [r7, #12]
 80049cc:	60b9      	str	r1, [r7, #8]
 80049ce:	607a      	str	r2, [r7, #4]
 80049d0:	001a      	movs	r2, r3
 80049d2:	1cfb      	adds	r3, r7, #3
 80049d4:	701a      	strb	r2, [r3, #0]
	TCB_t *pxTCB;

		/* xTask is NULL then get the state of the calling task. */
		pxTCB = prvGetTCBFromHandle( xTask );
 80049d6:	68fb      	ldr	r3, [r7, #12]
 80049d8:	2b00      	cmp	r3, #0
 80049da:	d102      	bne.n	80049e2 <vTaskGetInfo+0x1e>
 80049dc:	4b2e      	ldr	r3, [pc, #184]	; (8004a98 <vTaskGetInfo+0xd4>)
 80049de:	681b      	ldr	r3, [r3, #0]
 80049e0:	e000      	b.n	80049e4 <vTaskGetInfo+0x20>
 80049e2:	68fb      	ldr	r3, [r7, #12]
 80049e4:	617b      	str	r3, [r7, #20]

		pxTaskStatus->xHandle = ( TaskHandle_t ) pxTCB;
 80049e6:	68bb      	ldr	r3, [r7, #8]
 80049e8:	697a      	ldr	r2, [r7, #20]
 80049ea:	601a      	str	r2, [r3, #0]
		pxTaskStatus->pcTaskName = ( const char * ) &( pxTCB->pcTaskName [ 0 ] );
 80049ec:	697b      	ldr	r3, [r7, #20]
 80049ee:	3334      	adds	r3, #52	; 0x34
 80049f0:	001a      	movs	r2, r3
 80049f2:	68bb      	ldr	r3, [r7, #8]
 80049f4:	605a      	str	r2, [r3, #4]
		pxTaskStatus->uxCurrentPriority = pxTCB->uxPriority;
 80049f6:	697b      	ldr	r3, [r7, #20]
 80049f8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80049fa:	68bb      	ldr	r3, [r7, #8]
 80049fc:	611a      	str	r2, [r3, #16]
		pxTaskStatus->pxStackBase = pxTCB->pxStack;
 80049fe:	697b      	ldr	r3, [r7, #20]
 8004a00:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8004a02:	68bb      	ldr	r3, [r7, #8]
 8004a04:	61da      	str	r2, [r3, #28]
		pxTaskStatus->xTaskNumber = pxTCB->uxTCBNumber;
 8004a06:	697b      	ldr	r3, [r7, #20]
 8004a08:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8004a0a:	68bb      	ldr	r3, [r7, #8]
 8004a0c:	609a      	str	r2, [r3, #8]

		#if ( configUSE_MUTEXES == 1 )
		{
			pxTaskStatus->uxBasePriority = pxTCB->uxBasePriority;
 8004a0e:	697b      	ldr	r3, [r7, #20]
 8004a10:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8004a12:	68bb      	ldr	r3, [r7, #8]
 8004a14:	615a      	str	r2, [r3, #20]
		{
			pxTaskStatus->ulRunTimeCounter = pxTCB->ulRunTimeCounter;
		}
		#else
		{
			pxTaskStatus->ulRunTimeCounter = 0;
 8004a16:	68bb      	ldr	r3, [r7, #8]
 8004a18:	2200      	movs	r2, #0
 8004a1a:	619a      	str	r2, [r3, #24]
		#endif

		/* Obtaining the task state is a little fiddly, so is only done if the
		value of eState passed into this function is eInvalid - otherwise the
		state is just set to whatever is passed in. */
		if( eState != eInvalid )
 8004a1c:	1cfb      	adds	r3, r7, #3
 8004a1e:	781b      	ldrb	r3, [r3, #0]
 8004a20:	2b05      	cmp	r3, #5
 8004a22:	d01c      	beq.n	8004a5e <vTaskGetInfo+0x9a>
		{
			if( pxTCB == pxCurrentTCB )
 8004a24:	4b1c      	ldr	r3, [pc, #112]	; (8004a98 <vTaskGetInfo+0xd4>)
 8004a26:	681b      	ldr	r3, [r3, #0]
 8004a28:	697a      	ldr	r2, [r7, #20]
 8004a2a:	429a      	cmp	r2, r3
 8004a2c:	d103      	bne.n	8004a36 <vTaskGetInfo+0x72>
			{
				pxTaskStatus->eCurrentState = eRunning;
 8004a2e:	68bb      	ldr	r3, [r7, #8]
 8004a30:	2200      	movs	r2, #0
 8004a32:	731a      	strb	r2, [r3, #12]
 8004a34:	e01b      	b.n	8004a6e <vTaskGetInfo+0xaa>
			}
			else
			{
				pxTaskStatus->eCurrentState = eState;
 8004a36:	68bb      	ldr	r3, [r7, #8]
 8004a38:	1cfa      	adds	r2, r7, #3
 8004a3a:	7812      	ldrb	r2, [r2, #0]
 8004a3c:	731a      	strb	r2, [r3, #12]
				#if ( INCLUDE_vTaskSuspend == 1 )
				{
					/* If the task is in the suspended list then there is a
					chance it is actually just blocked indefinitely - so really
					it should be reported as being in the Blocked state. */
					if( eState == eSuspended )
 8004a3e:	1cfb      	adds	r3, r7, #3
 8004a40:	781b      	ldrb	r3, [r3, #0]
 8004a42:	2b03      	cmp	r3, #3
 8004a44:	d113      	bne.n	8004a6e <vTaskGetInfo+0xaa>
					{
						vTaskSuspendAll();
 8004a46:	f7ff faaf 	bl	8003fa8 <vTaskSuspendAll>
						{
							if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8004a4a:	697b      	ldr	r3, [r7, #20]
 8004a4c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004a4e:	2b00      	cmp	r3, #0
 8004a50:	d002      	beq.n	8004a58 <vTaskGetInfo+0x94>
							{
								pxTaskStatus->eCurrentState = eBlocked;
 8004a52:	68bb      	ldr	r3, [r7, #8]
 8004a54:	2202      	movs	r2, #2
 8004a56:	731a      	strb	r2, [r3, #12]
							}
						}
						( void ) xTaskResumeAll();
 8004a58:	f7ff fab2 	bl	8003fc0 <xTaskResumeAll>
 8004a5c:	e007      	b.n	8004a6e <vTaskGetInfo+0xaa>
				#endif /* INCLUDE_vTaskSuspend */
			}
		}
		else
		{
			pxTaskStatus->eCurrentState = eTaskGetState( pxTCB );
 8004a5e:	697b      	ldr	r3, [r7, #20]
 8004a60:	0018      	movs	r0, r3
 8004a62:	f7fe ffed 	bl	8003a40 <eTaskGetState>
 8004a66:	0003      	movs	r3, r0
 8004a68:	001a      	movs	r2, r3
 8004a6a:	68bb      	ldr	r3, [r7, #8]
 8004a6c:	731a      	strb	r2, [r3, #12]
		}

		/* Obtaining the stack space takes some time, so the xGetFreeStackSpace
		parameter is provided to allow it to be skipped. */
		if( xGetFreeStackSpace != pdFALSE )
 8004a6e:	687b      	ldr	r3, [r7, #4]
 8004a70:	2b00      	cmp	r3, #0
 8004a72:	d009      	beq.n	8004a88 <vTaskGetInfo+0xc4>
			{
				pxTaskStatus->usStackHighWaterMark = prvTaskCheckFreeStackSpace( ( uint8_t * ) pxTCB->pxEndOfStack );
			}
			#else
			{
				pxTaskStatus->usStackHighWaterMark = prvTaskCheckFreeStackSpace( ( uint8_t * ) pxTCB->pxStack );
 8004a74:	697b      	ldr	r3, [r7, #20]
 8004a76:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004a78:	0018      	movs	r0, r3
 8004a7a:	f000 f862 	bl	8004b42 <prvTaskCheckFreeStackSpace>
 8004a7e:	0003      	movs	r3, r0
 8004a80:	001a      	movs	r2, r3
 8004a82:	68bb      	ldr	r3, [r7, #8]
 8004a84:	841a      	strh	r2, [r3, #32]
		}
		else
		{
			pxTaskStatus->usStackHighWaterMark = 0;
		}
	}
 8004a86:	e002      	b.n	8004a8e <vTaskGetInfo+0xca>
			pxTaskStatus->usStackHighWaterMark = 0;
 8004a88:	68bb      	ldr	r3, [r7, #8]
 8004a8a:	2200      	movs	r2, #0
 8004a8c:	841a      	strh	r2, [r3, #32]
	}
 8004a8e:	46c0      	nop			; (mov r8, r8)
 8004a90:	46bd      	mov	sp, r7
 8004a92:	b006      	add	sp, #24
 8004a94:	bd80      	pop	{r7, pc}
 8004a96:	46c0      	nop			; (mov r8, r8)
 8004a98:	20000c98 	.word	0x20000c98

08004a9c <prvListTasksWithinSingleList>:
/*-----------------------------------------------------------*/

#if ( configUSE_TRACE_FACILITY == 1 )

	static UBaseType_t prvListTasksWithinSingleList( TaskStatus_t *pxTaskStatusArray, List_t *pxList, eTaskState eState )
	{
 8004a9c:	b580      	push	{r7, lr}
 8004a9e:	b08a      	sub	sp, #40	; 0x28
 8004aa0:	af00      	add	r7, sp, #0
 8004aa2:	60f8      	str	r0, [r7, #12]
 8004aa4:	60b9      	str	r1, [r7, #8]
 8004aa6:	1dfb      	adds	r3, r7, #7
 8004aa8:	701a      	strb	r2, [r3, #0]
	configLIST_VOLATILE TCB_t *pxNextTCB, *pxFirstTCB;
	UBaseType_t uxTask = 0;
 8004aaa:	2300      	movs	r3, #0
 8004aac:	627b      	str	r3, [r7, #36]	; 0x24

		if( listCURRENT_LIST_LENGTH( pxList ) > ( UBaseType_t ) 0 )
 8004aae:	68bb      	ldr	r3, [r7, #8]
 8004ab0:	681b      	ldr	r3, [r3, #0]
 8004ab2:	2b00      	cmp	r3, #0
 8004ab4:	d040      	beq.n	8004b38 <prvListTasksWithinSingleList+0x9c>
		{
			listGET_OWNER_OF_NEXT_ENTRY( pxFirstTCB, pxList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8004ab6:	68bb      	ldr	r3, [r7, #8]
 8004ab8:	623b      	str	r3, [r7, #32]
 8004aba:	6a3b      	ldr	r3, [r7, #32]
 8004abc:	685b      	ldr	r3, [r3, #4]
 8004abe:	685a      	ldr	r2, [r3, #4]
 8004ac0:	6a3b      	ldr	r3, [r7, #32]
 8004ac2:	605a      	str	r2, [r3, #4]
 8004ac4:	6a3b      	ldr	r3, [r7, #32]
 8004ac6:	685a      	ldr	r2, [r3, #4]
 8004ac8:	6a3b      	ldr	r3, [r7, #32]
 8004aca:	3308      	adds	r3, #8
 8004acc:	429a      	cmp	r2, r3
 8004ace:	d104      	bne.n	8004ada <prvListTasksWithinSingleList+0x3e>
 8004ad0:	6a3b      	ldr	r3, [r7, #32]
 8004ad2:	685b      	ldr	r3, [r3, #4]
 8004ad4:	685a      	ldr	r2, [r3, #4]
 8004ad6:	6a3b      	ldr	r3, [r7, #32]
 8004ad8:	605a      	str	r2, [r3, #4]
 8004ada:	6a3b      	ldr	r3, [r7, #32]
 8004adc:	685b      	ldr	r3, [r3, #4]
 8004ade:	68db      	ldr	r3, [r3, #12]
 8004ae0:	61fb      	str	r3, [r7, #28]
			pxTaskStatusArray array for each task that is referenced from
			pxList.  See the definition of TaskStatus_t in task.h for the
			meaning of each TaskStatus_t structure member. */
			do
			{
				listGET_OWNER_OF_NEXT_ENTRY( pxNextTCB, pxList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8004ae2:	68bb      	ldr	r3, [r7, #8]
 8004ae4:	61bb      	str	r3, [r7, #24]
 8004ae6:	69bb      	ldr	r3, [r7, #24]
 8004ae8:	685b      	ldr	r3, [r3, #4]
 8004aea:	685a      	ldr	r2, [r3, #4]
 8004aec:	69bb      	ldr	r3, [r7, #24]
 8004aee:	605a      	str	r2, [r3, #4]
 8004af0:	69bb      	ldr	r3, [r7, #24]
 8004af2:	685a      	ldr	r2, [r3, #4]
 8004af4:	69bb      	ldr	r3, [r7, #24]
 8004af6:	3308      	adds	r3, #8
 8004af8:	429a      	cmp	r2, r3
 8004afa:	d104      	bne.n	8004b06 <prvListTasksWithinSingleList+0x6a>
 8004afc:	69bb      	ldr	r3, [r7, #24]
 8004afe:	685b      	ldr	r3, [r3, #4]
 8004b00:	685a      	ldr	r2, [r3, #4]
 8004b02:	69bb      	ldr	r3, [r7, #24]
 8004b04:	605a      	str	r2, [r3, #4]
 8004b06:	69bb      	ldr	r3, [r7, #24]
 8004b08:	685b      	ldr	r3, [r3, #4]
 8004b0a:	68db      	ldr	r3, [r3, #12]
 8004b0c:	617b      	str	r3, [r7, #20]
				vTaskGetInfo( ( TaskHandle_t ) pxNextTCB, &( pxTaskStatusArray[ uxTask ] ), pdTRUE, eState );
 8004b0e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004b10:	0013      	movs	r3, r2
 8004b12:	00db      	lsls	r3, r3, #3
 8004b14:	189b      	adds	r3, r3, r2
 8004b16:	009b      	lsls	r3, r3, #2
 8004b18:	001a      	movs	r2, r3
 8004b1a:	68fb      	ldr	r3, [r7, #12]
 8004b1c:	1899      	adds	r1, r3, r2
 8004b1e:	1dfb      	adds	r3, r7, #7
 8004b20:	781b      	ldrb	r3, [r3, #0]
 8004b22:	6978      	ldr	r0, [r7, #20]
 8004b24:	2201      	movs	r2, #1
 8004b26:	f7ff ff4d 	bl	80049c4 <vTaskGetInfo>
				uxTask++;
 8004b2a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004b2c:	3301      	adds	r3, #1
 8004b2e:	627b      	str	r3, [r7, #36]	; 0x24
			} while( pxNextTCB != pxFirstTCB );
 8004b30:	697a      	ldr	r2, [r7, #20]
 8004b32:	69fb      	ldr	r3, [r7, #28]
 8004b34:	429a      	cmp	r2, r3
 8004b36:	d1d4      	bne.n	8004ae2 <prvListTasksWithinSingleList+0x46>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return uxTask;
 8004b38:	6a7b      	ldr	r3, [r7, #36]	; 0x24
	}
 8004b3a:	0018      	movs	r0, r3
 8004b3c:	46bd      	mov	sp, r7
 8004b3e:	b00a      	add	sp, #40	; 0x28
 8004b40:	bd80      	pop	{r7, pc}

08004b42 <prvTaskCheckFreeStackSpace>:
/*-----------------------------------------------------------*/

#if ( ( configUSE_TRACE_FACILITY == 1 ) || ( INCLUDE_uxTaskGetStackHighWaterMark == 1 ) || ( INCLUDE_uxTaskGetStackHighWaterMark2 == 1 ) )

	static configSTACK_DEPTH_TYPE prvTaskCheckFreeStackSpace( const uint8_t * pucStackByte )
	{
 8004b42:	b580      	push	{r7, lr}
 8004b44:	b084      	sub	sp, #16
 8004b46:	af00      	add	r7, sp, #0
 8004b48:	6078      	str	r0, [r7, #4]
	uint32_t ulCount = 0U;
 8004b4a:	2300      	movs	r3, #0
 8004b4c:	60fb      	str	r3, [r7, #12]

		while( *pucStackByte == ( uint8_t ) tskSTACK_FILL_BYTE )
 8004b4e:	e005      	b.n	8004b5c <prvTaskCheckFreeStackSpace+0x1a>
		{
			pucStackByte -= portSTACK_GROWTH;
 8004b50:	687b      	ldr	r3, [r7, #4]
 8004b52:	3301      	adds	r3, #1
 8004b54:	607b      	str	r3, [r7, #4]
			ulCount++;
 8004b56:	68fb      	ldr	r3, [r7, #12]
 8004b58:	3301      	adds	r3, #1
 8004b5a:	60fb      	str	r3, [r7, #12]
		while( *pucStackByte == ( uint8_t ) tskSTACK_FILL_BYTE )
 8004b5c:	687b      	ldr	r3, [r7, #4]
 8004b5e:	781b      	ldrb	r3, [r3, #0]
 8004b60:	2ba5      	cmp	r3, #165	; 0xa5
 8004b62:	d0f5      	beq.n	8004b50 <prvTaskCheckFreeStackSpace+0xe>
		}

		ulCount /= ( uint32_t ) sizeof( StackType_t ); /*lint !e961 Casting is not redundant on smaller architectures. */
 8004b64:	68fb      	ldr	r3, [r7, #12]
 8004b66:	089b      	lsrs	r3, r3, #2
 8004b68:	60fb      	str	r3, [r7, #12]

		return ( configSTACK_DEPTH_TYPE ) ulCount;
 8004b6a:	68fb      	ldr	r3, [r7, #12]
 8004b6c:	b29b      	uxth	r3, r3
	}
 8004b6e:	0018      	movs	r0, r3
 8004b70:	46bd      	mov	sp, r7
 8004b72:	b004      	add	sp, #16
 8004b74:	bd80      	pop	{r7, pc}

08004b76 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 8004b76:	b580      	push	{r7, lr}
 8004b78:	b082      	sub	sp, #8
 8004b7a:	af00      	add	r7, sp, #0
 8004b7c:	6078      	str	r0, [r7, #4]

		#if( ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 0 ) && ( portUSING_MPU_WRAPPERS == 0 ) )
		{
			/* The task can only have been allocated dynamically - free both
			the stack and TCB. */
			vPortFree( pxTCB->pxStack );
 8004b7e:	687b      	ldr	r3, [r7, #4]
 8004b80:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004b82:	0018      	movs	r0, r3
 8004b84:	f7fc fc7a 	bl	800147c <vPortFree>
			vPortFree( pxTCB );
 8004b88:	687b      	ldr	r3, [r7, #4]
 8004b8a:	0018      	movs	r0, r3
 8004b8c:	f7fc fc76 	bl	800147c <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 8004b90:	46c0      	nop			; (mov r8, r8)
 8004b92:	46bd      	mov	sp, r7
 8004b94:	b002      	add	sp, #8
 8004b96:	bd80      	pop	{r7, pc}

08004b98 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8004b98:	b580      	push	{r7, lr}
 8004b9a:	b082      	sub	sp, #8
 8004b9c:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8004b9e:	4b0b      	ldr	r3, [pc, #44]	; (8004bcc <prvResetNextTaskUnblockTime+0x34>)
 8004ba0:	681b      	ldr	r3, [r3, #0]
 8004ba2:	681b      	ldr	r3, [r3, #0]
 8004ba4:	2b00      	cmp	r3, #0
 8004ba6:	d104      	bne.n	8004bb2 <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 8004ba8:	4b09      	ldr	r3, [pc, #36]	; (8004bd0 <prvResetNextTaskUnblockTime+0x38>)
 8004baa:	2201      	movs	r2, #1
 8004bac:	4252      	negs	r2, r2
 8004bae:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 8004bb0:	e008      	b.n	8004bc4 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8004bb2:	4b06      	ldr	r3, [pc, #24]	; (8004bcc <prvResetNextTaskUnblockTime+0x34>)
 8004bb4:	681b      	ldr	r3, [r3, #0]
 8004bb6:	68db      	ldr	r3, [r3, #12]
 8004bb8:	68db      	ldr	r3, [r3, #12]
 8004bba:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8004bbc:	687b      	ldr	r3, [r7, #4]
 8004bbe:	685a      	ldr	r2, [r3, #4]
 8004bc0:	4b03      	ldr	r3, [pc, #12]	; (8004bd0 <prvResetNextTaskUnblockTime+0x38>)
 8004bc2:	601a      	str	r2, [r3, #0]
}
 8004bc4:	46c0      	nop			; (mov r8, r8)
 8004bc6:	46bd      	mov	sp, r7
 8004bc8:	b002      	add	sp, #8
 8004bca:	bd80      	pop	{r7, pc}
 8004bcc:	20000d28 	.word	0x20000d28
 8004bd0:	20000d90 	.word	0x20000d90

08004bd4 <xTaskGetCurrentTaskHandle>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetCurrentTaskHandle == 1 ) || ( configUSE_MUTEXES == 1 ) )

	TaskHandle_t xTaskGetCurrentTaskHandle( void )
	{
 8004bd4:	b580      	push	{r7, lr}
 8004bd6:	b082      	sub	sp, #8
 8004bd8:	af00      	add	r7, sp, #0
	TaskHandle_t xReturn;

		/* A critical section is not required as this is not called from
		an interrupt and the current TCB will always be the same for any
		individual execution thread. */
		xReturn = pxCurrentTCB;
 8004bda:	4b04      	ldr	r3, [pc, #16]	; (8004bec <xTaskGetCurrentTaskHandle+0x18>)
 8004bdc:	681b      	ldr	r3, [r3, #0]
 8004bde:	607b      	str	r3, [r7, #4]

		return xReturn;
 8004be0:	687b      	ldr	r3, [r7, #4]
	}
 8004be2:	0018      	movs	r0, r3
 8004be4:	46bd      	mov	sp, r7
 8004be6:	b002      	add	sp, #8
 8004be8:	bd80      	pop	{r7, pc}
 8004bea:	46c0      	nop			; (mov r8, r8)
 8004bec:	20000c98 	.word	0x20000c98

08004bf0 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 8004bf0:	b580      	push	{r7, lr}
 8004bf2:	b082      	sub	sp, #8
 8004bf4:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 8004bf6:	4b0a      	ldr	r3, [pc, #40]	; (8004c20 <xTaskGetSchedulerState+0x30>)
 8004bf8:	681b      	ldr	r3, [r3, #0]
 8004bfa:	2b00      	cmp	r3, #0
 8004bfc:	d102      	bne.n	8004c04 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 8004bfe:	2301      	movs	r3, #1
 8004c00:	607b      	str	r3, [r7, #4]
 8004c02:	e008      	b.n	8004c16 <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8004c04:	4b07      	ldr	r3, [pc, #28]	; (8004c24 <xTaskGetSchedulerState+0x34>)
 8004c06:	681b      	ldr	r3, [r3, #0]
 8004c08:	2b00      	cmp	r3, #0
 8004c0a:	d102      	bne.n	8004c12 <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 8004c0c:	2302      	movs	r3, #2
 8004c0e:	607b      	str	r3, [r7, #4]
 8004c10:	e001      	b.n	8004c16 <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 8004c12:	2300      	movs	r3, #0
 8004c14:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 8004c16:	687b      	ldr	r3, [r7, #4]
	}
 8004c18:	0018      	movs	r0, r3
 8004c1a:	46bd      	mov	sp, r7
 8004c1c:	b002      	add	sp, #8
 8004c1e:	bd80      	pop	{r7, pc}
 8004c20:	20000d7c 	.word	0x20000d7c
 8004c24:	20000d98 	.word	0x20000d98

08004c28 <xTaskPriorityInherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityInherit( TaskHandle_t const pxMutexHolder )
	{
 8004c28:	b580      	push	{r7, lr}
 8004c2a:	b084      	sub	sp, #16
 8004c2c:	af00      	add	r7, sp, #0
 8004c2e:	6078      	str	r0, [r7, #4]
	TCB_t * const pxMutexHolderTCB = pxMutexHolder;
 8004c30:	687b      	ldr	r3, [r7, #4]
 8004c32:	60bb      	str	r3, [r7, #8]
	BaseType_t xReturn = pdFALSE;
 8004c34:	2300      	movs	r3, #0
 8004c36:	60fb      	str	r3, [r7, #12]

		/* If the mutex was given back by an interrupt while the queue was
		locked then the mutex holder might now be NULL.  _RB_ Is this still
		needed as interrupts can no longer use mutexes? */
		if( pxMutexHolder != NULL )
 8004c38:	687b      	ldr	r3, [r7, #4]
 8004c3a:	2b00      	cmp	r3, #0
 8004c3c:	d051      	beq.n	8004ce2 <xTaskPriorityInherit+0xba>
		{
			/* If the holder of the mutex has a priority below the priority of
			the task attempting to obtain the mutex then it will temporarily
			inherit the priority of the task attempting to obtain the mutex. */
			if( pxMutexHolderTCB->uxPriority < pxCurrentTCB->uxPriority )
 8004c3e:	68bb      	ldr	r3, [r7, #8]
 8004c40:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004c42:	4b2a      	ldr	r3, [pc, #168]	; (8004cec <xTaskPriorityInherit+0xc4>)
 8004c44:	681b      	ldr	r3, [r3, #0]
 8004c46:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004c48:	429a      	cmp	r2, r3
 8004c4a:	d241      	bcs.n	8004cd0 <xTaskPriorityInherit+0xa8>
			{
				/* Adjust the mutex holder state to account for its new
				priority.  Only reset the event list item value if the value is
				not being used for anything else. */
				if( ( listGET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 8004c4c:	68bb      	ldr	r3, [r7, #8]
 8004c4e:	699b      	ldr	r3, [r3, #24]
 8004c50:	2b00      	cmp	r3, #0
 8004c52:	db06      	blt.n	8004c62 <xTaskPriorityInherit+0x3a>
				{
					listSET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxCurrentTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8004c54:	4b25      	ldr	r3, [pc, #148]	; (8004cec <xTaskPriorityInherit+0xc4>)
 8004c56:	681b      	ldr	r3, [r3, #0]
 8004c58:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004c5a:	2205      	movs	r2, #5
 8004c5c:	1ad2      	subs	r2, r2, r3
 8004c5e:	68bb      	ldr	r3, [r7, #8]
 8004c60:	619a      	str	r2, [r3, #24]
					mtCOVERAGE_TEST_MARKER();
				}

				/* If the task being modified is in the ready state it will need
				to be moved into a new list. */
				if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ pxMutexHolderTCB->uxPriority ] ), &( pxMutexHolderTCB->xStateListItem ) ) != pdFALSE )
 8004c62:	68bb      	ldr	r3, [r7, #8]
 8004c64:	6959      	ldr	r1, [r3, #20]
 8004c66:	68bb      	ldr	r3, [r7, #8]
 8004c68:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004c6a:	0013      	movs	r3, r2
 8004c6c:	009b      	lsls	r3, r3, #2
 8004c6e:	189b      	adds	r3, r3, r2
 8004c70:	009b      	lsls	r3, r3, #2
 8004c72:	4a1f      	ldr	r2, [pc, #124]	; (8004cf0 <xTaskPriorityInherit+0xc8>)
 8004c74:	189b      	adds	r3, r3, r2
 8004c76:	4299      	cmp	r1, r3
 8004c78:	d122      	bne.n	8004cc0 <xTaskPriorityInherit+0x98>
				{
					if( uxListRemove( &( pxMutexHolderTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8004c7a:	68bb      	ldr	r3, [r7, #8]
 8004c7c:	3304      	adds	r3, #4
 8004c7e:	0018      	movs	r0, r3
 8004c80:	f7fc fca3 	bl	80015ca <uxListRemove>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* Inherit the priority before being moved into the new list. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 8004c84:	4b19      	ldr	r3, [pc, #100]	; (8004cec <xTaskPriorityInherit+0xc4>)
 8004c86:	681b      	ldr	r3, [r3, #0]
 8004c88:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004c8a:	68bb      	ldr	r3, [r7, #8]
 8004c8c:	62da      	str	r2, [r3, #44]	; 0x2c
					prvAddTaskToReadyList( pxMutexHolderTCB );
 8004c8e:	68bb      	ldr	r3, [r7, #8]
 8004c90:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004c92:	4b18      	ldr	r3, [pc, #96]	; (8004cf4 <xTaskPriorityInherit+0xcc>)
 8004c94:	681b      	ldr	r3, [r3, #0]
 8004c96:	429a      	cmp	r2, r3
 8004c98:	d903      	bls.n	8004ca2 <xTaskPriorityInherit+0x7a>
 8004c9a:	68bb      	ldr	r3, [r7, #8]
 8004c9c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004c9e:	4b15      	ldr	r3, [pc, #84]	; (8004cf4 <xTaskPriorityInherit+0xcc>)
 8004ca0:	601a      	str	r2, [r3, #0]
 8004ca2:	68bb      	ldr	r3, [r7, #8]
 8004ca4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004ca6:	0013      	movs	r3, r2
 8004ca8:	009b      	lsls	r3, r3, #2
 8004caa:	189b      	adds	r3, r3, r2
 8004cac:	009b      	lsls	r3, r3, #2
 8004cae:	4a10      	ldr	r2, [pc, #64]	; (8004cf0 <xTaskPriorityInherit+0xc8>)
 8004cb0:	189a      	adds	r2, r3, r2
 8004cb2:	68bb      	ldr	r3, [r7, #8]
 8004cb4:	3304      	adds	r3, #4
 8004cb6:	0019      	movs	r1, r3
 8004cb8:	0010      	movs	r0, r2
 8004cba:	f7fc fc2e 	bl	800151a <vListInsertEnd>
 8004cbe:	e004      	b.n	8004cca <xTaskPriorityInherit+0xa2>
				}
				else
				{
					/* Just inherit the priority. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 8004cc0:	4b0a      	ldr	r3, [pc, #40]	; (8004cec <xTaskPriorityInherit+0xc4>)
 8004cc2:	681b      	ldr	r3, [r3, #0]
 8004cc4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004cc6:	68bb      	ldr	r3, [r7, #8]
 8004cc8:	62da      	str	r2, [r3, #44]	; 0x2c
				}

				traceTASK_PRIORITY_INHERIT( pxMutexHolderTCB, pxCurrentTCB->uxPriority );

				/* Inheritance occurred. */
				xReturn = pdTRUE;
 8004cca:	2301      	movs	r3, #1
 8004ccc:	60fb      	str	r3, [r7, #12]
 8004cce:	e008      	b.n	8004ce2 <xTaskPriorityInherit+0xba>
			}
			else
			{
				if( pxMutexHolderTCB->uxBasePriority < pxCurrentTCB->uxPriority )
 8004cd0:	68bb      	ldr	r3, [r7, #8]
 8004cd2:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8004cd4:	4b05      	ldr	r3, [pc, #20]	; (8004cec <xTaskPriorityInherit+0xc4>)
 8004cd6:	681b      	ldr	r3, [r3, #0]
 8004cd8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004cda:	429a      	cmp	r2, r3
 8004cdc:	d201      	bcs.n	8004ce2 <xTaskPriorityInherit+0xba>
					current priority of the mutex holder is not lower than the
					priority of the task attempting to take the mutex.
					Therefore the mutex holder must have already inherited a
					priority, but inheritance would have occurred if that had
					not been the case. */
					xReturn = pdTRUE;
 8004cde:	2301      	movs	r3, #1
 8004ce0:	60fb      	str	r3, [r7, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8004ce2:	68fb      	ldr	r3, [r7, #12]
	}
 8004ce4:	0018      	movs	r0, r3
 8004ce6:	46bd      	mov	sp, r7
 8004ce8:	b004      	add	sp, #16
 8004cea:	bd80      	pop	{r7, pc}
 8004cec:	20000c98 	.word	0x20000c98
 8004cf0:	20000c9c 	.word	0x20000c9c
 8004cf4:	20000d78 	.word	0x20000d78

08004cf8 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 8004cf8:	b580      	push	{r7, lr}
 8004cfa:	b084      	sub	sp, #16
 8004cfc:	af00      	add	r7, sp, #0
 8004cfe:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 8004d00:	687b      	ldr	r3, [r7, #4]
 8004d02:	60bb      	str	r3, [r7, #8]
	BaseType_t xReturn = pdFALSE;
 8004d04:	2300      	movs	r3, #0
 8004d06:	60fb      	str	r3, [r7, #12]

		if( pxMutexHolder != NULL )
 8004d08:	687b      	ldr	r3, [r7, #4]
 8004d0a:	2b00      	cmp	r3, #0
 8004d0c:	d044      	beq.n	8004d98 <xTaskPriorityDisinherit+0xa0>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 8004d0e:	4b25      	ldr	r3, [pc, #148]	; (8004da4 <xTaskPriorityDisinherit+0xac>)
 8004d10:	681b      	ldr	r3, [r3, #0]
 8004d12:	68ba      	ldr	r2, [r7, #8]
 8004d14:	429a      	cmp	r2, r3
 8004d16:	d001      	beq.n	8004d1c <xTaskPriorityDisinherit+0x24>
 8004d18:	b672      	cpsid	i
 8004d1a:	e7fe      	b.n	8004d1a <xTaskPriorityDisinherit+0x22>
			configASSERT( pxTCB->uxMutexesHeld );
 8004d1c:	68bb      	ldr	r3, [r7, #8]
 8004d1e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004d20:	2b00      	cmp	r3, #0
 8004d22:	d101      	bne.n	8004d28 <xTaskPriorityDisinherit+0x30>
 8004d24:	b672      	cpsid	i
 8004d26:	e7fe      	b.n	8004d26 <xTaskPriorityDisinherit+0x2e>
			( pxTCB->uxMutexesHeld )--;
 8004d28:	68bb      	ldr	r3, [r7, #8]
 8004d2a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004d2c:	1e5a      	subs	r2, r3, #1
 8004d2e:	68bb      	ldr	r3, [r7, #8]
 8004d30:	649a      	str	r2, [r3, #72]	; 0x48

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 8004d32:	68bb      	ldr	r3, [r7, #8]
 8004d34:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004d36:	68bb      	ldr	r3, [r7, #8]
 8004d38:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004d3a:	429a      	cmp	r2, r3
 8004d3c:	d02c      	beq.n	8004d98 <xTaskPriorityDisinherit+0xa0>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 8004d3e:	68bb      	ldr	r3, [r7, #8]
 8004d40:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004d42:	2b00      	cmp	r3, #0
 8004d44:	d128      	bne.n	8004d98 <xTaskPriorityDisinherit+0xa0>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready/delayed list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8004d46:	68bb      	ldr	r3, [r7, #8]
 8004d48:	3304      	adds	r3, #4
 8004d4a:	0018      	movs	r0, r3
 8004d4c:	f7fc fc3d 	bl	80015ca <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 8004d50:	68bb      	ldr	r3, [r7, #8]
 8004d52:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8004d54:	68bb      	ldr	r3, [r7, #8]
 8004d56:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8004d58:	68bb      	ldr	r3, [r7, #8]
 8004d5a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004d5c:	2205      	movs	r2, #5
 8004d5e:	1ad2      	subs	r2, r2, r3
 8004d60:	68bb      	ldr	r3, [r7, #8]
 8004d62:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 8004d64:	68bb      	ldr	r3, [r7, #8]
 8004d66:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004d68:	4b0f      	ldr	r3, [pc, #60]	; (8004da8 <xTaskPriorityDisinherit+0xb0>)
 8004d6a:	681b      	ldr	r3, [r3, #0]
 8004d6c:	429a      	cmp	r2, r3
 8004d6e:	d903      	bls.n	8004d78 <xTaskPriorityDisinherit+0x80>
 8004d70:	68bb      	ldr	r3, [r7, #8]
 8004d72:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004d74:	4b0c      	ldr	r3, [pc, #48]	; (8004da8 <xTaskPriorityDisinherit+0xb0>)
 8004d76:	601a      	str	r2, [r3, #0]
 8004d78:	68bb      	ldr	r3, [r7, #8]
 8004d7a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004d7c:	0013      	movs	r3, r2
 8004d7e:	009b      	lsls	r3, r3, #2
 8004d80:	189b      	adds	r3, r3, r2
 8004d82:	009b      	lsls	r3, r3, #2
 8004d84:	4a09      	ldr	r2, [pc, #36]	; (8004dac <xTaskPriorityDisinherit+0xb4>)
 8004d86:	189a      	adds	r2, r3, r2
 8004d88:	68bb      	ldr	r3, [r7, #8]
 8004d8a:	3304      	adds	r3, #4
 8004d8c:	0019      	movs	r1, r3
 8004d8e:	0010      	movs	r0, r2
 8004d90:	f7fc fbc3 	bl	800151a <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 8004d94:	2301      	movs	r3, #1
 8004d96:	60fb      	str	r3, [r7, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8004d98:	68fb      	ldr	r3, [r7, #12]
	}
 8004d9a:	0018      	movs	r0, r3
 8004d9c:	46bd      	mov	sp, r7
 8004d9e:	b004      	add	sp, #16
 8004da0:	bd80      	pop	{r7, pc}
 8004da2:	46c0      	nop			; (mov r8, r8)
 8004da4:	20000c98 	.word	0x20000c98
 8004da8:	20000d78 	.word	0x20000d78
 8004dac:	20000c9c 	.word	0x20000c9c

08004db0 <vTaskPriorityDisinheritAfterTimeout>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	void vTaskPriorityDisinheritAfterTimeout( TaskHandle_t const pxMutexHolder, UBaseType_t uxHighestPriorityWaitingTask )
	{
 8004db0:	b580      	push	{r7, lr}
 8004db2:	b086      	sub	sp, #24
 8004db4:	af00      	add	r7, sp, #0
 8004db6:	6078      	str	r0, [r7, #4]
 8004db8:	6039      	str	r1, [r7, #0]
	TCB_t * const pxTCB = pxMutexHolder;
 8004dba:	687b      	ldr	r3, [r7, #4]
 8004dbc:	613b      	str	r3, [r7, #16]
	UBaseType_t uxPriorityUsedOnEntry, uxPriorityToUse;
	const UBaseType_t uxOnlyOneMutexHeld = ( UBaseType_t ) 1;
 8004dbe:	2301      	movs	r3, #1
 8004dc0:	60fb      	str	r3, [r7, #12]

		if( pxMutexHolder != NULL )
 8004dc2:	687b      	ldr	r3, [r7, #4]
 8004dc4:	2b00      	cmp	r3, #0
 8004dc6:	d058      	beq.n	8004e7a <vTaskPriorityDisinheritAfterTimeout+0xca>
		{
			/* If pxMutexHolder is not NULL then the holder must hold at least
			one mutex. */
			configASSERT( pxTCB->uxMutexesHeld );
 8004dc8:	693b      	ldr	r3, [r7, #16]
 8004dca:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004dcc:	2b00      	cmp	r3, #0
 8004dce:	d101      	bne.n	8004dd4 <vTaskPriorityDisinheritAfterTimeout+0x24>
 8004dd0:	b672      	cpsid	i
 8004dd2:	e7fe      	b.n	8004dd2 <vTaskPriorityDisinheritAfterTimeout+0x22>

			/* Determine the priority to which the priority of the task that
			holds the mutex should be set.  This will be the greater of the
			holding task's base priority and the priority of the highest
			priority task that is waiting to obtain the mutex. */
			if( pxTCB->uxBasePriority < uxHighestPriorityWaitingTask )
 8004dd4:	693b      	ldr	r3, [r7, #16]
 8004dd6:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8004dd8:	683b      	ldr	r3, [r7, #0]
 8004dda:	429a      	cmp	r2, r3
 8004ddc:	d202      	bcs.n	8004de4 <vTaskPriorityDisinheritAfterTimeout+0x34>
			{
				uxPriorityToUse = uxHighestPriorityWaitingTask;
 8004dde:	683b      	ldr	r3, [r7, #0]
 8004de0:	617b      	str	r3, [r7, #20]
 8004de2:	e002      	b.n	8004dea <vTaskPriorityDisinheritAfterTimeout+0x3a>
			}
			else
			{
				uxPriorityToUse = pxTCB->uxBasePriority;
 8004de4:	693b      	ldr	r3, [r7, #16]
 8004de6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004de8:	617b      	str	r3, [r7, #20]
			}

			/* Does the priority need to change? */
			if( pxTCB->uxPriority != uxPriorityToUse )
 8004dea:	693b      	ldr	r3, [r7, #16]
 8004dec:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004dee:	697b      	ldr	r3, [r7, #20]
 8004df0:	429a      	cmp	r2, r3
 8004df2:	d042      	beq.n	8004e7a <vTaskPriorityDisinheritAfterTimeout+0xca>
			{
				/* Only disinherit if no other mutexes are held.  This is a
				simplification in the priority inheritance implementation.  If
				the task that holds the mutex is also holding other mutexes then
				the other mutexes may have caused the priority inheritance. */
				if( pxTCB->uxMutexesHeld == uxOnlyOneMutexHeld )
 8004df4:	693b      	ldr	r3, [r7, #16]
 8004df6:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8004df8:	68fb      	ldr	r3, [r7, #12]
 8004dfa:	429a      	cmp	r2, r3
 8004dfc:	d13d      	bne.n	8004e7a <vTaskPriorityDisinheritAfterTimeout+0xca>
				{
					/* If a task has timed out because it already holds the
					mutex it was trying to obtain then it cannot of inherited
					its own priority. */
					configASSERT( pxTCB != pxCurrentTCB );
 8004dfe:	4b21      	ldr	r3, [pc, #132]	; (8004e84 <vTaskPriorityDisinheritAfterTimeout+0xd4>)
 8004e00:	681b      	ldr	r3, [r3, #0]
 8004e02:	693a      	ldr	r2, [r7, #16]
 8004e04:	429a      	cmp	r2, r3
 8004e06:	d101      	bne.n	8004e0c <vTaskPriorityDisinheritAfterTimeout+0x5c>
 8004e08:	b672      	cpsid	i
 8004e0a:	e7fe      	b.n	8004e0a <vTaskPriorityDisinheritAfterTimeout+0x5a>

					/* Disinherit the priority, remembering the previous
					priority to facilitate determining the subject task's
					state. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					uxPriorityUsedOnEntry = pxTCB->uxPriority;
 8004e0c:	693b      	ldr	r3, [r7, #16]
 8004e0e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004e10:	60bb      	str	r3, [r7, #8]
					pxTCB->uxPriority = uxPriorityToUse;
 8004e12:	693b      	ldr	r3, [r7, #16]
 8004e14:	697a      	ldr	r2, [r7, #20]
 8004e16:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Only reset the event list item value if the value is not
					being used for anything else. */
					if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 8004e18:	693b      	ldr	r3, [r7, #16]
 8004e1a:	699b      	ldr	r3, [r3, #24]
 8004e1c:	2b00      	cmp	r3, #0
 8004e1e:	db04      	blt.n	8004e2a <vTaskPriorityDisinheritAfterTimeout+0x7a>
					{
						listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriorityToUse ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8004e20:	697b      	ldr	r3, [r7, #20]
 8004e22:	2205      	movs	r2, #5
 8004e24:	1ad2      	subs	r2, r2, r3
 8004e26:	693b      	ldr	r3, [r7, #16]
 8004e28:	619a      	str	r2, [r3, #24]
					then the task that holds the mutex could be in either the
					Ready, Blocked or Suspended states.  Only remove the task
					from its current state list if it is in the Ready state as
					the task's priority is going to change and there is one
					Ready list per priority. */
					if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ uxPriorityUsedOnEntry ] ), &( pxTCB->xStateListItem ) ) != pdFALSE )
 8004e2a:	693b      	ldr	r3, [r7, #16]
 8004e2c:	6959      	ldr	r1, [r3, #20]
 8004e2e:	68ba      	ldr	r2, [r7, #8]
 8004e30:	0013      	movs	r3, r2
 8004e32:	009b      	lsls	r3, r3, #2
 8004e34:	189b      	adds	r3, r3, r2
 8004e36:	009b      	lsls	r3, r3, #2
 8004e38:	4a13      	ldr	r2, [pc, #76]	; (8004e88 <vTaskPriorityDisinheritAfterTimeout+0xd8>)
 8004e3a:	189b      	adds	r3, r3, r2
 8004e3c:	4299      	cmp	r1, r3
 8004e3e:	d11c      	bne.n	8004e7a <vTaskPriorityDisinheritAfterTimeout+0xca>
					{
						if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8004e40:	693b      	ldr	r3, [r7, #16]
 8004e42:	3304      	adds	r3, #4
 8004e44:	0018      	movs	r0, r3
 8004e46:	f7fc fbc0 	bl	80015ca <uxListRemove>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}

						prvAddTaskToReadyList( pxTCB );
 8004e4a:	693b      	ldr	r3, [r7, #16]
 8004e4c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004e4e:	4b0f      	ldr	r3, [pc, #60]	; (8004e8c <vTaskPriorityDisinheritAfterTimeout+0xdc>)
 8004e50:	681b      	ldr	r3, [r3, #0]
 8004e52:	429a      	cmp	r2, r3
 8004e54:	d903      	bls.n	8004e5e <vTaskPriorityDisinheritAfterTimeout+0xae>
 8004e56:	693b      	ldr	r3, [r7, #16]
 8004e58:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004e5a:	4b0c      	ldr	r3, [pc, #48]	; (8004e8c <vTaskPriorityDisinheritAfterTimeout+0xdc>)
 8004e5c:	601a      	str	r2, [r3, #0]
 8004e5e:	693b      	ldr	r3, [r7, #16]
 8004e60:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004e62:	0013      	movs	r3, r2
 8004e64:	009b      	lsls	r3, r3, #2
 8004e66:	189b      	adds	r3, r3, r2
 8004e68:	009b      	lsls	r3, r3, #2
 8004e6a:	4a07      	ldr	r2, [pc, #28]	; (8004e88 <vTaskPriorityDisinheritAfterTimeout+0xd8>)
 8004e6c:	189a      	adds	r2, r3, r2
 8004e6e:	693b      	ldr	r3, [r7, #16]
 8004e70:	3304      	adds	r3, #4
 8004e72:	0019      	movs	r1, r3
 8004e74:	0010      	movs	r0, r2
 8004e76:	f7fc fb50 	bl	800151a <vListInsertEnd>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8004e7a:	46c0      	nop			; (mov r8, r8)
 8004e7c:	46bd      	mov	sp, r7
 8004e7e:	b006      	add	sp, #24
 8004e80:	bd80      	pop	{r7, pc}
 8004e82:	46c0      	nop			; (mov r8, r8)
 8004e84:	20000c98 	.word	0x20000c98
 8004e88:	20000c9c 	.word	0x20000c9c
 8004e8c:	20000d78 	.word	0x20000d78

08004e90 <uxTaskResetEventItemValue>:

#endif /* ( ( configGENERATE_RUN_TIME_STATS == 1 ) && ( configUSE_STATS_FORMATTING_FUNCTIONS > 0 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

TickType_t uxTaskResetEventItemValue( void )
{
 8004e90:	b580      	push	{r7, lr}
 8004e92:	b082      	sub	sp, #8
 8004e94:	af00      	add	r7, sp, #0
TickType_t uxReturn;

	uxReturn = listGET_LIST_ITEM_VALUE( &( pxCurrentTCB->xEventListItem ) );
 8004e96:	4b08      	ldr	r3, [pc, #32]	; (8004eb8 <uxTaskResetEventItemValue+0x28>)
 8004e98:	681b      	ldr	r3, [r3, #0]
 8004e9a:	699b      	ldr	r3, [r3, #24]
 8004e9c:	607b      	str	r3, [r7, #4]

	/* Reset the event list item to its normal value - so it can be used with
	queues and semaphores. */
	listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xEventListItem ), ( ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxCurrentTCB->uxPriority ) ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8004e9e:	4b06      	ldr	r3, [pc, #24]	; (8004eb8 <uxTaskResetEventItemValue+0x28>)
 8004ea0:	681b      	ldr	r3, [r3, #0]
 8004ea2:	4a05      	ldr	r2, [pc, #20]	; (8004eb8 <uxTaskResetEventItemValue+0x28>)
 8004ea4:	6812      	ldr	r2, [r2, #0]
 8004ea6:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 8004ea8:	2105      	movs	r1, #5
 8004eaa:	1a8a      	subs	r2, r1, r2
 8004eac:	619a      	str	r2, [r3, #24]

	return uxReturn;
 8004eae:	687b      	ldr	r3, [r7, #4]
}
 8004eb0:	0018      	movs	r0, r3
 8004eb2:	46bd      	mov	sp, r7
 8004eb4:	b002      	add	sp, #8
 8004eb6:	bd80      	pop	{r7, pc}
 8004eb8:	20000c98 	.word	0x20000c98

08004ebc <pvTaskIncrementMutexHeldCount>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	TaskHandle_t pvTaskIncrementMutexHeldCount( void )
	{
 8004ebc:	b580      	push	{r7, lr}
 8004ebe:	af00      	add	r7, sp, #0
		/* If xSemaphoreCreateMutex() is called before any tasks have been created
		then pxCurrentTCB will be NULL. */
		if( pxCurrentTCB != NULL )
 8004ec0:	4b06      	ldr	r3, [pc, #24]	; (8004edc <pvTaskIncrementMutexHeldCount+0x20>)
 8004ec2:	681b      	ldr	r3, [r3, #0]
 8004ec4:	2b00      	cmp	r3, #0
 8004ec6:	d004      	beq.n	8004ed2 <pvTaskIncrementMutexHeldCount+0x16>
		{
			( pxCurrentTCB->uxMutexesHeld )++;
 8004ec8:	4b04      	ldr	r3, [pc, #16]	; (8004edc <pvTaskIncrementMutexHeldCount+0x20>)
 8004eca:	681b      	ldr	r3, [r3, #0]
 8004ecc:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8004ece:	3201      	adds	r2, #1
 8004ed0:	649a      	str	r2, [r3, #72]	; 0x48
		}

		return pxCurrentTCB;
 8004ed2:	4b02      	ldr	r3, [pc, #8]	; (8004edc <pvTaskIncrementMutexHeldCount+0x20>)
 8004ed4:	681b      	ldr	r3, [r3, #0]
	}
 8004ed6:	0018      	movs	r0, r3
 8004ed8:	46bd      	mov	sp, r7
 8004eda:	bd80      	pop	{r7, pc}
 8004edc:	20000c98 	.word	0x20000c98

08004ee0 <ulTaskNotifyTake>:
/*-----------------------------------------------------------*/

#if( configUSE_TASK_NOTIFICATIONS == 1 )

	uint32_t ulTaskNotifyTake( BaseType_t xClearCountOnExit, TickType_t xTicksToWait )
	{
 8004ee0:	b580      	push	{r7, lr}
 8004ee2:	b084      	sub	sp, #16
 8004ee4:	af00      	add	r7, sp, #0
 8004ee6:	6078      	str	r0, [r7, #4]
 8004ee8:	6039      	str	r1, [r7, #0]
	uint32_t ulReturn;

		taskENTER_CRITICAL();
 8004eea:	f7fc fc37 	bl	800175c <vPortEnterCritical>
		{
			/* Only block if the notification count is not already non-zero. */
			if( pxCurrentTCB->ulNotifiedValue == 0UL )
 8004eee:	4b1c      	ldr	r3, [pc, #112]	; (8004f60 <ulTaskNotifyTake+0x80>)
 8004ef0:	681b      	ldr	r3, [r3, #0]
 8004ef2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004ef4:	2b00      	cmp	r3, #0
 8004ef6:	d10e      	bne.n	8004f16 <ulTaskNotifyTake+0x36>
			{
				/* Mark this task as waiting for a notification. */
				pxCurrentTCB->ucNotifyState = taskWAITING_NOTIFICATION;
 8004ef8:	4b19      	ldr	r3, [pc, #100]	; (8004f60 <ulTaskNotifyTake+0x80>)
 8004efa:	681b      	ldr	r3, [r3, #0]
 8004efc:	2250      	movs	r2, #80	; 0x50
 8004efe:	2101      	movs	r1, #1
 8004f00:	5499      	strb	r1, [r3, r2]

				if( xTicksToWait > ( TickType_t ) 0 )
 8004f02:	683b      	ldr	r3, [r7, #0]
 8004f04:	2b00      	cmp	r3, #0
 8004f06:	d006      	beq.n	8004f16 <ulTaskNotifyTake+0x36>
				{
					prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8004f08:	683b      	ldr	r3, [r7, #0]
 8004f0a:	2101      	movs	r1, #1
 8004f0c:	0018      	movs	r0, r3
 8004f0e:	f000 fa85 	bl	800541c <prvAddCurrentTaskToDelayedList>

					/* All ports are written to allow a yield in a critical
					section (some will yield immediately, others wait until the
					critical section exits) - but it is not something that
					application code should ever do. */
					portYIELD_WITHIN_API();
 8004f12:	f7fc fc13 	bl	800173c <vPortYield>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
		taskEXIT_CRITICAL();
 8004f16:	f7fc fc33 	bl	8001780 <vPortExitCritical>

		taskENTER_CRITICAL();
 8004f1a:	f7fc fc1f 	bl	800175c <vPortEnterCritical>
		{
			traceTASK_NOTIFY_TAKE();
			ulReturn = pxCurrentTCB->ulNotifiedValue;
 8004f1e:	4b10      	ldr	r3, [pc, #64]	; (8004f60 <ulTaskNotifyTake+0x80>)
 8004f20:	681b      	ldr	r3, [r3, #0]
 8004f22:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004f24:	60fb      	str	r3, [r7, #12]

			if( ulReturn != 0UL )
 8004f26:	68fb      	ldr	r3, [r7, #12]
 8004f28:	2b00      	cmp	r3, #0
 8004f2a:	d00c      	beq.n	8004f46 <ulTaskNotifyTake+0x66>
			{
				if( xClearCountOnExit != pdFALSE )
 8004f2c:	687b      	ldr	r3, [r7, #4]
 8004f2e:	2b00      	cmp	r3, #0
 8004f30:	d004      	beq.n	8004f3c <ulTaskNotifyTake+0x5c>
				{
					pxCurrentTCB->ulNotifiedValue = 0UL;
 8004f32:	4b0b      	ldr	r3, [pc, #44]	; (8004f60 <ulTaskNotifyTake+0x80>)
 8004f34:	681b      	ldr	r3, [r3, #0]
 8004f36:	2200      	movs	r2, #0
 8004f38:	64da      	str	r2, [r3, #76]	; 0x4c
 8004f3a:	e004      	b.n	8004f46 <ulTaskNotifyTake+0x66>
				}
				else
				{
					pxCurrentTCB->ulNotifiedValue = ulReturn - ( uint32_t ) 1;
 8004f3c:	4b08      	ldr	r3, [pc, #32]	; (8004f60 <ulTaskNotifyTake+0x80>)
 8004f3e:	681b      	ldr	r3, [r3, #0]
 8004f40:	68fa      	ldr	r2, [r7, #12]
 8004f42:	3a01      	subs	r2, #1
 8004f44:	64da      	str	r2, [r3, #76]	; 0x4c
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			pxCurrentTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8004f46:	4b06      	ldr	r3, [pc, #24]	; (8004f60 <ulTaskNotifyTake+0x80>)
 8004f48:	681b      	ldr	r3, [r3, #0]
 8004f4a:	2250      	movs	r2, #80	; 0x50
 8004f4c:	2100      	movs	r1, #0
 8004f4e:	5499      	strb	r1, [r3, r2]
		}
		taskEXIT_CRITICAL();
 8004f50:	f7fc fc16 	bl	8001780 <vPortExitCritical>

		return ulReturn;
 8004f54:	68fb      	ldr	r3, [r7, #12]
	}
 8004f56:	0018      	movs	r0, r3
 8004f58:	46bd      	mov	sp, r7
 8004f5a:	b004      	add	sp, #16
 8004f5c:	bd80      	pop	{r7, pc}
 8004f5e:	46c0      	nop			; (mov r8, r8)
 8004f60:	20000c98 	.word	0x20000c98

08004f64 <xTaskNotifyWait>:
/*-----------------------------------------------------------*/

#if( configUSE_TASK_NOTIFICATIONS == 1 )

	BaseType_t xTaskNotifyWait( uint32_t ulBitsToClearOnEntry, uint32_t ulBitsToClearOnExit, uint32_t *pulNotificationValue, TickType_t xTicksToWait )
	{
 8004f64:	b580      	push	{r7, lr}
 8004f66:	b086      	sub	sp, #24
 8004f68:	af00      	add	r7, sp, #0
 8004f6a:	60f8      	str	r0, [r7, #12]
 8004f6c:	60b9      	str	r1, [r7, #8]
 8004f6e:	607a      	str	r2, [r7, #4]
 8004f70:	603b      	str	r3, [r7, #0]
	BaseType_t xReturn;

		taskENTER_CRITICAL();
 8004f72:	f7fc fbf3 	bl	800175c <vPortEnterCritical>
		{
			/* Only block if a notification is not already pending. */
			if( pxCurrentTCB->ucNotifyState != taskNOTIFICATION_RECEIVED )
 8004f76:	4b24      	ldr	r3, [pc, #144]	; (8005008 <xTaskNotifyWait+0xa4>)
 8004f78:	681b      	ldr	r3, [r3, #0]
 8004f7a:	2250      	movs	r2, #80	; 0x50
 8004f7c:	5c9b      	ldrb	r3, [r3, r2]
 8004f7e:	b2db      	uxtb	r3, r3
 8004f80:	2b02      	cmp	r3, #2
 8004f82:	d015      	beq.n	8004fb0 <xTaskNotifyWait+0x4c>
			{
				/* Clear bits in the task's notification value as bits may get
				set	by the notifying task or interrupt.  This can be used to
				clear the value to zero. */
				pxCurrentTCB->ulNotifiedValue &= ~ulBitsToClearOnEntry;
 8004f84:	4b20      	ldr	r3, [pc, #128]	; (8005008 <xTaskNotifyWait+0xa4>)
 8004f86:	681b      	ldr	r3, [r3, #0]
 8004f88:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8004f8a:	68f9      	ldr	r1, [r7, #12]
 8004f8c:	43c9      	mvns	r1, r1
 8004f8e:	400a      	ands	r2, r1
 8004f90:	64da      	str	r2, [r3, #76]	; 0x4c

				/* Mark this task as waiting for a notification. */
				pxCurrentTCB->ucNotifyState = taskWAITING_NOTIFICATION;
 8004f92:	4b1d      	ldr	r3, [pc, #116]	; (8005008 <xTaskNotifyWait+0xa4>)
 8004f94:	681b      	ldr	r3, [r3, #0]
 8004f96:	2250      	movs	r2, #80	; 0x50
 8004f98:	2101      	movs	r1, #1
 8004f9a:	5499      	strb	r1, [r3, r2]

				if( xTicksToWait > ( TickType_t ) 0 )
 8004f9c:	683b      	ldr	r3, [r7, #0]
 8004f9e:	2b00      	cmp	r3, #0
 8004fa0:	d006      	beq.n	8004fb0 <xTaskNotifyWait+0x4c>
				{
					prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8004fa2:	683b      	ldr	r3, [r7, #0]
 8004fa4:	2101      	movs	r1, #1
 8004fa6:	0018      	movs	r0, r3
 8004fa8:	f000 fa38 	bl	800541c <prvAddCurrentTaskToDelayedList>

					/* All ports are written to allow a yield in a critical
					section (some will yield immediately, others wait until the
					critical section exits) - but it is not something that
					application code should ever do. */
					portYIELD_WITHIN_API();
 8004fac:	f7fc fbc6 	bl	800173c <vPortYield>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
		taskEXIT_CRITICAL();
 8004fb0:	f7fc fbe6 	bl	8001780 <vPortExitCritical>

		taskENTER_CRITICAL();
 8004fb4:	f7fc fbd2 	bl	800175c <vPortEnterCritical>
		{
			traceTASK_NOTIFY_WAIT();

			if( pulNotificationValue != NULL )
 8004fb8:	687b      	ldr	r3, [r7, #4]
 8004fba:	2b00      	cmp	r3, #0
 8004fbc:	d004      	beq.n	8004fc8 <xTaskNotifyWait+0x64>
			{
				/* Output the current notification value, which may or may not
				have changed. */
				*pulNotificationValue = pxCurrentTCB->ulNotifiedValue;
 8004fbe:	4b12      	ldr	r3, [pc, #72]	; (8005008 <xTaskNotifyWait+0xa4>)
 8004fc0:	681b      	ldr	r3, [r3, #0]
 8004fc2:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8004fc4:	687b      	ldr	r3, [r7, #4]
 8004fc6:	601a      	str	r2, [r3, #0]

			/* If ucNotifyValue is set then either the task never entered the
			blocked state (because a notification was already pending) or the
			task unblocked because of a notification.  Otherwise the task
			unblocked because of a timeout. */
			if( pxCurrentTCB->ucNotifyState != taskNOTIFICATION_RECEIVED )
 8004fc8:	4b0f      	ldr	r3, [pc, #60]	; (8005008 <xTaskNotifyWait+0xa4>)
 8004fca:	681b      	ldr	r3, [r3, #0]
 8004fcc:	2250      	movs	r2, #80	; 0x50
 8004fce:	5c9b      	ldrb	r3, [r3, r2]
 8004fd0:	b2db      	uxtb	r3, r3
 8004fd2:	2b02      	cmp	r3, #2
 8004fd4:	d002      	beq.n	8004fdc <xTaskNotifyWait+0x78>
			{
				/* A notification was not received. */
				xReturn = pdFALSE;
 8004fd6:	2300      	movs	r3, #0
 8004fd8:	617b      	str	r3, [r7, #20]
 8004fda:	e008      	b.n	8004fee <xTaskNotifyWait+0x8a>
			}
			else
			{
				/* A notification was already pending or a notification was
				received while the task was waiting. */
				pxCurrentTCB->ulNotifiedValue &= ~ulBitsToClearOnExit;
 8004fdc:	4b0a      	ldr	r3, [pc, #40]	; (8005008 <xTaskNotifyWait+0xa4>)
 8004fde:	681b      	ldr	r3, [r3, #0]
 8004fe0:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8004fe2:	68b9      	ldr	r1, [r7, #8]
 8004fe4:	43c9      	mvns	r1, r1
 8004fe6:	400a      	ands	r2, r1
 8004fe8:	64da      	str	r2, [r3, #76]	; 0x4c
				xReturn = pdTRUE;
 8004fea:	2301      	movs	r3, #1
 8004fec:	617b      	str	r3, [r7, #20]
			}

			pxCurrentTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8004fee:	4b06      	ldr	r3, [pc, #24]	; (8005008 <xTaskNotifyWait+0xa4>)
 8004ff0:	681b      	ldr	r3, [r3, #0]
 8004ff2:	2250      	movs	r2, #80	; 0x50
 8004ff4:	2100      	movs	r1, #0
 8004ff6:	5499      	strb	r1, [r3, r2]
		}
		taskEXIT_CRITICAL();
 8004ff8:	f7fc fbc2 	bl	8001780 <vPortExitCritical>

		return xReturn;
 8004ffc:	697b      	ldr	r3, [r7, #20]
	}
 8004ffe:	0018      	movs	r0, r3
 8005000:	46bd      	mov	sp, r7
 8005002:	b006      	add	sp, #24
 8005004:	bd80      	pop	{r7, pc}
 8005006:	46c0      	nop			; (mov r8, r8)
 8005008:	20000c98 	.word	0x20000c98

0800500c <xTaskGenericNotify>:
/*-----------------------------------------------------------*/

#if( configUSE_TASK_NOTIFICATIONS == 1 )

	BaseType_t xTaskGenericNotify( TaskHandle_t xTaskToNotify, uint32_t ulValue, eNotifyAction eAction, uint32_t *pulPreviousNotificationValue )
	{
 800500c:	b580      	push	{r7, lr}
 800500e:	b088      	sub	sp, #32
 8005010:	af00      	add	r7, sp, #0
 8005012:	60f8      	str	r0, [r7, #12]
 8005014:	60b9      	str	r1, [r7, #8]
 8005016:	603b      	str	r3, [r7, #0]
 8005018:	1dfb      	adds	r3, r7, #7
 800501a:	701a      	strb	r2, [r3, #0]
	TCB_t * pxTCB;
	BaseType_t xReturn = pdPASS;
 800501c:	2301      	movs	r3, #1
 800501e:	61fb      	str	r3, [r7, #28]
	uint8_t ucOriginalNotifyState;

		configASSERT( xTaskToNotify );
 8005020:	68fb      	ldr	r3, [r7, #12]
 8005022:	2b00      	cmp	r3, #0
 8005024:	d101      	bne.n	800502a <xTaskGenericNotify+0x1e>
 8005026:	b672      	cpsid	i
 8005028:	e7fe      	b.n	8005028 <xTaskGenericNotify+0x1c>
		pxTCB = xTaskToNotify;
 800502a:	68fb      	ldr	r3, [r7, #12]
 800502c:	61bb      	str	r3, [r7, #24]

		taskENTER_CRITICAL();
 800502e:	f7fc fb95 	bl	800175c <vPortEnterCritical>
		{
			if( pulPreviousNotificationValue != NULL )
 8005032:	683b      	ldr	r3, [r7, #0]
 8005034:	2b00      	cmp	r3, #0
 8005036:	d003      	beq.n	8005040 <xTaskGenericNotify+0x34>
			{
				*pulPreviousNotificationValue = pxTCB->ulNotifiedValue;
 8005038:	69bb      	ldr	r3, [r7, #24]
 800503a:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800503c:	683b      	ldr	r3, [r7, #0]
 800503e:	601a      	str	r2, [r3, #0]
			}

			ucOriginalNotifyState = pxTCB->ucNotifyState;
 8005040:	2317      	movs	r3, #23
 8005042:	18fb      	adds	r3, r7, r3
 8005044:	69ba      	ldr	r2, [r7, #24]
 8005046:	2150      	movs	r1, #80	; 0x50
 8005048:	5c52      	ldrb	r2, [r2, r1]
 800504a:	701a      	strb	r2, [r3, #0]

			pxTCB->ucNotifyState = taskNOTIFICATION_RECEIVED;
 800504c:	69bb      	ldr	r3, [r7, #24]
 800504e:	2250      	movs	r2, #80	; 0x50
 8005050:	2102      	movs	r1, #2
 8005052:	5499      	strb	r1, [r3, r2]

			switch( eAction )
 8005054:	1dfb      	adds	r3, r7, #7
 8005056:	781b      	ldrb	r3, [r3, #0]
 8005058:	2b04      	cmp	r3, #4
 800505a:	d821      	bhi.n	80050a0 <xTaskGenericNotify+0x94>
 800505c:	009a      	lsls	r2, r3, #2
 800505e:	4b31      	ldr	r3, [pc, #196]	; (8005124 <xTaskGenericNotify+0x118>)
 8005060:	18d3      	adds	r3, r2, r3
 8005062:	681b      	ldr	r3, [r3, #0]
 8005064:	469f      	mov	pc, r3
			{
				case eSetBits	:
					pxTCB->ulNotifiedValue |= ulValue;
 8005066:	69bb      	ldr	r3, [r7, #24]
 8005068:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800506a:	68bb      	ldr	r3, [r7, #8]
 800506c:	431a      	orrs	r2, r3
 800506e:	69bb      	ldr	r3, [r7, #24]
 8005070:	64da      	str	r2, [r3, #76]	; 0x4c
					break;
 8005072:	e01e      	b.n	80050b2 <xTaskGenericNotify+0xa6>

				case eIncrement	:
					( pxTCB->ulNotifiedValue )++;
 8005074:	69bb      	ldr	r3, [r7, #24]
 8005076:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005078:	1c5a      	adds	r2, r3, #1
 800507a:	69bb      	ldr	r3, [r7, #24]
 800507c:	64da      	str	r2, [r3, #76]	; 0x4c
					break;
 800507e:	e018      	b.n	80050b2 <xTaskGenericNotify+0xa6>

				case eSetValueWithOverwrite	:
					pxTCB->ulNotifiedValue = ulValue;
 8005080:	69bb      	ldr	r3, [r7, #24]
 8005082:	68ba      	ldr	r2, [r7, #8]
 8005084:	64da      	str	r2, [r3, #76]	; 0x4c
					break;
 8005086:	e014      	b.n	80050b2 <xTaskGenericNotify+0xa6>

				case eSetValueWithoutOverwrite :
					if( ucOriginalNotifyState != taskNOTIFICATION_RECEIVED )
 8005088:	2317      	movs	r3, #23
 800508a:	18fb      	adds	r3, r7, r3
 800508c:	781b      	ldrb	r3, [r3, #0]
 800508e:	2b02      	cmp	r3, #2
 8005090:	d003      	beq.n	800509a <xTaskGenericNotify+0x8e>
					{
						pxTCB->ulNotifiedValue = ulValue;
 8005092:	69bb      	ldr	r3, [r7, #24]
 8005094:	68ba      	ldr	r2, [r7, #8]
 8005096:	64da      	str	r2, [r3, #76]	; 0x4c
					else
					{
						/* The value could not be written to the task. */
						xReturn = pdFAIL;
					}
					break;
 8005098:	e00b      	b.n	80050b2 <xTaskGenericNotify+0xa6>
						xReturn = pdFAIL;
 800509a:	2300      	movs	r3, #0
 800509c:	61fb      	str	r3, [r7, #28]
					break;
 800509e:	e008      	b.n	80050b2 <xTaskGenericNotify+0xa6>

				default:
					/* Should not get here if all enums are handled.
					Artificially force an assert by testing a value the
					compiler can't assume is const. */
					configASSERT( pxTCB->ulNotifiedValue == ~0UL );
 80050a0:	69bb      	ldr	r3, [r7, #24]
 80050a2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80050a4:	3301      	adds	r3, #1
 80050a6:	d003      	beq.n	80050b0 <xTaskGenericNotify+0xa4>
 80050a8:	b672      	cpsid	i
 80050aa:	e7fe      	b.n	80050aa <xTaskGenericNotify+0x9e>
					break;
 80050ac:	46c0      	nop			; (mov r8, r8)
 80050ae:	e000      	b.n	80050b2 <xTaskGenericNotify+0xa6>

					break;
 80050b0:	46c0      	nop			; (mov r8, r8)

			traceTASK_NOTIFY();

			/* If the task is in the blocked state specifically to wait for a
			notification then unblock it now. */
			if( ucOriginalNotifyState == taskWAITING_NOTIFICATION )
 80050b2:	2317      	movs	r3, #23
 80050b4:	18fb      	adds	r3, r7, r3
 80050b6:	781b      	ldrb	r3, [r3, #0]
 80050b8:	2b01      	cmp	r3, #1
 80050ba:	d12b      	bne.n	8005114 <xTaskGenericNotify+0x108>
			{
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80050bc:	69bb      	ldr	r3, [r7, #24]
 80050be:	3304      	adds	r3, #4
 80050c0:	0018      	movs	r0, r3
 80050c2:	f7fc fa82 	bl	80015ca <uxListRemove>
				prvAddTaskToReadyList( pxTCB );
 80050c6:	69bb      	ldr	r3, [r7, #24]
 80050c8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80050ca:	4b17      	ldr	r3, [pc, #92]	; (8005128 <xTaskGenericNotify+0x11c>)
 80050cc:	681b      	ldr	r3, [r3, #0]
 80050ce:	429a      	cmp	r2, r3
 80050d0:	d903      	bls.n	80050da <xTaskGenericNotify+0xce>
 80050d2:	69bb      	ldr	r3, [r7, #24]
 80050d4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80050d6:	4b14      	ldr	r3, [pc, #80]	; (8005128 <xTaskGenericNotify+0x11c>)
 80050d8:	601a      	str	r2, [r3, #0]
 80050da:	69bb      	ldr	r3, [r7, #24]
 80050dc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80050de:	0013      	movs	r3, r2
 80050e0:	009b      	lsls	r3, r3, #2
 80050e2:	189b      	adds	r3, r3, r2
 80050e4:	009b      	lsls	r3, r3, #2
 80050e6:	4a11      	ldr	r2, [pc, #68]	; (800512c <xTaskGenericNotify+0x120>)
 80050e8:	189a      	adds	r2, r3, r2
 80050ea:	69bb      	ldr	r3, [r7, #24]
 80050ec:	3304      	adds	r3, #4
 80050ee:	0019      	movs	r1, r3
 80050f0:	0010      	movs	r0, r2
 80050f2:	f7fc fa12 	bl	800151a <vListInsertEnd>

				/* The task should not have been on an event list. */
				configASSERT( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) == NULL );
 80050f6:	69bb      	ldr	r3, [r7, #24]
 80050f8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80050fa:	2b00      	cmp	r3, #0
 80050fc:	d001      	beq.n	8005102 <xTaskGenericNotify+0xf6>
 80050fe:	b672      	cpsid	i
 8005100:	e7fe      	b.n	8005100 <xTaskGenericNotify+0xf4>
					earliest possible time. */
					prvResetNextTaskUnblockTime();
				}
				#endif

				if( pxTCB->uxPriority > pxCurrentTCB->uxPriority )
 8005102:	69bb      	ldr	r3, [r7, #24]
 8005104:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005106:	4b0a      	ldr	r3, [pc, #40]	; (8005130 <xTaskGenericNotify+0x124>)
 8005108:	681b      	ldr	r3, [r3, #0]
 800510a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800510c:	429a      	cmp	r2, r3
 800510e:	d901      	bls.n	8005114 <xTaskGenericNotify+0x108>
				{
					/* The notified task has a priority above the currently
					executing task so a yield is required. */
					taskYIELD_IF_USING_PREEMPTION();
 8005110:	f7fc fb14 	bl	800173c <vPortYield>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
		taskEXIT_CRITICAL();
 8005114:	f7fc fb34 	bl	8001780 <vPortExitCritical>

		return xReturn;
 8005118:	69fb      	ldr	r3, [r7, #28]
	}
 800511a:	0018      	movs	r0, r3
 800511c:	46bd      	mov	sp, r7
 800511e:	b008      	add	sp, #32
 8005120:	bd80      	pop	{r7, pc}
 8005122:	46c0      	nop			; (mov r8, r8)
 8005124:	080074d0 	.word	0x080074d0
 8005128:	20000d78 	.word	0x20000d78
 800512c:	20000c9c 	.word	0x20000c9c
 8005130:	20000c98 	.word	0x20000c98

08005134 <xTaskGenericNotifyFromISR>:
/*-----------------------------------------------------------*/

#if( configUSE_TASK_NOTIFICATIONS == 1 )

	BaseType_t xTaskGenericNotifyFromISR( TaskHandle_t xTaskToNotify, uint32_t ulValue, eNotifyAction eAction, uint32_t *pulPreviousNotificationValue, BaseType_t *pxHigherPriorityTaskWoken )
	{
 8005134:	b580      	push	{r7, lr}
 8005136:	b088      	sub	sp, #32
 8005138:	af00      	add	r7, sp, #0
 800513a:	60f8      	str	r0, [r7, #12]
 800513c:	60b9      	str	r1, [r7, #8]
 800513e:	603b      	str	r3, [r7, #0]
 8005140:	1dfb      	adds	r3, r7, #7
 8005142:	701a      	strb	r2, [r3, #0]
	TCB_t * pxTCB;
	uint8_t ucOriginalNotifyState;
	BaseType_t xReturn = pdPASS;
 8005144:	2301      	movs	r3, #1
 8005146:	61fb      	str	r3, [r7, #28]
	UBaseType_t uxSavedInterruptStatus;

		configASSERT( xTaskToNotify );
 8005148:	68fb      	ldr	r3, [r7, #12]
 800514a:	2b00      	cmp	r3, #0
 800514c:	d101      	bne.n	8005152 <xTaskGenericNotifyFromISR+0x1e>
 800514e:	b672      	cpsid	i
 8005150:	e7fe      	b.n	8005150 <xTaskGenericNotifyFromISR+0x1c>
		simple as possible.  More information (albeit Cortex-M specific) is
		provided on the following link:
		http://www.freertos.org/RTOS-Cortex-M3-M4.html */
		portASSERT_IF_INTERRUPT_PRIORITY_INVALID();

		pxTCB = xTaskToNotify;
 8005152:	68fb      	ldr	r3, [r7, #12]
 8005154:	61bb      	str	r3, [r7, #24]

		uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8005156:	f7fc fb2b 	bl	80017b0 <ulSetInterruptMaskFromISR>
 800515a:	0003      	movs	r3, r0
 800515c:	617b      	str	r3, [r7, #20]
		{
			if( pulPreviousNotificationValue != NULL )
 800515e:	683b      	ldr	r3, [r7, #0]
 8005160:	2b00      	cmp	r3, #0
 8005162:	d003      	beq.n	800516c <xTaskGenericNotifyFromISR+0x38>
			{
				*pulPreviousNotificationValue = pxTCB->ulNotifiedValue;
 8005164:	69bb      	ldr	r3, [r7, #24]
 8005166:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8005168:	683b      	ldr	r3, [r7, #0]
 800516a:	601a      	str	r2, [r3, #0]
			}

			ucOriginalNotifyState = pxTCB->ucNotifyState;
 800516c:	2313      	movs	r3, #19
 800516e:	18fb      	adds	r3, r7, r3
 8005170:	69ba      	ldr	r2, [r7, #24]
 8005172:	2150      	movs	r1, #80	; 0x50
 8005174:	5c52      	ldrb	r2, [r2, r1]
 8005176:	701a      	strb	r2, [r3, #0]
			pxTCB->ucNotifyState = taskNOTIFICATION_RECEIVED;
 8005178:	69bb      	ldr	r3, [r7, #24]
 800517a:	2250      	movs	r2, #80	; 0x50
 800517c:	2102      	movs	r1, #2
 800517e:	5499      	strb	r1, [r3, r2]

			switch( eAction )
 8005180:	1dfb      	adds	r3, r7, #7
 8005182:	781b      	ldrb	r3, [r3, #0]
 8005184:	2b04      	cmp	r3, #4
 8005186:	d821      	bhi.n	80051cc <xTaskGenericNotifyFromISR+0x98>
 8005188:	009a      	lsls	r2, r3, #2
 800518a:	4b3c      	ldr	r3, [pc, #240]	; (800527c <xTaskGenericNotifyFromISR+0x148>)
 800518c:	18d3      	adds	r3, r2, r3
 800518e:	681b      	ldr	r3, [r3, #0]
 8005190:	469f      	mov	pc, r3
			{
				case eSetBits	:
					pxTCB->ulNotifiedValue |= ulValue;
 8005192:	69bb      	ldr	r3, [r7, #24]
 8005194:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8005196:	68bb      	ldr	r3, [r7, #8]
 8005198:	431a      	orrs	r2, r3
 800519a:	69bb      	ldr	r3, [r7, #24]
 800519c:	64da      	str	r2, [r3, #76]	; 0x4c
					break;
 800519e:	e01e      	b.n	80051de <xTaskGenericNotifyFromISR+0xaa>

				case eIncrement	:
					( pxTCB->ulNotifiedValue )++;
 80051a0:	69bb      	ldr	r3, [r7, #24]
 80051a2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80051a4:	1c5a      	adds	r2, r3, #1
 80051a6:	69bb      	ldr	r3, [r7, #24]
 80051a8:	64da      	str	r2, [r3, #76]	; 0x4c
					break;
 80051aa:	e018      	b.n	80051de <xTaskGenericNotifyFromISR+0xaa>

				case eSetValueWithOverwrite	:
					pxTCB->ulNotifiedValue = ulValue;
 80051ac:	69bb      	ldr	r3, [r7, #24]
 80051ae:	68ba      	ldr	r2, [r7, #8]
 80051b0:	64da      	str	r2, [r3, #76]	; 0x4c
					break;
 80051b2:	e014      	b.n	80051de <xTaskGenericNotifyFromISR+0xaa>

				case eSetValueWithoutOverwrite :
					if( ucOriginalNotifyState != taskNOTIFICATION_RECEIVED )
 80051b4:	2313      	movs	r3, #19
 80051b6:	18fb      	adds	r3, r7, r3
 80051b8:	781b      	ldrb	r3, [r3, #0]
 80051ba:	2b02      	cmp	r3, #2
 80051bc:	d003      	beq.n	80051c6 <xTaskGenericNotifyFromISR+0x92>
					{
						pxTCB->ulNotifiedValue = ulValue;
 80051be:	69bb      	ldr	r3, [r7, #24]
 80051c0:	68ba      	ldr	r2, [r7, #8]
 80051c2:	64da      	str	r2, [r3, #76]	; 0x4c
					else
					{
						/* The value could not be written to the task. */
						xReturn = pdFAIL;
					}
					break;
 80051c4:	e00b      	b.n	80051de <xTaskGenericNotifyFromISR+0xaa>
						xReturn = pdFAIL;
 80051c6:	2300      	movs	r3, #0
 80051c8:	61fb      	str	r3, [r7, #28]
					break;
 80051ca:	e008      	b.n	80051de <xTaskGenericNotifyFromISR+0xaa>

				default:
					/* Should not get here if all enums are handled.
					Artificially force an assert by testing a value the
					compiler can't assume is const. */
					configASSERT( pxTCB->ulNotifiedValue == ~0UL );
 80051cc:	69bb      	ldr	r3, [r7, #24]
 80051ce:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80051d0:	3301      	adds	r3, #1
 80051d2:	d003      	beq.n	80051dc <xTaskGenericNotifyFromISR+0xa8>
 80051d4:	b672      	cpsid	i
 80051d6:	e7fe      	b.n	80051d6 <xTaskGenericNotifyFromISR+0xa2>
					break;
 80051d8:	46c0      	nop			; (mov r8, r8)
 80051da:	e000      	b.n	80051de <xTaskGenericNotifyFromISR+0xaa>
					break;
 80051dc:	46c0      	nop			; (mov r8, r8)

			traceTASK_NOTIFY_FROM_ISR();

			/* If the task is in the blocked state specifically to wait for a
			notification then unblock it now. */
			if( ucOriginalNotifyState == taskWAITING_NOTIFICATION )
 80051de:	2313      	movs	r3, #19
 80051e0:	18fb      	adds	r3, r7, r3
 80051e2:	781b      	ldrb	r3, [r3, #0]
 80051e4:	2b01      	cmp	r3, #1
 80051e6:	d13f      	bne.n	8005268 <xTaskGenericNotifyFromISR+0x134>
			{
				/* The task should not have been on an event list. */
				configASSERT( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) == NULL );
 80051e8:	69bb      	ldr	r3, [r7, #24]
 80051ea:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80051ec:	2b00      	cmp	r3, #0
 80051ee:	d001      	beq.n	80051f4 <xTaskGenericNotifyFromISR+0xc0>
 80051f0:	b672      	cpsid	i
 80051f2:	e7fe      	b.n	80051f2 <xTaskGenericNotifyFromISR+0xbe>

				if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80051f4:	4b22      	ldr	r3, [pc, #136]	; (8005280 <xTaskGenericNotifyFromISR+0x14c>)
 80051f6:	681b      	ldr	r3, [r3, #0]
 80051f8:	2b00      	cmp	r3, #0
 80051fa:	d11d      	bne.n	8005238 <xTaskGenericNotifyFromISR+0x104>
				{
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80051fc:	69bb      	ldr	r3, [r7, #24]
 80051fe:	3304      	adds	r3, #4
 8005200:	0018      	movs	r0, r3
 8005202:	f7fc f9e2 	bl	80015ca <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8005206:	69bb      	ldr	r3, [r7, #24]
 8005208:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800520a:	4b1e      	ldr	r3, [pc, #120]	; (8005284 <xTaskGenericNotifyFromISR+0x150>)
 800520c:	681b      	ldr	r3, [r3, #0]
 800520e:	429a      	cmp	r2, r3
 8005210:	d903      	bls.n	800521a <xTaskGenericNotifyFromISR+0xe6>
 8005212:	69bb      	ldr	r3, [r7, #24]
 8005214:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005216:	4b1b      	ldr	r3, [pc, #108]	; (8005284 <xTaskGenericNotifyFromISR+0x150>)
 8005218:	601a      	str	r2, [r3, #0]
 800521a:	69bb      	ldr	r3, [r7, #24]
 800521c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800521e:	0013      	movs	r3, r2
 8005220:	009b      	lsls	r3, r3, #2
 8005222:	189b      	adds	r3, r3, r2
 8005224:	009b      	lsls	r3, r3, #2
 8005226:	4a18      	ldr	r2, [pc, #96]	; (8005288 <xTaskGenericNotifyFromISR+0x154>)
 8005228:	189a      	adds	r2, r3, r2
 800522a:	69bb      	ldr	r3, [r7, #24]
 800522c:	3304      	adds	r3, #4
 800522e:	0019      	movs	r1, r3
 8005230:	0010      	movs	r0, r2
 8005232:	f7fc f972 	bl	800151a <vListInsertEnd>
 8005236:	e007      	b.n	8005248 <xTaskGenericNotifyFromISR+0x114>
				}
				else
				{
					/* The delayed and ready lists cannot be accessed, so hold
					this task pending until the scheduler is resumed. */
					vListInsertEnd( &( xPendingReadyList ), &( pxTCB->xEventListItem ) );
 8005238:	69bb      	ldr	r3, [r7, #24]
 800523a:	3318      	adds	r3, #24
 800523c:	001a      	movs	r2, r3
 800523e:	4b13      	ldr	r3, [pc, #76]	; (800528c <xTaskGenericNotifyFromISR+0x158>)
 8005240:	0011      	movs	r1, r2
 8005242:	0018      	movs	r0, r3
 8005244:	f7fc f969 	bl	800151a <vListInsertEnd>
				}

				if( pxTCB->uxPriority > pxCurrentTCB->uxPriority )
 8005248:	69bb      	ldr	r3, [r7, #24]
 800524a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800524c:	4b10      	ldr	r3, [pc, #64]	; (8005290 <xTaskGenericNotifyFromISR+0x15c>)
 800524e:	681b      	ldr	r3, [r3, #0]
 8005250:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005252:	429a      	cmp	r2, r3
 8005254:	d908      	bls.n	8005268 <xTaskGenericNotifyFromISR+0x134>
				{
					/* The notified task has a priority above the currently
					executing task so a yield is required. */
					if( pxHigherPriorityTaskWoken != NULL )
 8005256:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005258:	2b00      	cmp	r3, #0
 800525a:	d002      	beq.n	8005262 <xTaskGenericNotifyFromISR+0x12e>
					{
						*pxHigherPriorityTaskWoken = pdTRUE;
 800525c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800525e:	2201      	movs	r2, #1
 8005260:	601a      	str	r2, [r3, #0]
					}

					/* Mark that a yield is pending in case the user is not
					using the "xHigherPriorityTaskWoken" parameter to an ISR
					safe FreeRTOS function. */
					xYieldPending = pdTRUE;
 8005262:	4b0c      	ldr	r3, [pc, #48]	; (8005294 <xTaskGenericNotifyFromISR+0x160>)
 8005264:	2201      	movs	r2, #1
 8005266:	601a      	str	r2, [r3, #0]
				{
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );
 8005268:	697b      	ldr	r3, [r7, #20]
 800526a:	0018      	movs	r0, r3
 800526c:	f7fc faa6 	bl	80017bc <vClearInterruptMaskFromISR>

		return xReturn;
 8005270:	69fb      	ldr	r3, [r7, #28]
	}
 8005272:	0018      	movs	r0, r3
 8005274:	46bd      	mov	sp, r7
 8005276:	b008      	add	sp, #32
 8005278:	bd80      	pop	{r7, pc}
 800527a:	46c0      	nop			; (mov r8, r8)
 800527c:	080074e4 	.word	0x080074e4
 8005280:	20000d98 	.word	0x20000d98
 8005284:	20000d78 	.word	0x20000d78
 8005288:	20000c9c 	.word	0x20000c9c
 800528c:	20000d30 	.word	0x20000d30
 8005290:	20000c98 	.word	0x20000c98
 8005294:	20000d84 	.word	0x20000d84

08005298 <vTaskNotifyGiveFromISR>:
/*-----------------------------------------------------------*/

#if( configUSE_TASK_NOTIFICATIONS == 1 )

	void vTaskNotifyGiveFromISR( TaskHandle_t xTaskToNotify, BaseType_t *pxHigherPriorityTaskWoken )
	{
 8005298:	b580      	push	{r7, lr}
 800529a:	b086      	sub	sp, #24
 800529c:	af00      	add	r7, sp, #0
 800529e:	6078      	str	r0, [r7, #4]
 80052a0:	6039      	str	r1, [r7, #0]
	TCB_t * pxTCB;
	uint8_t ucOriginalNotifyState;
	UBaseType_t uxSavedInterruptStatus;

		configASSERT( xTaskToNotify );
 80052a2:	687b      	ldr	r3, [r7, #4]
 80052a4:	2b00      	cmp	r3, #0
 80052a6:	d101      	bne.n	80052ac <vTaskNotifyGiveFromISR+0x14>
 80052a8:	b672      	cpsid	i
 80052aa:	e7fe      	b.n	80052aa <vTaskNotifyGiveFromISR+0x12>
		simple as possible.  More information (albeit Cortex-M specific) is
		provided on the following link:
		http://www.freertos.org/RTOS-Cortex-M3-M4.html */
		portASSERT_IF_INTERRUPT_PRIORITY_INVALID();

		pxTCB = xTaskToNotify;
 80052ac:	687b      	ldr	r3, [r7, #4]
 80052ae:	617b      	str	r3, [r7, #20]

		uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 80052b0:	f7fc fa7e 	bl	80017b0 <ulSetInterruptMaskFromISR>
 80052b4:	0003      	movs	r3, r0
 80052b6:	613b      	str	r3, [r7, #16]
		{
			ucOriginalNotifyState = pxTCB->ucNotifyState;
 80052b8:	230f      	movs	r3, #15
 80052ba:	18fb      	adds	r3, r7, r3
 80052bc:	697a      	ldr	r2, [r7, #20]
 80052be:	2150      	movs	r1, #80	; 0x50
 80052c0:	5c52      	ldrb	r2, [r2, r1]
 80052c2:	701a      	strb	r2, [r3, #0]
			pxTCB->ucNotifyState = taskNOTIFICATION_RECEIVED;
 80052c4:	697b      	ldr	r3, [r7, #20]
 80052c6:	2250      	movs	r2, #80	; 0x50
 80052c8:	2102      	movs	r1, #2
 80052ca:	5499      	strb	r1, [r3, r2]

			/* 'Giving' is equivalent to incrementing a count in a counting
			semaphore. */
			( pxTCB->ulNotifiedValue )++;
 80052cc:	697b      	ldr	r3, [r7, #20]
 80052ce:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80052d0:	1c5a      	adds	r2, r3, #1
 80052d2:	697b      	ldr	r3, [r7, #20]
 80052d4:	64da      	str	r2, [r3, #76]	; 0x4c

			traceTASK_NOTIFY_GIVE_FROM_ISR();

			/* If the task is in the blocked state specifically to wait for a
			notification then unblock it now. */
			if( ucOriginalNotifyState == taskWAITING_NOTIFICATION )
 80052d6:	230f      	movs	r3, #15
 80052d8:	18fb      	adds	r3, r7, r3
 80052da:	781b      	ldrb	r3, [r3, #0]
 80052dc:	2b01      	cmp	r3, #1
 80052de:	d13f      	bne.n	8005360 <vTaskNotifyGiveFromISR+0xc8>
			{
				/* The task should not have been on an event list. */
				configASSERT( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) == NULL );
 80052e0:	697b      	ldr	r3, [r7, #20]
 80052e2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80052e4:	2b00      	cmp	r3, #0
 80052e6:	d001      	beq.n	80052ec <vTaskNotifyGiveFromISR+0x54>
 80052e8:	b672      	cpsid	i
 80052ea:	e7fe      	b.n	80052ea <vTaskNotifyGiveFromISR+0x52>

				if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80052ec:	4b20      	ldr	r3, [pc, #128]	; (8005370 <vTaskNotifyGiveFromISR+0xd8>)
 80052ee:	681b      	ldr	r3, [r3, #0]
 80052f0:	2b00      	cmp	r3, #0
 80052f2:	d11d      	bne.n	8005330 <vTaskNotifyGiveFromISR+0x98>
				{
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80052f4:	697b      	ldr	r3, [r7, #20]
 80052f6:	3304      	adds	r3, #4
 80052f8:	0018      	movs	r0, r3
 80052fa:	f7fc f966 	bl	80015ca <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 80052fe:	697b      	ldr	r3, [r7, #20]
 8005300:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005302:	4b1c      	ldr	r3, [pc, #112]	; (8005374 <vTaskNotifyGiveFromISR+0xdc>)
 8005304:	681b      	ldr	r3, [r3, #0]
 8005306:	429a      	cmp	r2, r3
 8005308:	d903      	bls.n	8005312 <vTaskNotifyGiveFromISR+0x7a>
 800530a:	697b      	ldr	r3, [r7, #20]
 800530c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800530e:	4b19      	ldr	r3, [pc, #100]	; (8005374 <vTaskNotifyGiveFromISR+0xdc>)
 8005310:	601a      	str	r2, [r3, #0]
 8005312:	697b      	ldr	r3, [r7, #20]
 8005314:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005316:	0013      	movs	r3, r2
 8005318:	009b      	lsls	r3, r3, #2
 800531a:	189b      	adds	r3, r3, r2
 800531c:	009b      	lsls	r3, r3, #2
 800531e:	4a16      	ldr	r2, [pc, #88]	; (8005378 <vTaskNotifyGiveFromISR+0xe0>)
 8005320:	189a      	adds	r2, r3, r2
 8005322:	697b      	ldr	r3, [r7, #20]
 8005324:	3304      	adds	r3, #4
 8005326:	0019      	movs	r1, r3
 8005328:	0010      	movs	r0, r2
 800532a:	f7fc f8f6 	bl	800151a <vListInsertEnd>
 800532e:	e007      	b.n	8005340 <vTaskNotifyGiveFromISR+0xa8>
				}
				else
				{
					/* The delayed and ready lists cannot be accessed, so hold
					this task pending until the scheduler is resumed. */
					vListInsertEnd( &( xPendingReadyList ), &( pxTCB->xEventListItem ) );
 8005330:	697b      	ldr	r3, [r7, #20]
 8005332:	3318      	adds	r3, #24
 8005334:	001a      	movs	r2, r3
 8005336:	4b11      	ldr	r3, [pc, #68]	; (800537c <vTaskNotifyGiveFromISR+0xe4>)
 8005338:	0011      	movs	r1, r2
 800533a:	0018      	movs	r0, r3
 800533c:	f7fc f8ed 	bl	800151a <vListInsertEnd>
				}

				if( pxTCB->uxPriority > pxCurrentTCB->uxPriority )
 8005340:	697b      	ldr	r3, [r7, #20]
 8005342:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005344:	4b0e      	ldr	r3, [pc, #56]	; (8005380 <vTaskNotifyGiveFromISR+0xe8>)
 8005346:	681b      	ldr	r3, [r3, #0]
 8005348:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800534a:	429a      	cmp	r2, r3
 800534c:	d908      	bls.n	8005360 <vTaskNotifyGiveFromISR+0xc8>
				{
					/* The notified task has a priority above the currently
					executing task so a yield is required. */
					if( pxHigherPriorityTaskWoken != NULL )
 800534e:	683b      	ldr	r3, [r7, #0]
 8005350:	2b00      	cmp	r3, #0
 8005352:	d002      	beq.n	800535a <vTaskNotifyGiveFromISR+0xc2>
					{
						*pxHigherPriorityTaskWoken = pdTRUE;
 8005354:	683b      	ldr	r3, [r7, #0]
 8005356:	2201      	movs	r2, #1
 8005358:	601a      	str	r2, [r3, #0]
					}

					/* Mark that a yield is pending in case the user is not
					using the "xHigherPriorityTaskWoken" parameter in an ISR
					safe FreeRTOS function. */
					xYieldPending = pdTRUE;
 800535a:	4b0a      	ldr	r3, [pc, #40]	; (8005384 <vTaskNotifyGiveFromISR+0xec>)
 800535c:	2201      	movs	r2, #1
 800535e:	601a      	str	r2, [r3, #0]
				{
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );
 8005360:	693b      	ldr	r3, [r7, #16]
 8005362:	0018      	movs	r0, r3
 8005364:	f7fc fa2a 	bl	80017bc <vClearInterruptMaskFromISR>
	}
 8005368:	46c0      	nop			; (mov r8, r8)
 800536a:	46bd      	mov	sp, r7
 800536c:	b006      	add	sp, #24
 800536e:	bd80      	pop	{r7, pc}
 8005370:	20000d98 	.word	0x20000d98
 8005374:	20000d78 	.word	0x20000d78
 8005378:	20000c9c 	.word	0x20000c9c
 800537c:	20000d30 	.word	0x20000d30
 8005380:	20000c98 	.word	0x20000c98
 8005384:	20000d84 	.word	0x20000d84

08005388 <xTaskNotifyStateClear>:
/*-----------------------------------------------------------*/

#if( configUSE_TASK_NOTIFICATIONS == 1 )

	BaseType_t xTaskNotifyStateClear( TaskHandle_t xTask )
	{
 8005388:	b580      	push	{r7, lr}
 800538a:	b084      	sub	sp, #16
 800538c:	af00      	add	r7, sp, #0
 800538e:	6078      	str	r0, [r7, #4]
	TCB_t *pxTCB;
	BaseType_t xReturn;

		/* If null is passed in here then it is the calling task that is having
		its notification state cleared. */
		pxTCB = prvGetTCBFromHandle( xTask );
 8005390:	687b      	ldr	r3, [r7, #4]
 8005392:	2b00      	cmp	r3, #0
 8005394:	d102      	bne.n	800539c <xTaskNotifyStateClear+0x14>
 8005396:	4b0e      	ldr	r3, [pc, #56]	; (80053d0 <xTaskNotifyStateClear+0x48>)
 8005398:	681b      	ldr	r3, [r3, #0]
 800539a:	e000      	b.n	800539e <xTaskNotifyStateClear+0x16>
 800539c:	687b      	ldr	r3, [r7, #4]
 800539e:	60bb      	str	r3, [r7, #8]

		taskENTER_CRITICAL();
 80053a0:	f7fc f9dc 	bl	800175c <vPortEnterCritical>
		{
			if( pxTCB->ucNotifyState == taskNOTIFICATION_RECEIVED )
 80053a4:	68bb      	ldr	r3, [r7, #8]
 80053a6:	2250      	movs	r2, #80	; 0x50
 80053a8:	5c9b      	ldrb	r3, [r3, r2]
 80053aa:	b2db      	uxtb	r3, r3
 80053ac:	2b02      	cmp	r3, #2
 80053ae:	d106      	bne.n	80053be <xTaskNotifyStateClear+0x36>
			{
				pxTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 80053b0:	68bb      	ldr	r3, [r7, #8]
 80053b2:	2250      	movs	r2, #80	; 0x50
 80053b4:	2100      	movs	r1, #0
 80053b6:	5499      	strb	r1, [r3, r2]
				xReturn = pdPASS;
 80053b8:	2301      	movs	r3, #1
 80053ba:	60fb      	str	r3, [r7, #12]
 80053bc:	e001      	b.n	80053c2 <xTaskNotifyStateClear+0x3a>
			}
			else
			{
				xReturn = pdFAIL;
 80053be:	2300      	movs	r3, #0
 80053c0:	60fb      	str	r3, [r7, #12]
			}
		}
		taskEXIT_CRITICAL();
 80053c2:	f7fc f9dd 	bl	8001780 <vPortExitCritical>

		return xReturn;
 80053c6:	68fb      	ldr	r3, [r7, #12]
	}
 80053c8:	0018      	movs	r0, r3
 80053ca:	46bd      	mov	sp, r7
 80053cc:	b004      	add	sp, #16
 80053ce:	bd80      	pop	{r7, pc}
 80053d0:	20000c98 	.word	0x20000c98

080053d4 <ulTaskNotifyValueClear>:
/*-----------------------------------------------------------*/

#if( configUSE_TASK_NOTIFICATIONS == 1 )

	uint32_t ulTaskNotifyValueClear( TaskHandle_t xTask, uint32_t ulBitsToClear )
	{
 80053d4:	b580      	push	{r7, lr}
 80053d6:	b084      	sub	sp, #16
 80053d8:	af00      	add	r7, sp, #0
 80053da:	6078      	str	r0, [r7, #4]
 80053dc:	6039      	str	r1, [r7, #0]
	TCB_t *pxTCB;
	uint32_t ulReturn;

		/* If null is passed in here then it is the calling task that is having
		its notification state cleared. */
		pxTCB = prvGetTCBFromHandle( xTask );
 80053de:	687b      	ldr	r3, [r7, #4]
 80053e0:	2b00      	cmp	r3, #0
 80053e2:	d102      	bne.n	80053ea <ulTaskNotifyValueClear+0x16>
 80053e4:	4b0c      	ldr	r3, [pc, #48]	; (8005418 <ulTaskNotifyValueClear+0x44>)
 80053e6:	681b      	ldr	r3, [r3, #0]
 80053e8:	e000      	b.n	80053ec <ulTaskNotifyValueClear+0x18>
 80053ea:	687b      	ldr	r3, [r7, #4]
 80053ec:	60fb      	str	r3, [r7, #12]

		taskENTER_CRITICAL();
 80053ee:	f7fc f9b5 	bl	800175c <vPortEnterCritical>
		{
			/* Return the notification as it was before the bits were cleared,
			then clear the bit mask. */
			ulReturn = pxCurrentTCB->ulNotifiedValue;
 80053f2:	4b09      	ldr	r3, [pc, #36]	; (8005418 <ulTaskNotifyValueClear+0x44>)
 80053f4:	681b      	ldr	r3, [r3, #0]
 80053f6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80053f8:	60bb      	str	r3, [r7, #8]
			pxTCB->ulNotifiedValue &= ~ulBitsToClear;
 80053fa:	68fb      	ldr	r3, [r7, #12]
 80053fc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80053fe:	683a      	ldr	r2, [r7, #0]
 8005400:	43d2      	mvns	r2, r2
 8005402:	401a      	ands	r2, r3
 8005404:	68fb      	ldr	r3, [r7, #12]
 8005406:	64da      	str	r2, [r3, #76]	; 0x4c
		}
		taskEXIT_CRITICAL();
 8005408:	f7fc f9ba 	bl	8001780 <vPortExitCritical>

		return ulReturn;
 800540c:	68bb      	ldr	r3, [r7, #8]
	}
 800540e:	0018      	movs	r0, r3
 8005410:	46bd      	mov	sp, r7
 8005412:	b004      	add	sp, #16
 8005414:	bd80      	pop	{r7, pc}
 8005416:	46c0      	nop			; (mov r8, r8)
 8005418:	20000c98 	.word	0x20000c98

0800541c <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 800541c:	b580      	push	{r7, lr}
 800541e:	b084      	sub	sp, #16
 8005420:	af00      	add	r7, sp, #0
 8005422:	6078      	str	r0, [r7, #4]
 8005424:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 8005426:	4b21      	ldr	r3, [pc, #132]	; (80054ac <prvAddCurrentTaskToDelayedList+0x90>)
 8005428:	681b      	ldr	r3, [r3, #0]
 800542a:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800542c:	4b20      	ldr	r3, [pc, #128]	; (80054b0 <prvAddCurrentTaskToDelayedList+0x94>)
 800542e:	681b      	ldr	r3, [r3, #0]
 8005430:	3304      	adds	r3, #4
 8005432:	0018      	movs	r0, r3
 8005434:	f7fc f8c9 	bl	80015ca <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8005438:	687b      	ldr	r3, [r7, #4]
 800543a:	3301      	adds	r3, #1
 800543c:	d10b      	bne.n	8005456 <prvAddCurrentTaskToDelayedList+0x3a>
 800543e:	683b      	ldr	r3, [r7, #0]
 8005440:	2b00      	cmp	r3, #0
 8005442:	d008      	beq.n	8005456 <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8005444:	4b1a      	ldr	r3, [pc, #104]	; (80054b0 <prvAddCurrentTaskToDelayedList+0x94>)
 8005446:	681b      	ldr	r3, [r3, #0]
 8005448:	1d1a      	adds	r2, r3, #4
 800544a:	4b1a      	ldr	r3, [pc, #104]	; (80054b4 <prvAddCurrentTaskToDelayedList+0x98>)
 800544c:	0011      	movs	r1, r2
 800544e:	0018      	movs	r0, r3
 8005450:	f7fc f863 	bl	800151a <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 8005454:	e026      	b.n	80054a4 <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 8005456:	68fa      	ldr	r2, [r7, #12]
 8005458:	687b      	ldr	r3, [r7, #4]
 800545a:	18d3      	adds	r3, r2, r3
 800545c:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 800545e:	4b14      	ldr	r3, [pc, #80]	; (80054b0 <prvAddCurrentTaskToDelayedList+0x94>)
 8005460:	681b      	ldr	r3, [r3, #0]
 8005462:	68ba      	ldr	r2, [r7, #8]
 8005464:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 8005466:	68ba      	ldr	r2, [r7, #8]
 8005468:	68fb      	ldr	r3, [r7, #12]
 800546a:	429a      	cmp	r2, r3
 800546c:	d209      	bcs.n	8005482 <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800546e:	4b12      	ldr	r3, [pc, #72]	; (80054b8 <prvAddCurrentTaskToDelayedList+0x9c>)
 8005470:	681a      	ldr	r2, [r3, #0]
 8005472:	4b0f      	ldr	r3, [pc, #60]	; (80054b0 <prvAddCurrentTaskToDelayedList+0x94>)
 8005474:	681b      	ldr	r3, [r3, #0]
 8005476:	3304      	adds	r3, #4
 8005478:	0019      	movs	r1, r3
 800547a:	0010      	movs	r0, r2
 800547c:	f7fc f86f 	bl	800155e <vListInsert>
}
 8005480:	e010      	b.n	80054a4 <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8005482:	4b0e      	ldr	r3, [pc, #56]	; (80054bc <prvAddCurrentTaskToDelayedList+0xa0>)
 8005484:	681a      	ldr	r2, [r3, #0]
 8005486:	4b0a      	ldr	r3, [pc, #40]	; (80054b0 <prvAddCurrentTaskToDelayedList+0x94>)
 8005488:	681b      	ldr	r3, [r3, #0]
 800548a:	3304      	adds	r3, #4
 800548c:	0019      	movs	r1, r3
 800548e:	0010      	movs	r0, r2
 8005490:	f7fc f865 	bl	800155e <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 8005494:	4b0a      	ldr	r3, [pc, #40]	; (80054c0 <prvAddCurrentTaskToDelayedList+0xa4>)
 8005496:	681b      	ldr	r3, [r3, #0]
 8005498:	68ba      	ldr	r2, [r7, #8]
 800549a:	429a      	cmp	r2, r3
 800549c:	d202      	bcs.n	80054a4 <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 800549e:	4b08      	ldr	r3, [pc, #32]	; (80054c0 <prvAddCurrentTaskToDelayedList+0xa4>)
 80054a0:	68ba      	ldr	r2, [r7, #8]
 80054a2:	601a      	str	r2, [r3, #0]
}
 80054a4:	46c0      	nop			; (mov r8, r8)
 80054a6:	46bd      	mov	sp, r7
 80054a8:	b004      	add	sp, #16
 80054aa:	bd80      	pop	{r7, pc}
 80054ac:	20000d74 	.word	0x20000d74
 80054b0:	20000c98 	.word	0x20000c98
 80054b4:	20000d5c 	.word	0x20000d5c
 80054b8:	20000d2c 	.word	0x20000d2c
 80054bc:	20000d28 	.word	0x20000d28
 80054c0:	20000d90 	.word	0x20000d90

080054c4 <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 80054c4:	b580      	push	{r7, lr}
 80054c6:	b084      	sub	sp, #16
 80054c8:	af02      	add	r7, sp, #8
BaseType_t xReturn = pdFAIL;
 80054ca:	2300      	movs	r3, #0
 80054cc:	607b      	str	r3, [r7, #4]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 80054ce:	f000 fb89 	bl	8005be4 <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 80054d2:	4b0d      	ldr	r3, [pc, #52]	; (8005508 <xTimerCreateTimerTask+0x44>)
 80054d4:	681b      	ldr	r3, [r3, #0]
 80054d6:	2b00      	cmp	r3, #0
 80054d8:	d00b      	beq.n	80054f2 <xTimerCreateTimerTask+0x2e>
				xReturn = pdPASS;
			}
		}
		#else
		{
			xReturn = xTaskCreate(	prvTimerTask,
 80054da:	490c      	ldr	r1, [pc, #48]	; (800550c <xTimerCreateTimerTask+0x48>)
 80054dc:	480c      	ldr	r0, [pc, #48]	; (8005510 <xTimerCreateTimerTask+0x4c>)
 80054de:	4b0d      	ldr	r3, [pc, #52]	; (8005514 <xTimerCreateTimerTask+0x50>)
 80054e0:	9301      	str	r3, [sp, #4]
 80054e2:	2302      	movs	r3, #2
 80054e4:	9300      	str	r3, [sp, #0]
 80054e6:	2300      	movs	r3, #0
 80054e8:	2250      	movs	r2, #80	; 0x50
 80054ea:	f7fe f889 	bl	8003600 <xTaskCreate>
 80054ee:	0003      	movs	r3, r0
 80054f0:	607b      	str	r3, [r7, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 80054f2:	687b      	ldr	r3, [r7, #4]
 80054f4:	2b00      	cmp	r3, #0
 80054f6:	d101      	bne.n	80054fc <xTimerCreateTimerTask+0x38>
 80054f8:	b672      	cpsid	i
 80054fa:	e7fe      	b.n	80054fa <xTimerCreateTimerTask+0x36>
	return xReturn;
 80054fc:	687b      	ldr	r3, [r7, #4]
}
 80054fe:	0018      	movs	r0, r3
 8005500:	46bd      	mov	sp, r7
 8005502:	b002      	add	sp, #8
 8005504:	bd80      	pop	{r7, pc}
 8005506:	46c0      	nop			; (mov r8, r8)
 8005508:	20000dcc 	.word	0x20000dcc
 800550c:	080074f8 	.word	0x080074f8
 8005510:	08005805 	.word	0x08005805
 8005514:	20000dd0 	.word	0x20000dd0

08005518 <xTimerCreate>:
	TimerHandle_t xTimerCreate(	const char * const pcTimerName,			/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
								const TickType_t xTimerPeriodInTicks,
								const UBaseType_t uxAutoReload,
								void * const pvTimerID,
								TimerCallbackFunction_t pxCallbackFunction )
	{
 8005518:	b590      	push	{r4, r7, lr}
 800551a:	b089      	sub	sp, #36	; 0x24
 800551c:	af02      	add	r7, sp, #8
 800551e:	60f8      	str	r0, [r7, #12]
 8005520:	60b9      	str	r1, [r7, #8]
 8005522:	607a      	str	r2, [r7, #4]
 8005524:	603b      	str	r3, [r7, #0]
	Timer_t *pxNewTimer;

		pxNewTimer = ( Timer_t * ) pvPortMalloc( sizeof( Timer_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of Timer_t is always a pointer to the timer's mame. */
 8005526:	202c      	movs	r0, #44	; 0x2c
 8005528:	f7fb ff5e 	bl	80013e8 <pvPortMalloc>
 800552c:	0003      	movs	r3, r0
 800552e:	617b      	str	r3, [r7, #20]

		if( pxNewTimer != NULL )
 8005530:	697b      	ldr	r3, [r7, #20]
 8005532:	2b00      	cmp	r3, #0
 8005534:	d00e      	beq.n	8005554 <xTimerCreate+0x3c>
		{
			/* Status is thus far zero as the timer is not created statically
			and has not been started.  The auto-reload bit may get set in
			prvInitialiseNewTimer. */
			pxNewTimer->ucStatus = 0x00;
 8005536:	697b      	ldr	r3, [r7, #20]
 8005538:	2228      	movs	r2, #40	; 0x28
 800553a:	2100      	movs	r1, #0
 800553c:	5499      	strb	r1, [r3, r2]
			prvInitialiseNewTimer( pcTimerName, xTimerPeriodInTicks, uxAutoReload, pvTimerID, pxCallbackFunction, pxNewTimer );
 800553e:	683c      	ldr	r4, [r7, #0]
 8005540:	687a      	ldr	r2, [r7, #4]
 8005542:	68b9      	ldr	r1, [r7, #8]
 8005544:	68f8      	ldr	r0, [r7, #12]
 8005546:	697b      	ldr	r3, [r7, #20]
 8005548:	9301      	str	r3, [sp, #4]
 800554a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800554c:	9300      	str	r3, [sp, #0]
 800554e:	0023      	movs	r3, r4
 8005550:	f000 f805 	bl	800555e <prvInitialiseNewTimer>
		}

		return pxNewTimer;
 8005554:	697b      	ldr	r3, [r7, #20]
	}
 8005556:	0018      	movs	r0, r3
 8005558:	46bd      	mov	sp, r7
 800555a:	b007      	add	sp, #28
 800555c:	bd90      	pop	{r4, r7, pc}

0800555e <prvInitialiseNewTimer>:
									const TickType_t xTimerPeriodInTicks,
									const UBaseType_t uxAutoReload,
									void * const pvTimerID,
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer )
{
 800555e:	b580      	push	{r7, lr}
 8005560:	b084      	sub	sp, #16
 8005562:	af00      	add	r7, sp, #0
 8005564:	60f8      	str	r0, [r7, #12]
 8005566:	60b9      	str	r1, [r7, #8]
 8005568:	607a      	str	r2, [r7, #4]
 800556a:	603b      	str	r3, [r7, #0]
	/* 0 is not a valid value for xTimerPeriodInTicks. */
	configASSERT( ( xTimerPeriodInTicks > 0 ) );
 800556c:	68bb      	ldr	r3, [r7, #8]
 800556e:	2b00      	cmp	r3, #0
 8005570:	d101      	bne.n	8005576 <prvInitialiseNewTimer+0x18>
 8005572:	b672      	cpsid	i
 8005574:	e7fe      	b.n	8005574 <prvInitialiseNewTimer+0x16>

	if( pxNewTimer != NULL )
 8005576:	69fb      	ldr	r3, [r7, #28]
 8005578:	2b00      	cmp	r3, #0
 800557a:	d01e      	beq.n	80055ba <prvInitialiseNewTimer+0x5c>
	{
		/* Ensure the infrastructure used by the timer service task has been
		created/initialised. */
		prvCheckForValidListAndQueue();
 800557c:	f000 fb32 	bl	8005be4 <prvCheckForValidListAndQueue>

		/* Initialise the timer structure members using the function
		parameters. */
		pxNewTimer->pcTimerName = pcTimerName;
 8005580:	69fb      	ldr	r3, [r7, #28]
 8005582:	68fa      	ldr	r2, [r7, #12]
 8005584:	601a      	str	r2, [r3, #0]
		pxNewTimer->xTimerPeriodInTicks = xTimerPeriodInTicks;
 8005586:	69fb      	ldr	r3, [r7, #28]
 8005588:	68ba      	ldr	r2, [r7, #8]
 800558a:	619a      	str	r2, [r3, #24]
		pxNewTimer->pvTimerID = pvTimerID;
 800558c:	69fb      	ldr	r3, [r7, #28]
 800558e:	683a      	ldr	r2, [r7, #0]
 8005590:	61da      	str	r2, [r3, #28]
		pxNewTimer->pxCallbackFunction = pxCallbackFunction;
 8005592:	69fb      	ldr	r3, [r7, #28]
 8005594:	69ba      	ldr	r2, [r7, #24]
 8005596:	621a      	str	r2, [r3, #32]
		vListInitialiseItem( &( pxNewTimer->xTimerListItem ) );
 8005598:	69fb      	ldr	r3, [r7, #28]
 800559a:	3304      	adds	r3, #4
 800559c:	0018      	movs	r0, r3
 800559e:	f7fb ffb1 	bl	8001504 <vListInitialiseItem>
		if( uxAutoReload != pdFALSE )
 80055a2:	687b      	ldr	r3, [r7, #4]
 80055a4:	2b00      	cmp	r3, #0
 80055a6:	d008      	beq.n	80055ba <prvInitialiseNewTimer+0x5c>
		{
			pxNewTimer->ucStatus |= tmrSTATUS_IS_AUTORELOAD;
 80055a8:	69fb      	ldr	r3, [r7, #28]
 80055aa:	2228      	movs	r2, #40	; 0x28
 80055ac:	5c9b      	ldrb	r3, [r3, r2]
 80055ae:	2204      	movs	r2, #4
 80055b0:	4313      	orrs	r3, r2
 80055b2:	b2d9      	uxtb	r1, r3
 80055b4:	69fb      	ldr	r3, [r7, #28]
 80055b6:	2228      	movs	r2, #40	; 0x28
 80055b8:	5499      	strb	r1, [r3, r2]
		}
		traceTIMER_CREATE( pxNewTimer );
	}
}
 80055ba:	46c0      	nop			; (mov r8, r8)
 80055bc:	46bd      	mov	sp, r7
 80055be:	b004      	add	sp, #16
 80055c0:	bd80      	pop	{r7, pc}

080055c2 <xTimerGenericCommand>:
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 80055c2:	b580      	push	{r7, lr}
 80055c4:	b088      	sub	sp, #32
 80055c6:	af00      	add	r7, sp, #0
 80055c8:	60f8      	str	r0, [r7, #12]
 80055ca:	60b9      	str	r1, [r7, #8]
 80055cc:	607a      	str	r2, [r7, #4]
 80055ce:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 80055d0:	2300      	movs	r3, #0
 80055d2:	61fb      	str	r3, [r7, #28]
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 80055d4:	68fb      	ldr	r3, [r7, #12]
 80055d6:	2b00      	cmp	r3, #0
 80055d8:	d101      	bne.n	80055de <xTimerGenericCommand+0x1c>
 80055da:	b672      	cpsid	i
 80055dc:	e7fe      	b.n	80055dc <xTimerGenericCommand+0x1a>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 80055de:	4b1e      	ldr	r3, [pc, #120]	; (8005658 <xTimerGenericCommand+0x96>)
 80055e0:	681b      	ldr	r3, [r3, #0]
 80055e2:	2b00      	cmp	r3, #0
 80055e4:	d033      	beq.n	800564e <xTimerGenericCommand+0x8c>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 80055e6:	2310      	movs	r3, #16
 80055e8:	18fb      	adds	r3, r7, r3
 80055ea:	68ba      	ldr	r2, [r7, #8]
 80055ec:	601a      	str	r2, [r3, #0]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 80055ee:	2310      	movs	r3, #16
 80055f0:	18fb      	adds	r3, r7, r3
 80055f2:	687a      	ldr	r2, [r7, #4]
 80055f4:	605a      	str	r2, [r3, #4]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 80055f6:	2310      	movs	r3, #16
 80055f8:	18fb      	adds	r3, r7, r3
 80055fa:	68fa      	ldr	r2, [r7, #12]
 80055fc:	609a      	str	r2, [r3, #8]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 80055fe:	68bb      	ldr	r3, [r7, #8]
 8005600:	2b05      	cmp	r3, #5
 8005602:	dc1a      	bgt.n	800563a <xTimerGenericCommand+0x78>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 8005604:	f7ff faf4 	bl	8004bf0 <xTaskGetSchedulerState>
 8005608:	0003      	movs	r3, r0
 800560a:	2b02      	cmp	r3, #2
 800560c:	d10a      	bne.n	8005624 <xTimerGenericCommand+0x62>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 800560e:	4b12      	ldr	r3, [pc, #72]	; (8005658 <xTimerGenericCommand+0x96>)
 8005610:	6818      	ldr	r0, [r3, #0]
 8005612:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8005614:	2310      	movs	r3, #16
 8005616:	18f9      	adds	r1, r7, r3
 8005618:	2300      	movs	r3, #0
 800561a:	f7fc fa97 	bl	8001b4c <xQueueGenericSend>
 800561e:	0003      	movs	r3, r0
 8005620:	61fb      	str	r3, [r7, #28]
 8005622:	e014      	b.n	800564e <xTimerGenericCommand+0x8c>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 8005624:	4b0c      	ldr	r3, [pc, #48]	; (8005658 <xTimerGenericCommand+0x96>)
 8005626:	6818      	ldr	r0, [r3, #0]
 8005628:	2310      	movs	r3, #16
 800562a:	18f9      	adds	r1, r7, r3
 800562c:	2300      	movs	r3, #0
 800562e:	2200      	movs	r2, #0
 8005630:	f7fc fa8c 	bl	8001b4c <xQueueGenericSend>
 8005634:	0003      	movs	r3, r0
 8005636:	61fb      	str	r3, [r7, #28]
 8005638:	e009      	b.n	800564e <xTimerGenericCommand+0x8c>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 800563a:	4b07      	ldr	r3, [pc, #28]	; (8005658 <xTimerGenericCommand+0x96>)
 800563c:	6818      	ldr	r0, [r3, #0]
 800563e:	683a      	ldr	r2, [r7, #0]
 8005640:	2310      	movs	r3, #16
 8005642:	18f9      	adds	r1, r7, r3
 8005644:	2300      	movs	r3, #0
 8005646:	f7fc fb5c 	bl	8001d02 <xQueueGenericSendFromISR>
 800564a:	0003      	movs	r3, r0
 800564c:	61fb      	str	r3, [r7, #28]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 800564e:	69fb      	ldr	r3, [r7, #28]
}
 8005650:	0018      	movs	r0, r3
 8005652:	46bd      	mov	sp, r7
 8005654:	b008      	add	sp, #32
 8005656:	bd80      	pop	{r7, pc}
 8005658:	20000dcc 	.word	0x20000dcc

0800565c <xTimerGetTimerDaemonTaskHandle>:
/*-----------------------------------------------------------*/

TaskHandle_t xTimerGetTimerDaemonTaskHandle( void )
{
 800565c:	b580      	push	{r7, lr}
 800565e:	af00      	add	r7, sp, #0
	/* If xTimerGetTimerDaemonTaskHandle() is called before the scheduler has been
	started, then xTimerTaskHandle will be NULL. */
	configASSERT( ( xTimerTaskHandle != NULL ) );
 8005660:	4b05      	ldr	r3, [pc, #20]	; (8005678 <xTimerGetTimerDaemonTaskHandle+0x1c>)
 8005662:	681b      	ldr	r3, [r3, #0]
 8005664:	2b00      	cmp	r3, #0
 8005666:	d101      	bne.n	800566c <xTimerGetTimerDaemonTaskHandle+0x10>
 8005668:	b672      	cpsid	i
 800566a:	e7fe      	b.n	800566a <xTimerGetTimerDaemonTaskHandle+0xe>
	return xTimerTaskHandle;
 800566c:	4b02      	ldr	r3, [pc, #8]	; (8005678 <xTimerGetTimerDaemonTaskHandle+0x1c>)
 800566e:	681b      	ldr	r3, [r3, #0]
}
 8005670:	0018      	movs	r0, r3
 8005672:	46bd      	mov	sp, r7
 8005674:	bd80      	pop	{r7, pc}
 8005676:	46c0      	nop			; (mov r8, r8)
 8005678:	20000dd0 	.word	0x20000dd0

0800567c <xTimerGetPeriod>:
/*-----------------------------------------------------------*/

TickType_t xTimerGetPeriod( TimerHandle_t xTimer )
{
 800567c:	b580      	push	{r7, lr}
 800567e:	b084      	sub	sp, #16
 8005680:	af00      	add	r7, sp, #0
 8005682:	6078      	str	r0, [r7, #4]
Timer_t *pxTimer = xTimer;
 8005684:	687b      	ldr	r3, [r7, #4]
 8005686:	60fb      	str	r3, [r7, #12]

	configASSERT( xTimer );
 8005688:	687b      	ldr	r3, [r7, #4]
 800568a:	2b00      	cmp	r3, #0
 800568c:	d101      	bne.n	8005692 <xTimerGetPeriod+0x16>
 800568e:	b672      	cpsid	i
 8005690:	e7fe      	b.n	8005690 <xTimerGetPeriod+0x14>
	return pxTimer->xTimerPeriodInTicks;
 8005692:	68fb      	ldr	r3, [r7, #12]
 8005694:	699b      	ldr	r3, [r3, #24]
}
 8005696:	0018      	movs	r0, r3
 8005698:	46bd      	mov	sp, r7
 800569a:	b004      	add	sp, #16
 800569c:	bd80      	pop	{r7, pc}

0800569e <vTimerSetReloadMode>:
/*-----------------------------------------------------------*/

void vTimerSetReloadMode( TimerHandle_t xTimer, const UBaseType_t uxAutoReload )
{
 800569e:	b580      	push	{r7, lr}
 80056a0:	b084      	sub	sp, #16
 80056a2:	af00      	add	r7, sp, #0
 80056a4:	6078      	str	r0, [r7, #4]
 80056a6:	6039      	str	r1, [r7, #0]
Timer_t * pxTimer =  xTimer;
 80056a8:	687b      	ldr	r3, [r7, #4]
 80056aa:	60fb      	str	r3, [r7, #12]

	configASSERT( xTimer );
 80056ac:	687b      	ldr	r3, [r7, #4]
 80056ae:	2b00      	cmp	r3, #0
 80056b0:	d101      	bne.n	80056b6 <vTimerSetReloadMode+0x18>
 80056b2:	b672      	cpsid	i
 80056b4:	e7fe      	b.n	80056b4 <vTimerSetReloadMode+0x16>
	taskENTER_CRITICAL();
 80056b6:	f7fc f851 	bl	800175c <vPortEnterCritical>
	{
		if( uxAutoReload != pdFALSE )
 80056ba:	683b      	ldr	r3, [r7, #0]
 80056bc:	2b00      	cmp	r3, #0
 80056be:	d009      	beq.n	80056d4 <vTimerSetReloadMode+0x36>
		{
			pxTimer->ucStatus |= tmrSTATUS_IS_AUTORELOAD;
 80056c0:	68fb      	ldr	r3, [r7, #12]
 80056c2:	2228      	movs	r2, #40	; 0x28
 80056c4:	5c9b      	ldrb	r3, [r3, r2]
 80056c6:	2204      	movs	r2, #4
 80056c8:	4313      	orrs	r3, r2
 80056ca:	b2d9      	uxtb	r1, r3
 80056cc:	68fb      	ldr	r3, [r7, #12]
 80056ce:	2228      	movs	r2, #40	; 0x28
 80056d0:	5499      	strb	r1, [r3, r2]
 80056d2:	e008      	b.n	80056e6 <vTimerSetReloadMode+0x48>
		}
		else
		{
			pxTimer->ucStatus &= ~tmrSTATUS_IS_AUTORELOAD;
 80056d4:	68fb      	ldr	r3, [r7, #12]
 80056d6:	2228      	movs	r2, #40	; 0x28
 80056d8:	5c9b      	ldrb	r3, [r3, r2]
 80056da:	2204      	movs	r2, #4
 80056dc:	4393      	bics	r3, r2
 80056de:	b2d9      	uxtb	r1, r3
 80056e0:	68fb      	ldr	r3, [r7, #12]
 80056e2:	2228      	movs	r2, #40	; 0x28
 80056e4:	5499      	strb	r1, [r3, r2]
		}
	}
	taskEXIT_CRITICAL();
 80056e6:	f7fc f84b 	bl	8001780 <vPortExitCritical>
}
 80056ea:	46c0      	nop			; (mov r8, r8)
 80056ec:	46bd      	mov	sp, r7
 80056ee:	b004      	add	sp, #16
 80056f0:	bd80      	pop	{r7, pc}

080056f2 <uxTimerGetReloadMode>:
/*-----------------------------------------------------------*/

UBaseType_t uxTimerGetReloadMode( TimerHandle_t xTimer )
{
 80056f2:	b580      	push	{r7, lr}
 80056f4:	b084      	sub	sp, #16
 80056f6:	af00      	add	r7, sp, #0
 80056f8:	6078      	str	r0, [r7, #4]
Timer_t * pxTimer =  xTimer;
 80056fa:	687b      	ldr	r3, [r7, #4]
 80056fc:	60bb      	str	r3, [r7, #8]
UBaseType_t uxReturn;

	configASSERT( xTimer );
 80056fe:	687b      	ldr	r3, [r7, #4]
 8005700:	2b00      	cmp	r3, #0
 8005702:	d101      	bne.n	8005708 <uxTimerGetReloadMode+0x16>
 8005704:	b672      	cpsid	i
 8005706:	e7fe      	b.n	8005706 <uxTimerGetReloadMode+0x14>
	taskENTER_CRITICAL();
 8005708:	f7fc f828 	bl	800175c <vPortEnterCritical>
	{
		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) == 0 )
 800570c:	68bb      	ldr	r3, [r7, #8]
 800570e:	2228      	movs	r2, #40	; 0x28
 8005710:	5c9b      	ldrb	r3, [r3, r2]
 8005712:	001a      	movs	r2, r3
 8005714:	2304      	movs	r3, #4
 8005716:	4013      	ands	r3, r2
 8005718:	d102      	bne.n	8005720 <uxTimerGetReloadMode+0x2e>
		{
			/* Not an auto-reload timer. */
			uxReturn = ( UBaseType_t ) pdFALSE;
 800571a:	2300      	movs	r3, #0
 800571c:	60fb      	str	r3, [r7, #12]
 800571e:	e001      	b.n	8005724 <uxTimerGetReloadMode+0x32>
		}
		else
		{
			/* Is an auto-reload timer. */
			uxReturn = ( UBaseType_t ) pdTRUE;
 8005720:	2301      	movs	r3, #1
 8005722:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8005724:	f7fc f82c 	bl	8001780 <vPortExitCritical>

	return uxReturn;
 8005728:	68fb      	ldr	r3, [r7, #12]
}
 800572a:	0018      	movs	r0, r3
 800572c:	46bd      	mov	sp, r7
 800572e:	b004      	add	sp, #16
 8005730:	bd80      	pop	{r7, pc}

08005732 <xTimerGetExpiryTime>:
/*-----------------------------------------------------------*/

TickType_t xTimerGetExpiryTime( TimerHandle_t xTimer )
{
 8005732:	b580      	push	{r7, lr}
 8005734:	b084      	sub	sp, #16
 8005736:	af00      	add	r7, sp, #0
 8005738:	6078      	str	r0, [r7, #4]
Timer_t * pxTimer =  xTimer;
 800573a:	687b      	ldr	r3, [r7, #4]
 800573c:	60fb      	str	r3, [r7, #12]
TickType_t xReturn;

	configASSERT( xTimer );
 800573e:	687b      	ldr	r3, [r7, #4]
 8005740:	2b00      	cmp	r3, #0
 8005742:	d101      	bne.n	8005748 <xTimerGetExpiryTime+0x16>
 8005744:	b672      	cpsid	i
 8005746:	e7fe      	b.n	8005746 <xTimerGetExpiryTime+0x14>
	xReturn = listGET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ) );
 8005748:	68fb      	ldr	r3, [r7, #12]
 800574a:	685b      	ldr	r3, [r3, #4]
 800574c:	60bb      	str	r3, [r7, #8]
	return xReturn;
 800574e:	68bb      	ldr	r3, [r7, #8]
}
 8005750:	0018      	movs	r0, r3
 8005752:	46bd      	mov	sp, r7
 8005754:	b004      	add	sp, #16
 8005756:	bd80      	pop	{r7, pc}

08005758 <pcTimerGetName>:
/*-----------------------------------------------------------*/

const char * pcTimerGetName( TimerHandle_t xTimer ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
{
 8005758:	b580      	push	{r7, lr}
 800575a:	b084      	sub	sp, #16
 800575c:	af00      	add	r7, sp, #0
 800575e:	6078      	str	r0, [r7, #4]
Timer_t *pxTimer = xTimer;
 8005760:	687b      	ldr	r3, [r7, #4]
 8005762:	60fb      	str	r3, [r7, #12]

	configASSERT( xTimer );
 8005764:	687b      	ldr	r3, [r7, #4]
 8005766:	2b00      	cmp	r3, #0
 8005768:	d101      	bne.n	800576e <pcTimerGetName+0x16>
 800576a:	b672      	cpsid	i
 800576c:	e7fe      	b.n	800576c <pcTimerGetName+0x14>
	return pxTimer->pcTimerName;
 800576e:	68fb      	ldr	r3, [r7, #12]
 8005770:	681b      	ldr	r3, [r3, #0]
}
 8005772:	0018      	movs	r0, r3
 8005774:	46bd      	mov	sp, r7
 8005776:	b004      	add	sp, #16
 8005778:	bd80      	pop	{r7, pc}

0800577a <prvProcessExpiredTimer>:
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 800577a:	b580      	push	{r7, lr}
 800577c:	b086      	sub	sp, #24
 800577e:	af02      	add	r7, sp, #8
 8005780:	6078      	str	r0, [r7, #4]
 8005782:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8005784:	4b1e      	ldr	r3, [pc, #120]	; (8005800 <prvProcessExpiredTimer+0x86>)
 8005786:	681b      	ldr	r3, [r3, #0]
 8005788:	68db      	ldr	r3, [r3, #12]
 800578a:	68db      	ldr	r3, [r3, #12]
 800578c:	60fb      	str	r3, [r7, #12]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800578e:	68fb      	ldr	r3, [r7, #12]
 8005790:	3304      	adds	r3, #4
 8005792:	0018      	movs	r0, r3
 8005794:	f7fb ff19 	bl	80015ca <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto-reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8005798:	68fb      	ldr	r3, [r7, #12]
 800579a:	2228      	movs	r2, #40	; 0x28
 800579c:	5c9b      	ldrb	r3, [r3, r2]
 800579e:	001a      	movs	r2, r3
 80057a0:	2304      	movs	r3, #4
 80057a2:	4013      	ands	r3, r2
 80057a4:	d019      	beq.n	80057da <prvProcessExpiredTimer+0x60>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 80057a6:	68fb      	ldr	r3, [r7, #12]
 80057a8:	699a      	ldr	r2, [r3, #24]
 80057aa:	687b      	ldr	r3, [r7, #4]
 80057ac:	18d1      	adds	r1, r2, r3
 80057ae:	687b      	ldr	r3, [r7, #4]
 80057b0:	683a      	ldr	r2, [r7, #0]
 80057b2:	68f8      	ldr	r0, [r7, #12]
 80057b4:	f000 f8c4 	bl	8005940 <prvInsertTimerInActiveList>
 80057b8:	1e03      	subs	r3, r0, #0
 80057ba:	d017      	beq.n	80057ec <prvProcessExpiredTimer+0x72>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 80057bc:	687a      	ldr	r2, [r7, #4]
 80057be:	68f8      	ldr	r0, [r7, #12]
 80057c0:	2300      	movs	r3, #0
 80057c2:	9300      	str	r3, [sp, #0]
 80057c4:	2300      	movs	r3, #0
 80057c6:	2100      	movs	r1, #0
 80057c8:	f7ff fefb 	bl	80055c2 <xTimerGenericCommand>
 80057cc:	0003      	movs	r3, r0
 80057ce:	60bb      	str	r3, [r7, #8]
			configASSERT( xResult );
 80057d0:	68bb      	ldr	r3, [r7, #8]
 80057d2:	2b00      	cmp	r3, #0
 80057d4:	d10a      	bne.n	80057ec <prvProcessExpiredTimer+0x72>
 80057d6:	b672      	cpsid	i
 80057d8:	e7fe      	b.n	80057d8 <prvProcessExpiredTimer+0x5e>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 80057da:	68fb      	ldr	r3, [r7, #12]
 80057dc:	2228      	movs	r2, #40	; 0x28
 80057de:	5c9b      	ldrb	r3, [r3, r2]
 80057e0:	2201      	movs	r2, #1
 80057e2:	4393      	bics	r3, r2
 80057e4:	b2d9      	uxtb	r1, r3
 80057e6:	68fb      	ldr	r3, [r7, #12]
 80057e8:	2228      	movs	r2, #40	; 0x28
 80057ea:	5499      	strb	r1, [r3, r2]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 80057ec:	68fb      	ldr	r3, [r7, #12]
 80057ee:	6a1b      	ldr	r3, [r3, #32]
 80057f0:	68fa      	ldr	r2, [r7, #12]
 80057f2:	0010      	movs	r0, r2
 80057f4:	4798      	blx	r3
}
 80057f6:	46c0      	nop			; (mov r8, r8)
 80057f8:	46bd      	mov	sp, r7
 80057fa:	b004      	add	sp, #16
 80057fc:	bd80      	pop	{r7, pc}
 80057fe:	46c0      	nop			; (mov r8, r8)
 8005800:	20000dc4 	.word	0x20000dc4

08005804 <prvTimerTask>:
/*-----------------------------------------------------------*/

static portTASK_FUNCTION( prvTimerTask, pvParameters )
{
 8005804:	b580      	push	{r7, lr}
 8005806:	b084      	sub	sp, #16
 8005808:	af00      	add	r7, sp, #0
 800580a:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 800580c:	2308      	movs	r3, #8
 800580e:	18fb      	adds	r3, r7, r3
 8005810:	0018      	movs	r0, r3
 8005812:	f000 f853 	bl	80058bc <prvGetNextExpireTime>
 8005816:	0003      	movs	r3, r0
 8005818:	60fb      	str	r3, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 800581a:	68ba      	ldr	r2, [r7, #8]
 800581c:	68fb      	ldr	r3, [r7, #12]
 800581e:	0011      	movs	r1, r2
 8005820:	0018      	movs	r0, r3
 8005822:	f000 f803 	bl	800582c <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 8005826:	f000 f8cd 	bl	80059c4 <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 800582a:	e7ef      	b.n	800580c <prvTimerTask+0x8>

0800582c <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 800582c:	b580      	push	{r7, lr}
 800582e:	b084      	sub	sp, #16
 8005830:	af00      	add	r7, sp, #0
 8005832:	6078      	str	r0, [r7, #4]
 8005834:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 8005836:	f7fe fbb7 	bl	8003fa8 <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800583a:	2308      	movs	r3, #8
 800583c:	18fb      	adds	r3, r7, r3
 800583e:	0018      	movs	r0, r3
 8005840:	f000 f85e 	bl	8005900 <prvSampleTimeNow>
 8005844:	0003      	movs	r3, r0
 8005846:	60fb      	str	r3, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 8005848:	68bb      	ldr	r3, [r7, #8]
 800584a:	2b00      	cmp	r3, #0
 800584c:	d12b      	bne.n	80058a6 <prvProcessTimerOrBlockTask+0x7a>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 800584e:	683b      	ldr	r3, [r7, #0]
 8005850:	2b00      	cmp	r3, #0
 8005852:	d10c      	bne.n	800586e <prvProcessTimerOrBlockTask+0x42>
 8005854:	687a      	ldr	r2, [r7, #4]
 8005856:	68fb      	ldr	r3, [r7, #12]
 8005858:	429a      	cmp	r2, r3
 800585a:	d808      	bhi.n	800586e <prvProcessTimerOrBlockTask+0x42>
			{
				( void ) xTaskResumeAll();
 800585c:	f7fe fbb0 	bl	8003fc0 <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 8005860:	68fa      	ldr	r2, [r7, #12]
 8005862:	687b      	ldr	r3, [r7, #4]
 8005864:	0011      	movs	r1, r2
 8005866:	0018      	movs	r0, r3
 8005868:	f7ff ff87 	bl	800577a <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 800586c:	e01d      	b.n	80058aa <prvProcessTimerOrBlockTask+0x7e>
				if( xListWasEmpty != pdFALSE )
 800586e:	683b      	ldr	r3, [r7, #0]
 8005870:	2b00      	cmp	r3, #0
 8005872:	d008      	beq.n	8005886 <prvProcessTimerOrBlockTask+0x5a>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 8005874:	4b0f      	ldr	r3, [pc, #60]	; (80058b4 <prvProcessTimerOrBlockTask+0x88>)
 8005876:	681b      	ldr	r3, [r3, #0]
 8005878:	681b      	ldr	r3, [r3, #0]
 800587a:	2b00      	cmp	r3, #0
 800587c:	d101      	bne.n	8005882 <prvProcessTimerOrBlockTask+0x56>
 800587e:	2301      	movs	r3, #1
 8005880:	e000      	b.n	8005884 <prvProcessTimerOrBlockTask+0x58>
 8005882:	2300      	movs	r3, #0
 8005884:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 8005886:	4b0c      	ldr	r3, [pc, #48]	; (80058b8 <prvProcessTimerOrBlockTask+0x8c>)
 8005888:	6818      	ldr	r0, [r3, #0]
 800588a:	687a      	ldr	r2, [r7, #4]
 800588c:	68fb      	ldr	r3, [r7, #12]
 800588e:	1ad3      	subs	r3, r2, r3
 8005890:	683a      	ldr	r2, [r7, #0]
 8005892:	0019      	movs	r1, r3
 8005894:	f7fd f88c 	bl	80029b0 <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 8005898:	f7fe fb92 	bl	8003fc0 <xTaskResumeAll>
 800589c:	1e03      	subs	r3, r0, #0
 800589e:	d104      	bne.n	80058aa <prvProcessTimerOrBlockTask+0x7e>
					portYIELD_WITHIN_API();
 80058a0:	f7fb ff4c 	bl	800173c <vPortYield>
}
 80058a4:	e001      	b.n	80058aa <prvProcessTimerOrBlockTask+0x7e>
			( void ) xTaskResumeAll();
 80058a6:	f7fe fb8b 	bl	8003fc0 <xTaskResumeAll>
}
 80058aa:	46c0      	nop			; (mov r8, r8)
 80058ac:	46bd      	mov	sp, r7
 80058ae:	b004      	add	sp, #16
 80058b0:	bd80      	pop	{r7, pc}
 80058b2:	46c0      	nop			; (mov r8, r8)
 80058b4:	20000dc8 	.word	0x20000dc8
 80058b8:	20000dcc 	.word	0x20000dcc

080058bc <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 80058bc:	b580      	push	{r7, lr}
 80058be:	b084      	sub	sp, #16
 80058c0:	af00      	add	r7, sp, #0
 80058c2:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 80058c4:	4b0d      	ldr	r3, [pc, #52]	; (80058fc <prvGetNextExpireTime+0x40>)
 80058c6:	681b      	ldr	r3, [r3, #0]
 80058c8:	681b      	ldr	r3, [r3, #0]
 80058ca:	2b00      	cmp	r3, #0
 80058cc:	d101      	bne.n	80058d2 <prvGetNextExpireTime+0x16>
 80058ce:	2201      	movs	r2, #1
 80058d0:	e000      	b.n	80058d4 <prvGetNextExpireTime+0x18>
 80058d2:	2200      	movs	r2, #0
 80058d4:	687b      	ldr	r3, [r7, #4]
 80058d6:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 80058d8:	687b      	ldr	r3, [r7, #4]
 80058da:	681b      	ldr	r3, [r3, #0]
 80058dc:	2b00      	cmp	r3, #0
 80058de:	d105      	bne.n	80058ec <prvGetNextExpireTime+0x30>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 80058e0:	4b06      	ldr	r3, [pc, #24]	; (80058fc <prvGetNextExpireTime+0x40>)
 80058e2:	681b      	ldr	r3, [r3, #0]
 80058e4:	68db      	ldr	r3, [r3, #12]
 80058e6:	681b      	ldr	r3, [r3, #0]
 80058e8:	60fb      	str	r3, [r7, #12]
 80058ea:	e001      	b.n	80058f0 <prvGetNextExpireTime+0x34>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 80058ec:	2300      	movs	r3, #0
 80058ee:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 80058f0:	68fb      	ldr	r3, [r7, #12]
}
 80058f2:	0018      	movs	r0, r3
 80058f4:	46bd      	mov	sp, r7
 80058f6:	b004      	add	sp, #16
 80058f8:	bd80      	pop	{r7, pc}
 80058fa:	46c0      	nop			; (mov r8, r8)
 80058fc:	20000dc4 	.word	0x20000dc4

08005900 <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 8005900:	b580      	push	{r7, lr}
 8005902:	b084      	sub	sp, #16
 8005904:	af00      	add	r7, sp, #0
 8005906:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 8005908:	f7fe fbe6 	bl	80040d8 <xTaskGetTickCount>
 800590c:	0003      	movs	r3, r0
 800590e:	60fb      	str	r3, [r7, #12]

	if( xTimeNow < xLastTime )
 8005910:	4b0a      	ldr	r3, [pc, #40]	; (800593c <prvSampleTimeNow+0x3c>)
 8005912:	681b      	ldr	r3, [r3, #0]
 8005914:	68fa      	ldr	r2, [r7, #12]
 8005916:	429a      	cmp	r2, r3
 8005918:	d205      	bcs.n	8005926 <prvSampleTimeNow+0x26>
	{
		prvSwitchTimerLists();
 800591a:	f000 f905 	bl	8005b28 <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 800591e:	687b      	ldr	r3, [r7, #4]
 8005920:	2201      	movs	r2, #1
 8005922:	601a      	str	r2, [r3, #0]
 8005924:	e002      	b.n	800592c <prvSampleTimeNow+0x2c>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 8005926:	687b      	ldr	r3, [r7, #4]
 8005928:	2200      	movs	r2, #0
 800592a:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 800592c:	4b03      	ldr	r3, [pc, #12]	; (800593c <prvSampleTimeNow+0x3c>)
 800592e:	68fa      	ldr	r2, [r7, #12]
 8005930:	601a      	str	r2, [r3, #0]

	return xTimeNow;
 8005932:	68fb      	ldr	r3, [r7, #12]
}
 8005934:	0018      	movs	r0, r3
 8005936:	46bd      	mov	sp, r7
 8005938:	b004      	add	sp, #16
 800593a:	bd80      	pop	{r7, pc}
 800593c:	20000dd4 	.word	0x20000dd4

08005940 <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 8005940:	b580      	push	{r7, lr}
 8005942:	b086      	sub	sp, #24
 8005944:	af00      	add	r7, sp, #0
 8005946:	60f8      	str	r0, [r7, #12]
 8005948:	60b9      	str	r1, [r7, #8]
 800594a:	607a      	str	r2, [r7, #4]
 800594c:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 800594e:	2300      	movs	r3, #0
 8005950:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 8005952:	68fb      	ldr	r3, [r7, #12]
 8005954:	68ba      	ldr	r2, [r7, #8]
 8005956:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8005958:	68fb      	ldr	r3, [r7, #12]
 800595a:	68fa      	ldr	r2, [r7, #12]
 800595c:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 800595e:	68ba      	ldr	r2, [r7, #8]
 8005960:	687b      	ldr	r3, [r7, #4]
 8005962:	429a      	cmp	r2, r3
 8005964:	d812      	bhi.n	800598c <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8005966:	687a      	ldr	r2, [r7, #4]
 8005968:	683b      	ldr	r3, [r7, #0]
 800596a:	1ad2      	subs	r2, r2, r3
 800596c:	68fb      	ldr	r3, [r7, #12]
 800596e:	699b      	ldr	r3, [r3, #24]
 8005970:	429a      	cmp	r2, r3
 8005972:	d302      	bcc.n	800597a <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 8005974:	2301      	movs	r3, #1
 8005976:	617b      	str	r3, [r7, #20]
 8005978:	e01b      	b.n	80059b2 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 800597a:	4b10      	ldr	r3, [pc, #64]	; (80059bc <prvInsertTimerInActiveList+0x7c>)
 800597c:	681a      	ldr	r2, [r3, #0]
 800597e:	68fb      	ldr	r3, [r7, #12]
 8005980:	3304      	adds	r3, #4
 8005982:	0019      	movs	r1, r3
 8005984:	0010      	movs	r0, r2
 8005986:	f7fb fdea 	bl	800155e <vListInsert>
 800598a:	e012      	b.n	80059b2 <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 800598c:	687a      	ldr	r2, [r7, #4]
 800598e:	683b      	ldr	r3, [r7, #0]
 8005990:	429a      	cmp	r2, r3
 8005992:	d206      	bcs.n	80059a2 <prvInsertTimerInActiveList+0x62>
 8005994:	68ba      	ldr	r2, [r7, #8]
 8005996:	683b      	ldr	r3, [r7, #0]
 8005998:	429a      	cmp	r2, r3
 800599a:	d302      	bcc.n	80059a2 <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 800599c:	2301      	movs	r3, #1
 800599e:	617b      	str	r3, [r7, #20]
 80059a0:	e007      	b.n	80059b2 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 80059a2:	4b07      	ldr	r3, [pc, #28]	; (80059c0 <prvInsertTimerInActiveList+0x80>)
 80059a4:	681a      	ldr	r2, [r3, #0]
 80059a6:	68fb      	ldr	r3, [r7, #12]
 80059a8:	3304      	adds	r3, #4
 80059aa:	0019      	movs	r1, r3
 80059ac:	0010      	movs	r0, r2
 80059ae:	f7fb fdd6 	bl	800155e <vListInsert>
		}
	}

	return xProcessTimerNow;
 80059b2:	697b      	ldr	r3, [r7, #20]
}
 80059b4:	0018      	movs	r0, r3
 80059b6:	46bd      	mov	sp, r7
 80059b8:	b006      	add	sp, #24
 80059ba:	bd80      	pop	{r7, pc}
 80059bc:	20000dc8 	.word	0x20000dc8
 80059c0:	20000dc4 	.word	0x20000dc4

080059c4 <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 80059c4:	b580      	push	{r7, lr}
 80059c6:	b08a      	sub	sp, #40	; 0x28
 80059c8:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 80059ca:	e09a      	b.n	8005b02 <prvProcessReceivedCommands+0x13e>
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 80059cc:	2308      	movs	r3, #8
 80059ce:	18fb      	adds	r3, r7, r3
 80059d0:	681b      	ldr	r3, [r3, #0]
 80059d2:	2b00      	cmp	r3, #0
 80059d4:	da00      	bge.n	80059d8 <prvProcessReceivedCommands+0x14>
 80059d6:	e094      	b.n	8005b02 <prvProcessReceivedCommands+0x13e>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 80059d8:	2308      	movs	r3, #8
 80059da:	18fb      	adds	r3, r7, r3
 80059dc:	689b      	ldr	r3, [r3, #8]
 80059de:	61fb      	str	r3, [r7, #28]

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 80059e0:	69fb      	ldr	r3, [r7, #28]
 80059e2:	695b      	ldr	r3, [r3, #20]
 80059e4:	2b00      	cmp	r3, #0
 80059e6:	d004      	beq.n	80059f2 <prvProcessReceivedCommands+0x2e>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 80059e8:	69fb      	ldr	r3, [r7, #28]
 80059ea:	3304      	adds	r3, #4
 80059ec:	0018      	movs	r0, r3
 80059ee:	f7fb fdec 	bl	80015ca <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 80059f2:	1d3b      	adds	r3, r7, #4
 80059f4:	0018      	movs	r0, r3
 80059f6:	f7ff ff83 	bl	8005900 <prvSampleTimeNow>
 80059fa:	0003      	movs	r3, r0
 80059fc:	61bb      	str	r3, [r7, #24]

			switch( xMessage.xMessageID )
 80059fe:	2308      	movs	r3, #8
 8005a00:	18fb      	adds	r3, r7, r3
 8005a02:	681b      	ldr	r3, [r3, #0]
 8005a04:	2b09      	cmp	r3, #9
 8005a06:	d900      	bls.n	8005a0a <prvProcessReceivedCommands+0x46>
 8005a08:	e07a      	b.n	8005b00 <prvProcessReceivedCommands+0x13c>
 8005a0a:	009a      	lsls	r2, r3, #2
 8005a0c:	4b44      	ldr	r3, [pc, #272]	; (8005b20 <prvProcessReceivedCommands+0x15c>)
 8005a0e:	18d3      	adds	r3, r2, r3
 8005a10:	681b      	ldr	r3, [r3, #0]
 8005a12:	469f      	mov	pc, r3
				case tmrCOMMAND_START_FROM_ISR :
				case tmrCOMMAND_RESET :
				case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8005a14:	69fb      	ldr	r3, [r7, #28]
 8005a16:	2228      	movs	r2, #40	; 0x28
 8005a18:	5c9b      	ldrb	r3, [r3, r2]
 8005a1a:	2201      	movs	r2, #1
 8005a1c:	4313      	orrs	r3, r2
 8005a1e:	b2d9      	uxtb	r1, r3
 8005a20:	69fb      	ldr	r3, [r7, #28]
 8005a22:	2228      	movs	r2, #40	; 0x28
 8005a24:	5499      	strb	r1, [r3, r2]
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 8005a26:	2308      	movs	r3, #8
 8005a28:	18fb      	adds	r3, r7, r3
 8005a2a:	685a      	ldr	r2, [r3, #4]
 8005a2c:	69fb      	ldr	r3, [r7, #28]
 8005a2e:	699b      	ldr	r3, [r3, #24]
 8005a30:	18d1      	adds	r1, r2, r3
 8005a32:	2308      	movs	r3, #8
 8005a34:	18fb      	adds	r3, r7, r3
 8005a36:	685b      	ldr	r3, [r3, #4]
 8005a38:	69ba      	ldr	r2, [r7, #24]
 8005a3a:	69f8      	ldr	r0, [r7, #28]
 8005a3c:	f7ff ff80 	bl	8005940 <prvInsertTimerInActiveList>
 8005a40:	1e03      	subs	r3, r0, #0
 8005a42:	d05e      	beq.n	8005b02 <prvProcessReceivedCommands+0x13e>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8005a44:	69fb      	ldr	r3, [r7, #28]
 8005a46:	6a1b      	ldr	r3, [r3, #32]
 8005a48:	69fa      	ldr	r2, [r7, #28]
 8005a4a:	0010      	movs	r0, r2
 8005a4c:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8005a4e:	69fb      	ldr	r3, [r7, #28]
 8005a50:	2228      	movs	r2, #40	; 0x28
 8005a52:	5c9b      	ldrb	r3, [r3, r2]
 8005a54:	001a      	movs	r2, r3
 8005a56:	2304      	movs	r3, #4
 8005a58:	4013      	ands	r3, r2
 8005a5a:	d052      	beq.n	8005b02 <prvProcessReceivedCommands+0x13e>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 8005a5c:	2308      	movs	r3, #8
 8005a5e:	18fb      	adds	r3, r7, r3
 8005a60:	685a      	ldr	r2, [r3, #4]
 8005a62:	69fb      	ldr	r3, [r7, #28]
 8005a64:	699b      	ldr	r3, [r3, #24]
 8005a66:	18d2      	adds	r2, r2, r3
 8005a68:	69f8      	ldr	r0, [r7, #28]
 8005a6a:	2300      	movs	r3, #0
 8005a6c:	9300      	str	r3, [sp, #0]
 8005a6e:	2300      	movs	r3, #0
 8005a70:	2100      	movs	r1, #0
 8005a72:	f7ff fda6 	bl	80055c2 <xTimerGenericCommand>
 8005a76:	0003      	movs	r3, r0
 8005a78:	617b      	str	r3, [r7, #20]
							configASSERT( xResult );
 8005a7a:	697b      	ldr	r3, [r7, #20]
 8005a7c:	2b00      	cmp	r3, #0
 8005a7e:	d140      	bne.n	8005b02 <prvProcessReceivedCommands+0x13e>
 8005a80:	b672      	cpsid	i
 8005a82:	e7fe      	b.n	8005a82 <prvProcessReceivedCommands+0xbe>
					break;

				case tmrCOMMAND_STOP :
				case tmrCOMMAND_STOP_FROM_ISR :
					/* The timer has already been removed from the active list. */
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8005a84:	69fb      	ldr	r3, [r7, #28]
 8005a86:	2228      	movs	r2, #40	; 0x28
 8005a88:	5c9b      	ldrb	r3, [r3, r2]
 8005a8a:	2201      	movs	r2, #1
 8005a8c:	4393      	bics	r3, r2
 8005a8e:	b2d9      	uxtb	r1, r3
 8005a90:	69fb      	ldr	r3, [r7, #28]
 8005a92:	2228      	movs	r2, #40	; 0x28
 8005a94:	5499      	strb	r1, [r3, r2]
					break;
 8005a96:	e034      	b.n	8005b02 <prvProcessReceivedCommands+0x13e>

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8005a98:	69fb      	ldr	r3, [r7, #28]
 8005a9a:	2228      	movs	r2, #40	; 0x28
 8005a9c:	5c9b      	ldrb	r3, [r3, r2]
 8005a9e:	2201      	movs	r2, #1
 8005aa0:	4313      	orrs	r3, r2
 8005aa2:	b2d9      	uxtb	r1, r3
 8005aa4:	69fb      	ldr	r3, [r7, #28]
 8005aa6:	2228      	movs	r2, #40	; 0x28
 8005aa8:	5499      	strb	r1, [r3, r2]
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 8005aaa:	2308      	movs	r3, #8
 8005aac:	18fb      	adds	r3, r7, r3
 8005aae:	685a      	ldr	r2, [r3, #4]
 8005ab0:	69fb      	ldr	r3, [r7, #28]
 8005ab2:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 8005ab4:	69fb      	ldr	r3, [r7, #28]
 8005ab6:	699b      	ldr	r3, [r3, #24]
 8005ab8:	2b00      	cmp	r3, #0
 8005aba:	d101      	bne.n	8005ac0 <prvProcessReceivedCommands+0xfc>
 8005abc:	b672      	cpsid	i
 8005abe:	e7fe      	b.n	8005abe <prvProcessReceivedCommands+0xfa>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 8005ac0:	69fb      	ldr	r3, [r7, #28]
 8005ac2:	699a      	ldr	r2, [r3, #24]
 8005ac4:	69bb      	ldr	r3, [r7, #24]
 8005ac6:	18d1      	adds	r1, r2, r3
 8005ac8:	69bb      	ldr	r3, [r7, #24]
 8005aca:	69ba      	ldr	r2, [r7, #24]
 8005acc:	69f8      	ldr	r0, [r7, #28]
 8005ace:	f7ff ff37 	bl	8005940 <prvInsertTimerInActiveList>
					break;
 8005ad2:	e016      	b.n	8005b02 <prvProcessReceivedCommands+0x13e>
					#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
					{
						/* The timer has already been removed from the active list,
						just free up the memory if the memory was dynamically
						allocated. */
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 8005ad4:	69fb      	ldr	r3, [r7, #28]
 8005ad6:	2228      	movs	r2, #40	; 0x28
 8005ad8:	5c9b      	ldrb	r3, [r3, r2]
 8005ada:	001a      	movs	r2, r3
 8005adc:	2302      	movs	r3, #2
 8005ade:	4013      	ands	r3, r2
 8005ae0:	d104      	bne.n	8005aec <prvProcessReceivedCommands+0x128>
						{
							vPortFree( pxTimer );
 8005ae2:	69fb      	ldr	r3, [r7, #28]
 8005ae4:	0018      	movs	r0, r3
 8005ae6:	f7fb fcc9 	bl	800147c <vPortFree>
 8005aea:	e00a      	b.n	8005b02 <prvProcessReceivedCommands+0x13e>
						}
						else
						{
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8005aec:	69fb      	ldr	r3, [r7, #28]
 8005aee:	2228      	movs	r2, #40	; 0x28
 8005af0:	5c9b      	ldrb	r3, [r3, r2]
 8005af2:	2201      	movs	r2, #1
 8005af4:	4393      	bics	r3, r2
 8005af6:	b2d9      	uxtb	r1, r3
 8005af8:	69fb      	ldr	r3, [r7, #28]
 8005afa:	2228      	movs	r2, #40	; 0x28
 8005afc:	5499      	strb	r1, [r3, r2]
						no need to free the memory - just mark the timer as
						"not active". */
						pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 8005afe:	e000      	b.n	8005b02 <prvProcessReceivedCommands+0x13e>

				default	:
					/* Don't expect to get here. */
					break;
 8005b00:	46c0      	nop			; (mov r8, r8)
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8005b02:	4b08      	ldr	r3, [pc, #32]	; (8005b24 <prvProcessReceivedCommands+0x160>)
 8005b04:	681b      	ldr	r3, [r3, #0]
 8005b06:	2208      	movs	r2, #8
 8005b08:	18b9      	adds	r1, r7, r2
 8005b0a:	2200      	movs	r2, #0
 8005b0c:	0018      	movs	r0, r3
 8005b0e:	f7fc f9fb 	bl	8001f08 <xQueueReceive>
 8005b12:	1e03      	subs	r3, r0, #0
 8005b14:	d000      	beq.n	8005b18 <prvProcessReceivedCommands+0x154>
 8005b16:	e759      	b.n	80059cc <prvProcessReceivedCommands+0x8>
			}
		}
	}
}
 8005b18:	46c0      	nop			; (mov r8, r8)
 8005b1a:	46bd      	mov	sp, r7
 8005b1c:	b008      	add	sp, #32
 8005b1e:	bd80      	pop	{r7, pc}
 8005b20:	08007500 	.word	0x08007500
 8005b24:	20000dcc 	.word	0x20000dcc

08005b28 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 8005b28:	b580      	push	{r7, lr}
 8005b2a:	b088      	sub	sp, #32
 8005b2c:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8005b2e:	e041      	b.n	8005bb4 <prvSwitchTimerLists+0x8c>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8005b30:	4b2a      	ldr	r3, [pc, #168]	; (8005bdc <prvSwitchTimerLists+0xb4>)
 8005b32:	681b      	ldr	r3, [r3, #0]
 8005b34:	68db      	ldr	r3, [r3, #12]
 8005b36:	681b      	ldr	r3, [r3, #0]
 8005b38:	617b      	str	r3, [r7, #20]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8005b3a:	4b28      	ldr	r3, [pc, #160]	; (8005bdc <prvSwitchTimerLists+0xb4>)
 8005b3c:	681b      	ldr	r3, [r3, #0]
 8005b3e:	68db      	ldr	r3, [r3, #12]
 8005b40:	68db      	ldr	r3, [r3, #12]
 8005b42:	613b      	str	r3, [r7, #16]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8005b44:	693b      	ldr	r3, [r7, #16]
 8005b46:	3304      	adds	r3, #4
 8005b48:	0018      	movs	r0, r3
 8005b4a:	f7fb fd3e 	bl	80015ca <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8005b4e:	693b      	ldr	r3, [r7, #16]
 8005b50:	6a1b      	ldr	r3, [r3, #32]
 8005b52:	693a      	ldr	r2, [r7, #16]
 8005b54:	0010      	movs	r0, r2
 8005b56:	4798      	blx	r3

		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8005b58:	693b      	ldr	r3, [r7, #16]
 8005b5a:	2228      	movs	r2, #40	; 0x28
 8005b5c:	5c9b      	ldrb	r3, [r3, r2]
 8005b5e:	001a      	movs	r2, r3
 8005b60:	2304      	movs	r3, #4
 8005b62:	4013      	ands	r3, r2
 8005b64:	d026      	beq.n	8005bb4 <prvSwitchTimerLists+0x8c>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 8005b66:	693b      	ldr	r3, [r7, #16]
 8005b68:	699a      	ldr	r2, [r3, #24]
 8005b6a:	697b      	ldr	r3, [r7, #20]
 8005b6c:	18d3      	adds	r3, r2, r3
 8005b6e:	60fb      	str	r3, [r7, #12]
			if( xReloadTime > xNextExpireTime )
 8005b70:	68fa      	ldr	r2, [r7, #12]
 8005b72:	697b      	ldr	r3, [r7, #20]
 8005b74:	429a      	cmp	r2, r3
 8005b76:	d90e      	bls.n	8005b96 <prvSwitchTimerLists+0x6e>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 8005b78:	693b      	ldr	r3, [r7, #16]
 8005b7a:	68fa      	ldr	r2, [r7, #12]
 8005b7c:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8005b7e:	693b      	ldr	r3, [r7, #16]
 8005b80:	693a      	ldr	r2, [r7, #16]
 8005b82:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8005b84:	4b15      	ldr	r3, [pc, #84]	; (8005bdc <prvSwitchTimerLists+0xb4>)
 8005b86:	681a      	ldr	r2, [r3, #0]
 8005b88:	693b      	ldr	r3, [r7, #16]
 8005b8a:	3304      	adds	r3, #4
 8005b8c:	0019      	movs	r1, r3
 8005b8e:	0010      	movs	r0, r2
 8005b90:	f7fb fce5 	bl	800155e <vListInsert>
 8005b94:	e00e      	b.n	8005bb4 <prvSwitchTimerLists+0x8c>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8005b96:	697a      	ldr	r2, [r7, #20]
 8005b98:	6938      	ldr	r0, [r7, #16]
 8005b9a:	2300      	movs	r3, #0
 8005b9c:	9300      	str	r3, [sp, #0]
 8005b9e:	2300      	movs	r3, #0
 8005ba0:	2100      	movs	r1, #0
 8005ba2:	f7ff fd0e 	bl	80055c2 <xTimerGenericCommand>
 8005ba6:	0003      	movs	r3, r0
 8005ba8:	60bb      	str	r3, [r7, #8]
				configASSERT( xResult );
 8005baa:	68bb      	ldr	r3, [r7, #8]
 8005bac:	2b00      	cmp	r3, #0
 8005bae:	d101      	bne.n	8005bb4 <prvSwitchTimerLists+0x8c>
 8005bb0:	b672      	cpsid	i
 8005bb2:	e7fe      	b.n	8005bb2 <prvSwitchTimerLists+0x8a>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8005bb4:	4b09      	ldr	r3, [pc, #36]	; (8005bdc <prvSwitchTimerLists+0xb4>)
 8005bb6:	681b      	ldr	r3, [r3, #0]
 8005bb8:	681b      	ldr	r3, [r3, #0]
 8005bba:	2b00      	cmp	r3, #0
 8005bbc:	d1b8      	bne.n	8005b30 <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 8005bbe:	4b07      	ldr	r3, [pc, #28]	; (8005bdc <prvSwitchTimerLists+0xb4>)
 8005bc0:	681b      	ldr	r3, [r3, #0]
 8005bc2:	607b      	str	r3, [r7, #4]
	pxCurrentTimerList = pxOverflowTimerList;
 8005bc4:	4b06      	ldr	r3, [pc, #24]	; (8005be0 <prvSwitchTimerLists+0xb8>)
 8005bc6:	681a      	ldr	r2, [r3, #0]
 8005bc8:	4b04      	ldr	r3, [pc, #16]	; (8005bdc <prvSwitchTimerLists+0xb4>)
 8005bca:	601a      	str	r2, [r3, #0]
	pxOverflowTimerList = pxTemp;
 8005bcc:	4b04      	ldr	r3, [pc, #16]	; (8005be0 <prvSwitchTimerLists+0xb8>)
 8005bce:	687a      	ldr	r2, [r7, #4]
 8005bd0:	601a      	str	r2, [r3, #0]
}
 8005bd2:	46c0      	nop			; (mov r8, r8)
 8005bd4:	46bd      	mov	sp, r7
 8005bd6:	b006      	add	sp, #24
 8005bd8:	bd80      	pop	{r7, pc}
 8005bda:	46c0      	nop			; (mov r8, r8)
 8005bdc:	20000dc4 	.word	0x20000dc4
 8005be0:	20000dc8 	.word	0x20000dc8

08005be4 <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 8005be4:	b580      	push	{r7, lr}
 8005be6:	af00      	add	r7, sp, #0
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 8005be8:	f7fb fdb8 	bl	800175c <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 8005bec:	4b14      	ldr	r3, [pc, #80]	; (8005c40 <prvCheckForValidListAndQueue+0x5c>)
 8005bee:	681b      	ldr	r3, [r3, #0]
 8005bf0:	2b00      	cmp	r3, #0
 8005bf2:	d120      	bne.n	8005c36 <prvCheckForValidListAndQueue+0x52>
		{
			vListInitialise( &xActiveTimerList1 );
 8005bf4:	4b13      	ldr	r3, [pc, #76]	; (8005c44 <prvCheckForValidListAndQueue+0x60>)
 8005bf6:	0018      	movs	r0, r3
 8005bf8:	f7fb fc66 	bl	80014c8 <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 8005bfc:	4b12      	ldr	r3, [pc, #72]	; (8005c48 <prvCheckForValidListAndQueue+0x64>)
 8005bfe:	0018      	movs	r0, r3
 8005c00:	f7fb fc62 	bl	80014c8 <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 8005c04:	4b11      	ldr	r3, [pc, #68]	; (8005c4c <prvCheckForValidListAndQueue+0x68>)
 8005c06:	4a0f      	ldr	r2, [pc, #60]	; (8005c44 <prvCheckForValidListAndQueue+0x60>)
 8005c08:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 8005c0a:	4b11      	ldr	r3, [pc, #68]	; (8005c50 <prvCheckForValidListAndQueue+0x6c>)
 8005c0c:	4a0e      	ldr	r2, [pc, #56]	; (8005c48 <prvCheckForValidListAndQueue+0x64>)
 8005c0e:	601a      	str	r2, [r3, #0]

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
			}
			#else
			{
				xTimerQueue = xQueueCreate( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, sizeof( DaemonTaskMessage_t ) );
 8005c10:	2200      	movs	r2, #0
 8005c12:	210c      	movs	r1, #12
 8005c14:	2005      	movs	r0, #5
 8005c16:	f7fb fe8d 	bl	8001934 <xQueueGenericCreate>
 8005c1a:	0002      	movs	r2, r0
 8005c1c:	4b08      	ldr	r3, [pc, #32]	; (8005c40 <prvCheckForValidListAndQueue+0x5c>)
 8005c1e:	601a      	str	r2, [r3, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 8005c20:	4b07      	ldr	r3, [pc, #28]	; (8005c40 <prvCheckForValidListAndQueue+0x5c>)
 8005c22:	681b      	ldr	r3, [r3, #0]
 8005c24:	2b00      	cmp	r3, #0
 8005c26:	d006      	beq.n	8005c36 <prvCheckForValidListAndQueue+0x52>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 8005c28:	4b05      	ldr	r3, [pc, #20]	; (8005c40 <prvCheckForValidListAndQueue+0x5c>)
 8005c2a:	681b      	ldr	r3, [r3, #0]
 8005c2c:	4a09      	ldr	r2, [pc, #36]	; (8005c54 <prvCheckForValidListAndQueue+0x70>)
 8005c2e:	0011      	movs	r1, r2
 8005c30:	0018      	movs	r0, r3
 8005c32:	f7fc fe45 	bl	80028c0 <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8005c36:	f7fb fda3 	bl	8001780 <vPortExitCritical>
}
 8005c3a:	46c0      	nop			; (mov r8, r8)
 8005c3c:	46bd      	mov	sp, r7
 8005c3e:	bd80      	pop	{r7, pc}
 8005c40:	20000dcc 	.word	0x20000dcc
 8005c44:	20000d9c 	.word	0x20000d9c
 8005c48:	20000db0 	.word	0x20000db0
 8005c4c:	20000dc4 	.word	0x20000dc4
 8005c50:	20000dc8 	.word	0x20000dc8
 8005c54:	08007528 	.word	0x08007528

08005c58 <xTimerIsTimerActive>:
/*-----------------------------------------------------------*/

BaseType_t xTimerIsTimerActive( TimerHandle_t xTimer )
{
 8005c58:	b580      	push	{r7, lr}
 8005c5a:	b084      	sub	sp, #16
 8005c5c:	af00      	add	r7, sp, #0
 8005c5e:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;
Timer_t *pxTimer = xTimer;
 8005c60:	687b      	ldr	r3, [r7, #4]
 8005c62:	60bb      	str	r3, [r7, #8]

	configASSERT( xTimer );
 8005c64:	687b      	ldr	r3, [r7, #4]
 8005c66:	2b00      	cmp	r3, #0
 8005c68:	d101      	bne.n	8005c6e <xTimerIsTimerActive+0x16>
 8005c6a:	b672      	cpsid	i
 8005c6c:	e7fe      	b.n	8005c6c <xTimerIsTimerActive+0x14>

	/* Is the timer in the list of active timers? */
	taskENTER_CRITICAL();
 8005c6e:	f7fb fd75 	bl	800175c <vPortEnterCritical>
	{
		if( ( pxTimer->ucStatus & tmrSTATUS_IS_ACTIVE ) == 0 )
 8005c72:	68bb      	ldr	r3, [r7, #8]
 8005c74:	2228      	movs	r2, #40	; 0x28
 8005c76:	5c9b      	ldrb	r3, [r3, r2]
 8005c78:	001a      	movs	r2, r3
 8005c7a:	2301      	movs	r3, #1
 8005c7c:	4013      	ands	r3, r2
 8005c7e:	d102      	bne.n	8005c86 <xTimerIsTimerActive+0x2e>
		{
			xReturn = pdFALSE;
 8005c80:	2300      	movs	r3, #0
 8005c82:	60fb      	str	r3, [r7, #12]
 8005c84:	e001      	b.n	8005c8a <xTimerIsTimerActive+0x32>
		}
		else
		{
			xReturn = pdTRUE;
 8005c86:	2301      	movs	r3, #1
 8005c88:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8005c8a:	f7fb fd79 	bl	8001780 <vPortExitCritical>

	return xReturn;
 8005c8e:	68fb      	ldr	r3, [r7, #12]
} /*lint !e818 Can't be pointer to const due to the typedef. */
 8005c90:	0018      	movs	r0, r3
 8005c92:	46bd      	mov	sp, r7
 8005c94:	b004      	add	sp, #16
 8005c96:	bd80      	pop	{r7, pc}

08005c98 <pvTimerGetTimerID>:
/*-----------------------------------------------------------*/

void *pvTimerGetTimerID( const TimerHandle_t xTimer )
{
 8005c98:	b580      	push	{r7, lr}
 8005c9a:	b084      	sub	sp, #16
 8005c9c:	af00      	add	r7, sp, #0
 8005c9e:	6078      	str	r0, [r7, #4]
Timer_t * const pxTimer = xTimer;
 8005ca0:	687b      	ldr	r3, [r7, #4]
 8005ca2:	60fb      	str	r3, [r7, #12]
void *pvReturn;

	configASSERT( xTimer );
 8005ca4:	687b      	ldr	r3, [r7, #4]
 8005ca6:	2b00      	cmp	r3, #0
 8005ca8:	d101      	bne.n	8005cae <pvTimerGetTimerID+0x16>
 8005caa:	b672      	cpsid	i
 8005cac:	e7fe      	b.n	8005cac <pvTimerGetTimerID+0x14>

	taskENTER_CRITICAL();
 8005cae:	f7fb fd55 	bl	800175c <vPortEnterCritical>
	{
		pvReturn = pxTimer->pvTimerID;
 8005cb2:	68fb      	ldr	r3, [r7, #12]
 8005cb4:	69db      	ldr	r3, [r3, #28]
 8005cb6:	60bb      	str	r3, [r7, #8]
	}
	taskEXIT_CRITICAL();
 8005cb8:	f7fb fd62 	bl	8001780 <vPortExitCritical>

	return pvReturn;
 8005cbc:	68bb      	ldr	r3, [r7, #8]
}
 8005cbe:	0018      	movs	r0, r3
 8005cc0:	46bd      	mov	sp, r7
 8005cc2:	b004      	add	sp, #16
 8005cc4:	bd80      	pop	{r7, pc}

08005cc6 <vTimerSetTimerID>:
/*-----------------------------------------------------------*/

void vTimerSetTimerID( TimerHandle_t xTimer, void *pvNewID )
{
 8005cc6:	b580      	push	{r7, lr}
 8005cc8:	b084      	sub	sp, #16
 8005cca:	af00      	add	r7, sp, #0
 8005ccc:	6078      	str	r0, [r7, #4]
 8005cce:	6039      	str	r1, [r7, #0]
Timer_t * const pxTimer = xTimer;
 8005cd0:	687b      	ldr	r3, [r7, #4]
 8005cd2:	60fb      	str	r3, [r7, #12]

	configASSERT( xTimer );
 8005cd4:	687b      	ldr	r3, [r7, #4]
 8005cd6:	2b00      	cmp	r3, #0
 8005cd8:	d101      	bne.n	8005cde <vTimerSetTimerID+0x18>
 8005cda:	b672      	cpsid	i
 8005cdc:	e7fe      	b.n	8005cdc <vTimerSetTimerID+0x16>

	taskENTER_CRITICAL();
 8005cde:	f7fb fd3d 	bl	800175c <vPortEnterCritical>
	{
		pxTimer->pvTimerID = pvNewID;
 8005ce2:	68fb      	ldr	r3, [r7, #12]
 8005ce4:	683a      	ldr	r2, [r7, #0]
 8005ce6:	61da      	str	r2, [r3, #28]
	}
	taskEXIT_CRITICAL();
 8005ce8:	f7fb fd4a 	bl	8001780 <vPortExitCritical>
}
 8005cec:	46c0      	nop			; (mov r8, r8)
 8005cee:	46bd      	mov	sp, r7
 8005cf0:	b004      	add	sp, #16
 8005cf2:	bd80      	pop	{r7, pc}

08005cf4 <uxTimerGetTimerNumber>:
/*-----------------------------------------------------------*/

#if ( configUSE_TRACE_FACILITY == 1 )

	UBaseType_t uxTimerGetTimerNumber( TimerHandle_t xTimer )
	{
 8005cf4:	b580      	push	{r7, lr}
 8005cf6:	b082      	sub	sp, #8
 8005cf8:	af00      	add	r7, sp, #0
 8005cfa:	6078      	str	r0, [r7, #4]
		return ( ( Timer_t * ) xTimer )->uxTimerNumber;
 8005cfc:	687b      	ldr	r3, [r7, #4]
 8005cfe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
	}
 8005d00:	0018      	movs	r0, r3
 8005d02:	46bd      	mov	sp, r7
 8005d04:	b002      	add	sp, #8
 8005d06:	bd80      	pop	{r7, pc}

08005d08 <vTimerSetTimerNumber>:
/*-----------------------------------------------------------*/

#if ( configUSE_TRACE_FACILITY == 1 )

	void vTimerSetTimerNumber( TimerHandle_t xTimer, UBaseType_t uxTimerNumber )
	{
 8005d08:	b580      	push	{r7, lr}
 8005d0a:	b082      	sub	sp, #8
 8005d0c:	af00      	add	r7, sp, #0
 8005d0e:	6078      	str	r0, [r7, #4]
 8005d10:	6039      	str	r1, [r7, #0]
		( ( Timer_t * ) xTimer )->uxTimerNumber = uxTimerNumber;
 8005d12:	687b      	ldr	r3, [r7, #4]
 8005d14:	683a      	ldr	r2, [r7, #0]
 8005d16:	625a      	str	r2, [r3, #36]	; 0x24
	}
 8005d18:	46c0      	nop			; (mov r8, r8)
 8005d1a:	46bd      	mov	sp, r7
 8005d1c:	b002      	add	sp, #8
 8005d1e:	bd80      	pop	{r7, pc}

08005d20 <Motor_Init>:


//------------------------------------------------------------------------
//---------------------------   Motor_Init   ------------------------------
//------------------------------------------------------------------------
void Motor_Init(void){
 8005d20:	b590      	push	{r4, r7, lr}
 8005d22:	b083      	sub	sp, #12
 8005d24:	af00      	add	r7, sp, #0
	m[0].EN = 1;	//M1 1- ON/0 - OFF
 8005d26:	4b60      	ldr	r3, [pc, #384]	; (8005ea8 <Motor_Init+0x188>)
 8005d28:	2201      	movs	r2, #1
 8005d2a:	701a      	strb	r2, [r3, #0]
	m[1].EN = 1;	//M2 1- ON/0 - OFF
 8005d2c:	4b5e      	ldr	r3, [pc, #376]	; (8005ea8 <Motor_Init+0x188>)
 8005d2e:	2201      	movs	r2, #1
 8005d30:	749a      	strb	r2, [r3, #18]
	m[2].EN = 1;	//M3 1- ON/0 - OFF
 8005d32:	4b5d      	ldr	r3, [pc, #372]	; (8005ea8 <Motor_Init+0x188>)
 8005d34:	2224      	movs	r2, #36	; 0x24
 8005d36:	2101      	movs	r1, #1
 8005d38:	5499      	strb	r1, [r3, r2]
	m[3].EN = 1;	//M4 1- ON/0 - OFF
 8005d3a:	4b5b      	ldr	r3, [pc, #364]	; (8005ea8 <Motor_Init+0x188>)
 8005d3c:	2236      	movs	r2, #54	; 0x36
 8005d3e:	2101      	movs	r1, #1
 8005d40:	5499      	strb	r1, [r3, r2]
	m[4].EN = 1;	//M5 1- ON/0 - OFF
 8005d42:	4b59      	ldr	r3, [pc, #356]	; (8005ea8 <Motor_Init+0x188>)
 8005d44:	2248      	movs	r2, #72	; 0x48
 8005d46:	2101      	movs	r1, #1
 8005d48:	5499      	strb	r1, [r3, r2]
	m[5].EN = 1;	//M6 1- ON/0 - OFF
 8005d4a:	4b57      	ldr	r3, [pc, #348]	; (8005ea8 <Motor_Init+0x188>)
 8005d4c:	225a      	movs	r2, #90	; 0x5a
 8005d4e:	2101      	movs	r1, #1
 8005d50:	5499      	strb	r1, [r3, r2]
	m[6].EN = 1;	//M7 1- ON/0 - OFF
 8005d52:	4b55      	ldr	r3, [pc, #340]	; (8005ea8 <Motor_Init+0x188>)
 8005d54:	226c      	movs	r2, #108	; 0x6c
 8005d56:	2101      	movs	r1, #1
 8005d58:	5499      	strb	r1, [r3, r2]
	m[7].EN = 1;	//M8 1- ON/0 - OFF
 8005d5a:	4b53      	ldr	r3, [pc, #332]	; (8005ea8 <Motor_Init+0x188>)
 8005d5c:	227e      	movs	r2, #126	; 0x7e
 8005d5e:	2101      	movs	r1, #1
 8005d60:	5499      	strb	r1, [r3, r2]

	m[0].perMaxPWM = 500;		//Maximum drive speed in % x10
 8005d62:	4b51      	ldr	r3, [pc, #324]	; (8005ea8 <Motor_Init+0x188>)
 8005d64:	22fa      	movs	r2, #250	; 0xfa
 8005d66:	0052      	lsls	r2, r2, #1
 8005d68:	80da      	strh	r2, [r3, #6]
	m[0].perStartPWM = 100;		//The speed in % x10 at which the acceleration of the drive begins
 8005d6a:	4b4f      	ldr	r3, [pc, #316]	; (8005ea8 <Motor_Init+0x188>)
 8005d6c:	2264      	movs	r2, #100	; 0x64
 8005d6e:	809a      	strh	r2, [r3, #4]
	m[0].tAcceleration = 200;	//Acceleration duration (in steps)
 8005d70:	4b4d      	ldr	r3, [pc, #308]	; (8005ea8 <Motor_Init+0x188>)
 8005d72:	22c8      	movs	r2, #200	; 0xc8
 8005d74:	805a      	strh	r2, [r3, #2]

	m[1].perMaxPWM = 1000;
 8005d76:	4b4c      	ldr	r3, [pc, #304]	; (8005ea8 <Motor_Init+0x188>)
 8005d78:	22fa      	movs	r2, #250	; 0xfa
 8005d7a:	0092      	lsls	r2, r2, #2
 8005d7c:	831a      	strh	r2, [r3, #24]
	m[1].perStartPWM = 100;
 8005d7e:	4b4a      	ldr	r3, [pc, #296]	; (8005ea8 <Motor_Init+0x188>)
 8005d80:	2264      	movs	r2, #100	; 0x64
 8005d82:	82da      	strh	r2, [r3, #22]
	m[1].tAcceleration = 200;
 8005d84:	4b48      	ldr	r3, [pc, #288]	; (8005ea8 <Motor_Init+0x188>)
 8005d86:	22c8      	movs	r2, #200	; 0xc8
 8005d88:	829a      	strh	r2, [r3, #20]

	m[2].perMaxPWM = 500;
 8005d8a:	4b47      	ldr	r3, [pc, #284]	; (8005ea8 <Motor_Init+0x188>)
 8005d8c:	22fa      	movs	r2, #250	; 0xfa
 8005d8e:	0052      	lsls	r2, r2, #1
 8005d90:	855a      	strh	r2, [r3, #42]	; 0x2a
	m[2].perStartPWM = 100;
 8005d92:	4b45      	ldr	r3, [pc, #276]	; (8005ea8 <Motor_Init+0x188>)
 8005d94:	2264      	movs	r2, #100	; 0x64
 8005d96:	851a      	strh	r2, [r3, #40]	; 0x28
	m[2].tAcceleration = 200;
 8005d98:	4b43      	ldr	r3, [pc, #268]	; (8005ea8 <Motor_Init+0x188>)
 8005d9a:	22c8      	movs	r2, #200	; 0xc8
 8005d9c:	84da      	strh	r2, [r3, #38]	; 0x26

	m[3].perMaxPWM = 1000;
 8005d9e:	4b42      	ldr	r3, [pc, #264]	; (8005ea8 <Motor_Init+0x188>)
 8005da0:	22fa      	movs	r2, #250	; 0xfa
 8005da2:	0092      	lsls	r2, r2, #2
 8005da4:	879a      	strh	r2, [r3, #60]	; 0x3c
	m[3].perStartPWM = 100;
 8005da6:	4b40      	ldr	r3, [pc, #256]	; (8005ea8 <Motor_Init+0x188>)
 8005da8:	2264      	movs	r2, #100	; 0x64
 8005daa:	875a      	strh	r2, [r3, #58]	; 0x3a
	m[3].tAcceleration = 200;
 8005dac:	4b3e      	ldr	r3, [pc, #248]	; (8005ea8 <Motor_Init+0x188>)
 8005dae:	22c8      	movs	r2, #200	; 0xc8
 8005db0:	871a      	strh	r2, [r3, #56]	; 0x38

	m[4].perMaxPWM = 1000;
 8005db2:	4b3d      	ldr	r3, [pc, #244]	; (8005ea8 <Motor_Init+0x188>)
 8005db4:	224e      	movs	r2, #78	; 0x4e
 8005db6:	21fa      	movs	r1, #250	; 0xfa
 8005db8:	0089      	lsls	r1, r1, #2
 8005dba:	5299      	strh	r1, [r3, r2]
	m[4].perStartPWM = 100;
 8005dbc:	4b3a      	ldr	r3, [pc, #232]	; (8005ea8 <Motor_Init+0x188>)
 8005dbe:	224c      	movs	r2, #76	; 0x4c
 8005dc0:	2164      	movs	r1, #100	; 0x64
 8005dc2:	5299      	strh	r1, [r3, r2]
	m[4].tAcceleration = 100;
 8005dc4:	4b38      	ldr	r3, [pc, #224]	; (8005ea8 <Motor_Init+0x188>)
 8005dc6:	224a      	movs	r2, #74	; 0x4a
 8005dc8:	2164      	movs	r1, #100	; 0x64
 8005dca:	5299      	strh	r1, [r3, r2]

	m[5].perMaxPWM = 1000;
 8005dcc:	4b36      	ldr	r3, [pc, #216]	; (8005ea8 <Motor_Init+0x188>)
 8005dce:	2260      	movs	r2, #96	; 0x60
 8005dd0:	21fa      	movs	r1, #250	; 0xfa
 8005dd2:	0089      	lsls	r1, r1, #2
 8005dd4:	5299      	strh	r1, [r3, r2]
	m[5].perStartPWM = 100;
 8005dd6:	4b34      	ldr	r3, [pc, #208]	; (8005ea8 <Motor_Init+0x188>)
 8005dd8:	225e      	movs	r2, #94	; 0x5e
 8005dda:	2164      	movs	r1, #100	; 0x64
 8005ddc:	5299      	strh	r1, [r3, r2]
	m[5].tAcceleration = 200;
 8005dde:	4b32      	ldr	r3, [pc, #200]	; (8005ea8 <Motor_Init+0x188>)
 8005de0:	225c      	movs	r2, #92	; 0x5c
 8005de2:	21c8      	movs	r1, #200	; 0xc8
 8005de4:	5299      	strh	r1, [r3, r2]

	m[6].perMaxPWM = 1000;
 8005de6:	4b30      	ldr	r3, [pc, #192]	; (8005ea8 <Motor_Init+0x188>)
 8005de8:	2272      	movs	r2, #114	; 0x72
 8005dea:	21fa      	movs	r1, #250	; 0xfa
 8005dec:	0089      	lsls	r1, r1, #2
 8005dee:	5299      	strh	r1, [r3, r2]
	m[6].perStartPWM = 100;
 8005df0:	4b2d      	ldr	r3, [pc, #180]	; (8005ea8 <Motor_Init+0x188>)
 8005df2:	2270      	movs	r2, #112	; 0x70
 8005df4:	2164      	movs	r1, #100	; 0x64
 8005df6:	5299      	strh	r1, [r3, r2]
	m[6].tAcceleration = 100;
 8005df8:	4b2b      	ldr	r3, [pc, #172]	; (8005ea8 <Motor_Init+0x188>)
 8005dfa:	226e      	movs	r2, #110	; 0x6e
 8005dfc:	2164      	movs	r1, #100	; 0x64
 8005dfe:	5299      	strh	r1, [r3, r2]

	m[7].perMaxPWM = 1000;
 8005e00:	4b29      	ldr	r3, [pc, #164]	; (8005ea8 <Motor_Init+0x188>)
 8005e02:	2284      	movs	r2, #132	; 0x84
 8005e04:	21fa      	movs	r1, #250	; 0xfa
 8005e06:	0089      	lsls	r1, r1, #2
 8005e08:	5299      	strh	r1, [r3, r2]
	m[7].perStartPWM = 100;
 8005e0a:	4b27      	ldr	r3, [pc, #156]	; (8005ea8 <Motor_Init+0x188>)
 8005e0c:	2282      	movs	r2, #130	; 0x82
 8005e0e:	2164      	movs	r1, #100	; 0x64
 8005e10:	5299      	strh	r1, [r3, r2]
	m[7].tAcceleration = 200;
 8005e12:	4b25      	ldr	r3, [pc, #148]	; (8005ea8 <Motor_Init+0x188>)
 8005e14:	2280      	movs	r2, #128	; 0x80
 8005e16:	21c8      	movs	r1, #200	; 0xc8
 8005e18:	5299      	strh	r1, [r3, r2]

	for (uint8_t i = 0; i<8; i++){
 8005e1a:	1dfb      	adds	r3, r7, #7
 8005e1c:	2200      	movs	r2, #0
 8005e1e:	701a      	strb	r2, [r3, #0]
 8005e20:	e03a      	b.n	8005e98 <Motor_Init+0x178>
		m[i].StepSizeF = (((m[i].perMaxPWM - m[i].perStartPWM) * 100)/m[i].tAcceleration);
 8005e22:	1dfb      	adds	r3, r7, #7
 8005e24:	781c      	ldrb	r4, [r3, #0]
 8005e26:	1dfb      	adds	r3, r7, #7
 8005e28:	781a      	ldrb	r2, [r3, #0]
 8005e2a:	491f      	ldr	r1, [pc, #124]	; (8005ea8 <Motor_Init+0x188>)
 8005e2c:	0013      	movs	r3, r2
 8005e2e:	00db      	lsls	r3, r3, #3
 8005e30:	189b      	adds	r3, r3, r2
 8005e32:	005b      	lsls	r3, r3, #1
 8005e34:	18cb      	adds	r3, r1, r3
 8005e36:	3306      	adds	r3, #6
 8005e38:	881b      	ldrh	r3, [r3, #0]
 8005e3a:	b29b      	uxth	r3, r3
 8005e3c:	0018      	movs	r0, r3
 8005e3e:	1dfb      	adds	r3, r7, #7
 8005e40:	781a      	ldrb	r2, [r3, #0]
 8005e42:	4919      	ldr	r1, [pc, #100]	; (8005ea8 <Motor_Init+0x188>)
 8005e44:	0013      	movs	r3, r2
 8005e46:	00db      	lsls	r3, r3, #3
 8005e48:	189b      	adds	r3, r3, r2
 8005e4a:	005b      	lsls	r3, r3, #1
 8005e4c:	18cb      	adds	r3, r1, r3
 8005e4e:	3304      	adds	r3, #4
 8005e50:	881b      	ldrh	r3, [r3, #0]
 8005e52:	b29b      	uxth	r3, r3
 8005e54:	1ac3      	subs	r3, r0, r3
 8005e56:	2264      	movs	r2, #100	; 0x64
 8005e58:	435a      	muls	r2, r3
 8005e5a:	0010      	movs	r0, r2
 8005e5c:	1dfb      	adds	r3, r7, #7
 8005e5e:	781a      	ldrb	r2, [r3, #0]
 8005e60:	4911      	ldr	r1, [pc, #68]	; (8005ea8 <Motor_Init+0x188>)
 8005e62:	0013      	movs	r3, r2
 8005e64:	00db      	lsls	r3, r3, #3
 8005e66:	189b      	adds	r3, r3, r2
 8005e68:	005b      	lsls	r3, r3, #1
 8005e6a:	18cb      	adds	r3, r1, r3
 8005e6c:	3302      	adds	r3, #2
 8005e6e:	881b      	ldrh	r3, [r3, #0]
 8005e70:	b29b      	uxth	r3, r3
 8005e72:	0019      	movs	r1, r3
 8005e74:	f001 f9c2 	bl	80071fc <__divsi3>
 8005e78:	0003      	movs	r3, r0
 8005e7a:	b299      	uxth	r1, r3
 8005e7c:	4a0a      	ldr	r2, [pc, #40]	; (8005ea8 <Motor_Init+0x188>)
 8005e7e:	0023      	movs	r3, r4
 8005e80:	00db      	lsls	r3, r3, #3
 8005e82:	191b      	adds	r3, r3, r4
 8005e84:	005b      	lsls	r3, r3, #1
 8005e86:	18d3      	adds	r3, r2, r3
 8005e88:	330a      	adds	r3, #10
 8005e8a:	1c0a      	adds	r2, r1, #0
 8005e8c:	801a      	strh	r2, [r3, #0]
	for (uint8_t i = 0; i<8; i++){
 8005e8e:	1dfb      	adds	r3, r7, #7
 8005e90:	781a      	ldrb	r2, [r3, #0]
 8005e92:	1dfb      	adds	r3, r7, #7
 8005e94:	3201      	adds	r2, #1
 8005e96:	701a      	strb	r2, [r3, #0]
 8005e98:	1dfb      	adds	r3, r7, #7
 8005e9a:	781b      	ldrb	r3, [r3, #0]
 8005e9c:	2b07      	cmp	r3, #7
 8005e9e:	d9c0      	bls.n	8005e22 <Motor_Init+0x102>
	}


}
 8005ea0:	46c0      	nop			; (mov r8, r8)
 8005ea2:	46bd      	mov	sp, r7
 8005ea4:	b003      	add	sp, #12
 8005ea6:	bd90      	pop	{r4, r7, pc}
 8005ea8:	20000e1c 	.word	0x20000e1c

08005eac <RCC_Init>:
//------------------------------------------------------------------------
//---------------------------   RCC_Init   ------------------------------
//------------------------------------------------------------------------
void RCC_Init(void)
{
 8005eac:	b580      	push	{r7, lr}
 8005eae:	af00      	add	r7, sp, #0
		RCC->AHBENR |= RCC_AHBENR_GPIOFEN;
 8005eb0:	4b35      	ldr	r3, [pc, #212]	; (8005f88 <RCC_Init+0xdc>)
 8005eb2:	4a35      	ldr	r2, [pc, #212]	; (8005f88 <RCC_Init+0xdc>)
 8005eb4:	6952      	ldr	r2, [r2, #20]
 8005eb6:	2180      	movs	r1, #128	; 0x80
 8005eb8:	03c9      	lsls	r1, r1, #15
 8005eba:	430a      	orrs	r2, r1
 8005ebc:	615a      	str	r2, [r3, #20]
		RCC->CR |= ((uint32_t)RCC_CR_HSEON);					// Enable HSE
 8005ebe:	4b32      	ldr	r3, [pc, #200]	; (8005f88 <RCC_Init+0xdc>)
 8005ec0:	4a31      	ldr	r2, [pc, #196]	; (8005f88 <RCC_Init+0xdc>)
 8005ec2:	6812      	ldr	r2, [r2, #0]
 8005ec4:	2180      	movs	r1, #128	; 0x80
 8005ec6:	0249      	lsls	r1, r1, #9
 8005ec8:	430a      	orrs	r2, r1
 8005eca:	601a      	str	r2, [r3, #0]
		while (!(RCC->CR & RCC_CR_HSERDY));						// Ready start HSE
 8005ecc:	46c0      	nop			; (mov r8, r8)
 8005ece:	4b2e      	ldr	r3, [pc, #184]	; (8005f88 <RCC_Init+0xdc>)
 8005ed0:	681a      	ldr	r2, [r3, #0]
 8005ed2:	2380      	movs	r3, #128	; 0x80
 8005ed4:	029b      	lsls	r3, r3, #10
 8005ed6:	4013      	ands	r3, r2
 8005ed8:	d0f9      	beq.n	8005ece <RCC_Init+0x22>

		FLASH->ACR = FLASH_ACR_PRFTBE | FLASH_ACR_LATENCY;		// Cloclk Flash memory
 8005eda:	4b2c      	ldr	r3, [pc, #176]	; (8005f8c <RCC_Init+0xe0>)
 8005edc:	2211      	movs	r2, #17
 8005ede:	601a      	str	r2, [r3, #0]

		RCC->CFGR |= RCC_CFGR_HPRE_DIV1;						// AHB = SYSCLK/1
 8005ee0:	4b29      	ldr	r3, [pc, #164]	; (8005f88 <RCC_Init+0xdc>)
 8005ee2:	4a29      	ldr	r2, [pc, #164]	; (8005f88 <RCC_Init+0xdc>)
 8005ee4:	6852      	ldr	r2, [r2, #4]
 8005ee6:	605a      	str	r2, [r3, #4]
		RCC->CFGR |= RCC_CFGR_PPRE_DIV1;						// APB = HCLK/1
 8005ee8:	4b27      	ldr	r3, [pc, #156]	; (8005f88 <RCC_Init+0xdc>)
 8005eea:	4a27      	ldr	r2, [pc, #156]	; (8005f88 <RCC_Init+0xdc>)
 8005eec:	6852      	ldr	r2, [r2, #4]
 8005eee:	605a      	str	r2, [r3, #4]

		RCC->CFGR &= ~RCC_CFGR_PLLMUL;							// clear PLLMULL bits
 8005ef0:	4b25      	ldr	r3, [pc, #148]	; (8005f88 <RCC_Init+0xdc>)
 8005ef2:	4a25      	ldr	r2, [pc, #148]	; (8005f88 <RCC_Init+0xdc>)
 8005ef4:	6852      	ldr	r2, [r2, #4]
 8005ef6:	4926      	ldr	r1, [pc, #152]	; (8005f90 <RCC_Init+0xe4>)
 8005ef8:	400a      	ands	r2, r1
 8005efa:	605a      	str	r2, [r3, #4]
		RCC->CFGR &= ~RCC_CFGR_PLLSRC;							// clear PLLSRC bits
 8005efc:	4b22      	ldr	r3, [pc, #136]	; (8005f88 <RCC_Init+0xdc>)
 8005efe:	4a22      	ldr	r2, [pc, #136]	; (8005f88 <RCC_Init+0xdc>)
 8005f00:	6852      	ldr	r2, [r2, #4]
 8005f02:	4924      	ldr	r1, [pc, #144]	; (8005f94 <RCC_Init+0xe8>)
 8005f04:	400a      	ands	r2, r1
 8005f06:	605a      	str	r2, [r3, #4]
		RCC->CFGR &= ~RCC_CFGR_PLLXTPRE;						// clear PLLXTPRE bits
 8005f08:	4b1f      	ldr	r3, [pc, #124]	; (8005f88 <RCC_Init+0xdc>)
 8005f0a:	4a1f      	ldr	r2, [pc, #124]	; (8005f88 <RCC_Init+0xdc>)
 8005f0c:	6852      	ldr	r2, [r2, #4]
 8005f0e:	4922      	ldr	r1, [pc, #136]	; (8005f98 <RCC_Init+0xec>)
 8005f10:	400a      	ands	r2, r1
 8005f12:	605a      	str	r2, [r3, #4]


		RCC->CFGR |= RCC_CFGR_PLLSRC_HSE_PREDIV ;				/*!< PLL entry clock source */
 8005f14:	4b1c      	ldr	r3, [pc, #112]	; (8005f88 <RCC_Init+0xdc>)
 8005f16:	4a1c      	ldr	r2, [pc, #112]	; (8005f88 <RCC_Init+0xdc>)
 8005f18:	6852      	ldr	r2, [r2, #4]
 8005f1a:	2180      	movs	r1, #128	; 0x80
 8005f1c:	0249      	lsls	r1, r1, #9
 8005f1e:	430a      	orrs	r2, r1
 8005f20:	605a      	str	r2, [r3, #4]
		RCC->CFGR |= RCC_CFGR_PLLXTPRE_HSE_PREDIV_DIV2;			/*!< HSE/PREDIV clock divided by 2 for PLL entry */
 8005f22:	4b19      	ldr	r3, [pc, #100]	; (8005f88 <RCC_Init+0xdc>)
 8005f24:	4a18      	ldr	r2, [pc, #96]	; (8005f88 <RCC_Init+0xdc>)
 8005f26:	6852      	ldr	r2, [r2, #4]
 8005f28:	2180      	movs	r1, #128	; 0x80
 8005f2a:	0289      	lsls	r1, r1, #10
 8005f2c:	430a      	orrs	r2, r1
 8005f2e:	605a      	str	r2, [r3, #4]

		RCC->CFGR |= RCC_CFGR_PLLMUL12;							// PLL x4: clock = 4 MHz * 12 = 48 MHz
 8005f30:	4b15      	ldr	r3, [pc, #84]	; (8005f88 <RCC_Init+0xdc>)
 8005f32:	4a15      	ldr	r2, [pc, #84]	; (8005f88 <RCC_Init+0xdc>)
 8005f34:	6852      	ldr	r2, [r2, #4]
 8005f36:	21a0      	movs	r1, #160	; 0xa0
 8005f38:	0389      	lsls	r1, r1, #14
 8005f3a:	430a      	orrs	r2, r1
 8005f3c:	605a      	str	r2, [r3, #4]

		RCC->CR |= RCC_CR_PLLON;								// enable PLL
 8005f3e:	4b12      	ldr	r3, [pc, #72]	; (8005f88 <RCC_Init+0xdc>)
 8005f40:	4a11      	ldr	r2, [pc, #68]	; (8005f88 <RCC_Init+0xdc>)
 8005f42:	6812      	ldr	r2, [r2, #0]
 8005f44:	2180      	movs	r1, #128	; 0x80
 8005f46:	0449      	lsls	r1, r1, #17
 8005f48:	430a      	orrs	r2, r1
 8005f4a:	601a      	str	r2, [r3, #0]
		while((RCC->CR & RCC_CR_PLLRDY) == 0) {} 				// wait till PLL is ready
 8005f4c:	46c0      	nop			; (mov r8, r8)
 8005f4e:	4b0e      	ldr	r3, [pc, #56]	; (8005f88 <RCC_Init+0xdc>)
 8005f50:	681a      	ldr	r2, [r3, #0]
 8005f52:	2380      	movs	r3, #128	; 0x80
 8005f54:	049b      	lsls	r3, r3, #18
 8005f56:	4013      	ands	r3, r2
 8005f58:	d0f9      	beq.n	8005f4e <RCC_Init+0xa2>

		RCC->CFGR &= ~RCC_CFGR_SW;								// clear SW bits
 8005f5a:	4b0b      	ldr	r3, [pc, #44]	; (8005f88 <RCC_Init+0xdc>)
 8005f5c:	4a0a      	ldr	r2, [pc, #40]	; (8005f88 <RCC_Init+0xdc>)
 8005f5e:	6852      	ldr	r2, [r2, #4]
 8005f60:	2103      	movs	r1, #3
 8005f62:	438a      	bics	r2, r1
 8005f64:	605a      	str	r2, [r3, #4]
		RCC->CFGR |= RCC_CFGR_SW_PLL;							// select source SYSCLK = PLL
 8005f66:	4b08      	ldr	r3, [pc, #32]	; (8005f88 <RCC_Init+0xdc>)
 8005f68:	4a07      	ldr	r2, [pc, #28]	; (8005f88 <RCC_Init+0xdc>)
 8005f6a:	6852      	ldr	r2, [r2, #4]
 8005f6c:	2102      	movs	r1, #2
 8005f6e:	430a      	orrs	r2, r1
 8005f70:	605a      	str	r2, [r3, #4]
		while((RCC->CFGR & RCC_CFGR_SWS) != RCC_CFGR_SWS_1) {}	// wait till PLL is used
 8005f72:	46c0      	nop			; (mov r8, r8)
 8005f74:	4b04      	ldr	r3, [pc, #16]	; (8005f88 <RCC_Init+0xdc>)
 8005f76:	685b      	ldr	r3, [r3, #4]
 8005f78:	220c      	movs	r2, #12
 8005f7a:	4013      	ands	r3, r2
 8005f7c:	2b08      	cmp	r3, #8
 8005f7e:	d1f9      	bne.n	8005f74 <RCC_Init+0xc8>
}
 8005f80:	46c0      	nop			; (mov r8, r8)
 8005f82:	46bd      	mov	sp, r7
 8005f84:	bd80      	pop	{r7, pc}
 8005f86:	46c0      	nop			; (mov r8, r8)
 8005f88:	40021000 	.word	0x40021000
 8005f8c:	40022000 	.word	0x40022000
 8005f90:	ffc3ffff 	.word	0xffc3ffff
 8005f94:	fffeffff 	.word	0xfffeffff
 8005f98:	fffdffff 	.word	0xfffdffff

08005f9c <LEDtst>:

//------------------------------------------------------------------------
//---------------------------   LEDtest   ------------------------------
//------------------------------------------------------------------------
void LEDtst(void){
 8005f9c:	b580      	push	{r7, lr}
 8005f9e:	af00      	add	r7, sp, #0

	if (m[0].EN == 1){
 8005fa0:	4b88      	ldr	r3, [pc, #544]	; (80061c4 <LEDtst+0x228>)
 8005fa2:	781b      	ldrb	r3, [r3, #0]
 8005fa4:	b2db      	uxtb	r3, r3
 8005fa6:	2b01      	cmp	r3, #1
 8005fa8:	d103      	bne.n	8005fb2 <LEDtst+0x16>
		TIM1->CCR1 = 1000;
 8005faa:	4b87      	ldr	r3, [pc, #540]	; (80061c8 <LEDtst+0x22c>)
 8005fac:	22fa      	movs	r2, #250	; 0xfa
 8005fae:	0092      	lsls	r2, r2, #2
 8005fb0:	635a      	str	r2, [r3, #52]	; 0x34
	}
	if (m[1].EN == 1){
 8005fb2:	4b84      	ldr	r3, [pc, #528]	; (80061c4 <LEDtst+0x228>)
 8005fb4:	7c9b      	ldrb	r3, [r3, #18]
 8005fb6:	b2db      	uxtb	r3, r3
 8005fb8:	2b01      	cmp	r3, #1
 8005fba:	d103      	bne.n	8005fc4 <LEDtst+0x28>
		TIM1->CCR2 = 1000;
 8005fbc:	4b82      	ldr	r3, [pc, #520]	; (80061c8 <LEDtst+0x22c>)
 8005fbe:	22fa      	movs	r2, #250	; 0xfa
 8005fc0:	0092      	lsls	r2, r2, #2
 8005fc2:	639a      	str	r2, [r3, #56]	; 0x38
	}
	if (m[2].EN == 1){
 8005fc4:	4b7f      	ldr	r3, [pc, #508]	; (80061c4 <LEDtst+0x228>)
 8005fc6:	2224      	movs	r2, #36	; 0x24
 8005fc8:	5c9b      	ldrb	r3, [r3, r2]
 8005fca:	b2db      	uxtb	r3, r3
 8005fcc:	2b01      	cmp	r3, #1
 8005fce:	d103      	bne.n	8005fd8 <LEDtst+0x3c>
		TIM1->CCR3 = 1000;
 8005fd0:	4b7d      	ldr	r3, [pc, #500]	; (80061c8 <LEDtst+0x22c>)
 8005fd2:	22fa      	movs	r2, #250	; 0xfa
 8005fd4:	0092      	lsls	r2, r2, #2
 8005fd6:	63da      	str	r2, [r3, #60]	; 0x3c
	}
	if (m[3].EN == 1){
 8005fd8:	4b7a      	ldr	r3, [pc, #488]	; (80061c4 <LEDtst+0x228>)
 8005fda:	2236      	movs	r2, #54	; 0x36
 8005fdc:	5c9b      	ldrb	r3, [r3, r2]
 8005fde:	b2db      	uxtb	r3, r3
 8005fe0:	2b01      	cmp	r3, #1
 8005fe2:	d103      	bne.n	8005fec <LEDtst+0x50>
		TIM1->CCR4 = 1000;
 8005fe4:	4b78      	ldr	r3, [pc, #480]	; (80061c8 <LEDtst+0x22c>)
 8005fe6:	22fa      	movs	r2, #250	; 0xfa
 8005fe8:	0092      	lsls	r2, r2, #2
 8005fea:	641a      	str	r2, [r3, #64]	; 0x40
	}

	if (m[4].EN == 1){
 8005fec:	4b75      	ldr	r3, [pc, #468]	; (80061c4 <LEDtst+0x228>)
 8005fee:	2248      	movs	r2, #72	; 0x48
 8005ff0:	5c9b      	ldrb	r3, [r3, r2]
 8005ff2:	b2db      	uxtb	r3, r3
 8005ff4:	2b01      	cmp	r3, #1
 8005ff6:	d103      	bne.n	8006000 <LEDtst+0x64>
		TIM3->CCR1 = 1000;
 8005ff8:	4b74      	ldr	r3, [pc, #464]	; (80061cc <LEDtst+0x230>)
 8005ffa:	22fa      	movs	r2, #250	; 0xfa
 8005ffc:	0092      	lsls	r2, r2, #2
 8005ffe:	635a      	str	r2, [r3, #52]	; 0x34
	}
	if (m[5].EN == 1){
 8006000:	4b70      	ldr	r3, [pc, #448]	; (80061c4 <LEDtst+0x228>)
 8006002:	225a      	movs	r2, #90	; 0x5a
 8006004:	5c9b      	ldrb	r3, [r3, r2]
 8006006:	b2db      	uxtb	r3, r3
 8006008:	2b01      	cmp	r3, #1
 800600a:	d103      	bne.n	8006014 <LEDtst+0x78>
		TIM3->CCR2 = 1000;
 800600c:	4b6f      	ldr	r3, [pc, #444]	; (80061cc <LEDtst+0x230>)
 800600e:	22fa      	movs	r2, #250	; 0xfa
 8006010:	0092      	lsls	r2, r2, #2
 8006012:	639a      	str	r2, [r3, #56]	; 0x38
	}
	if (m[6].EN == 1){
 8006014:	4b6b      	ldr	r3, [pc, #428]	; (80061c4 <LEDtst+0x228>)
 8006016:	226c      	movs	r2, #108	; 0x6c
 8006018:	5c9b      	ldrb	r3, [r3, r2]
 800601a:	b2db      	uxtb	r3, r3
 800601c:	2b01      	cmp	r3, #1
 800601e:	d103      	bne.n	8006028 <LEDtst+0x8c>
		TIM3->CCR3 = 1000;
 8006020:	4b6a      	ldr	r3, [pc, #424]	; (80061cc <LEDtst+0x230>)
 8006022:	22fa      	movs	r2, #250	; 0xfa
 8006024:	0092      	lsls	r2, r2, #2
 8006026:	63da      	str	r2, [r3, #60]	; 0x3c
	}
	if (m[7].EN == 1){
 8006028:	4b66      	ldr	r3, [pc, #408]	; (80061c4 <LEDtst+0x228>)
 800602a:	227e      	movs	r2, #126	; 0x7e
 800602c:	5c9b      	ldrb	r3, [r3, r2]
 800602e:	b2db      	uxtb	r3, r3
 8006030:	2b01      	cmp	r3, #1
 8006032:	d103      	bne.n	800603c <LEDtst+0xa0>
		TIM3->CCR4 = 1000;
 8006034:	4b65      	ldr	r3, [pc, #404]	; (80061cc <LEDtst+0x230>)
 8006036:	22fa      	movs	r2, #250	; 0xfa
 8006038:	0092      	lsls	r2, r2, #2
 800603a:	641a      	str	r2, [r3, #64]	; 0x40
	}
	delay(1000);
 800603c:	23fa      	movs	r3, #250	; 0xfa
 800603e:	009b      	lsls	r3, r3, #2
 8006040:	0018      	movs	r0, r3
 8006042:	f000 ff69 	bl	8006f18 <delay>

	TIM1->CCR1 = 0;
 8006046:	4b60      	ldr	r3, [pc, #384]	; (80061c8 <LEDtst+0x22c>)
 8006048:	2200      	movs	r2, #0
 800604a:	635a      	str	r2, [r3, #52]	; 0x34
	TIM1->CCR2 = 0;
 800604c:	4b5e      	ldr	r3, [pc, #376]	; (80061c8 <LEDtst+0x22c>)
 800604e:	2200      	movs	r2, #0
 8006050:	639a      	str	r2, [r3, #56]	; 0x38
	TIM1->CCR3 = 0;
 8006052:	4b5d      	ldr	r3, [pc, #372]	; (80061c8 <LEDtst+0x22c>)
 8006054:	2200      	movs	r2, #0
 8006056:	63da      	str	r2, [r3, #60]	; 0x3c
	TIM1->CCR4 = 0;
 8006058:	4b5b      	ldr	r3, [pc, #364]	; (80061c8 <LEDtst+0x22c>)
 800605a:	2200      	movs	r2, #0
 800605c:	641a      	str	r2, [r3, #64]	; 0x40

	TIM3->CCR1 = 0;
 800605e:	4b5b      	ldr	r3, [pc, #364]	; (80061cc <LEDtst+0x230>)
 8006060:	2200      	movs	r2, #0
 8006062:	635a      	str	r2, [r3, #52]	; 0x34
	TIM3->CCR2 = 0;
 8006064:	4b59      	ldr	r3, [pc, #356]	; (80061cc <LEDtst+0x230>)
 8006066:	2200      	movs	r2, #0
 8006068:	639a      	str	r2, [r3, #56]	; 0x38
	TIM3->CCR3 = 0;
 800606a:	4b58      	ldr	r3, [pc, #352]	; (80061cc <LEDtst+0x230>)
 800606c:	2200      	movs	r2, #0
 800606e:	63da      	str	r2, [r3, #60]	; 0x3c
	TIM3->CCR4 = 0;
 8006070:	4b56      	ldr	r3, [pc, #344]	; (80061cc <LEDtst+0x230>)
 8006072:	2200      	movs	r2, #0
 8006074:	641a      	str	r2, [r3, #64]	; 0x40

	if (m[0].EN == 1){
 8006076:	4b53      	ldr	r3, [pc, #332]	; (80061c4 <LEDtst+0x228>)
 8006078:	781b      	ldrb	r3, [r3, #0]
 800607a:	b2db      	uxtb	r3, r3
 800607c:	2b01      	cmp	r3, #1
 800607e:	d108      	bne.n	8006092 <LEDtst+0xf6>
		GPIOA->BSRR |= GPIO_BSRR_BS_15;
 8006080:	2390      	movs	r3, #144	; 0x90
 8006082:	05db      	lsls	r3, r3, #23
 8006084:	2290      	movs	r2, #144	; 0x90
 8006086:	05d2      	lsls	r2, r2, #23
 8006088:	6992      	ldr	r2, [r2, #24]
 800608a:	2180      	movs	r1, #128	; 0x80
 800608c:	0209      	lsls	r1, r1, #8
 800608e:	430a      	orrs	r2, r1
 8006090:	619a      	str	r2, [r3, #24]
	}
	if (m[1].EN == 1){
 8006092:	4b4c      	ldr	r3, [pc, #304]	; (80061c4 <LEDtst+0x228>)
 8006094:	7c9b      	ldrb	r3, [r3, #18]
 8006096:	b2db      	uxtb	r3, r3
 8006098:	2b01      	cmp	r3, #1
 800609a:	d105      	bne.n	80060a8 <LEDtst+0x10c>
		GPIOB->BSRR |= GPIO_BSRR_BS_3;
 800609c:	4b4c      	ldr	r3, [pc, #304]	; (80061d0 <LEDtst+0x234>)
 800609e:	4a4c      	ldr	r2, [pc, #304]	; (80061d0 <LEDtst+0x234>)
 80060a0:	6992      	ldr	r2, [r2, #24]
 80060a2:	2108      	movs	r1, #8
 80060a4:	430a      	orrs	r2, r1
 80060a6:	619a      	str	r2, [r3, #24]
	}
	if (m[2].EN == 1){
 80060a8:	4b46      	ldr	r3, [pc, #280]	; (80061c4 <LEDtst+0x228>)
 80060aa:	2224      	movs	r2, #36	; 0x24
 80060ac:	5c9b      	ldrb	r3, [r3, r2]
 80060ae:	b2db      	uxtb	r3, r3
 80060b0:	2b01      	cmp	r3, #1
 80060b2:	d105      	bne.n	80060c0 <LEDtst+0x124>
		GPIOB->BSRR |= GPIO_BSRR_BS_4;
 80060b4:	4b46      	ldr	r3, [pc, #280]	; (80061d0 <LEDtst+0x234>)
 80060b6:	4a46      	ldr	r2, [pc, #280]	; (80061d0 <LEDtst+0x234>)
 80060b8:	6992      	ldr	r2, [r2, #24]
 80060ba:	2110      	movs	r1, #16
 80060bc:	430a      	orrs	r2, r1
 80060be:	619a      	str	r2, [r3, #24]
	}
	if (m[3].EN == 1){
 80060c0:	4b40      	ldr	r3, [pc, #256]	; (80061c4 <LEDtst+0x228>)
 80060c2:	2236      	movs	r2, #54	; 0x36
 80060c4:	5c9b      	ldrb	r3, [r3, r2]
 80060c6:	b2db      	uxtb	r3, r3
 80060c8:	2b01      	cmp	r3, #1
 80060ca:	d105      	bne.n	80060d8 <LEDtst+0x13c>
		GPIOB->BSRR |= GPIO_BSRR_BS_5;
 80060cc:	4b40      	ldr	r3, [pc, #256]	; (80061d0 <LEDtst+0x234>)
 80060ce:	4a40      	ldr	r2, [pc, #256]	; (80061d0 <LEDtst+0x234>)
 80060d0:	6992      	ldr	r2, [r2, #24]
 80060d2:	2120      	movs	r1, #32
 80060d4:	430a      	orrs	r2, r1
 80060d6:	619a      	str	r2, [r3, #24]
	}
	if (m[4].EN == 1){
 80060d8:	4b3a      	ldr	r3, [pc, #232]	; (80061c4 <LEDtst+0x228>)
 80060da:	2248      	movs	r2, #72	; 0x48
 80060dc:	5c9b      	ldrb	r3, [r3, r2]
 80060de:	b2db      	uxtb	r3, r3
 80060e0:	2b01      	cmp	r3, #1
 80060e2:	d106      	bne.n	80060f2 <LEDtst+0x156>
		GPIOB->BSRR |= GPIO_BSRR_BS_12;
 80060e4:	4b3a      	ldr	r3, [pc, #232]	; (80061d0 <LEDtst+0x234>)
 80060e6:	4a3a      	ldr	r2, [pc, #232]	; (80061d0 <LEDtst+0x234>)
 80060e8:	6992      	ldr	r2, [r2, #24]
 80060ea:	2180      	movs	r1, #128	; 0x80
 80060ec:	0149      	lsls	r1, r1, #5
 80060ee:	430a      	orrs	r2, r1
 80060f0:	619a      	str	r2, [r3, #24]
	}
	if (m[5].EN == 1){
 80060f2:	4b34      	ldr	r3, [pc, #208]	; (80061c4 <LEDtst+0x228>)
 80060f4:	225a      	movs	r2, #90	; 0x5a
 80060f6:	5c9b      	ldrb	r3, [r3, r2]
 80060f8:	b2db      	uxtb	r3, r3
 80060fa:	2b01      	cmp	r3, #1
 80060fc:	d106      	bne.n	800610c <LEDtst+0x170>
		GPIOB->BSRR |= GPIO_BSRR_BS_13;
 80060fe:	4b34      	ldr	r3, [pc, #208]	; (80061d0 <LEDtst+0x234>)
 8006100:	4a33      	ldr	r2, [pc, #204]	; (80061d0 <LEDtst+0x234>)
 8006102:	6992      	ldr	r2, [r2, #24]
 8006104:	2180      	movs	r1, #128	; 0x80
 8006106:	0189      	lsls	r1, r1, #6
 8006108:	430a      	orrs	r2, r1
 800610a:	619a      	str	r2, [r3, #24]
	}
	if (m[6].EN == 1){
 800610c:	4b2d      	ldr	r3, [pc, #180]	; (80061c4 <LEDtst+0x228>)
 800610e:	226c      	movs	r2, #108	; 0x6c
 8006110:	5c9b      	ldrb	r3, [r3, r2]
 8006112:	b2db      	uxtb	r3, r3
 8006114:	2b01      	cmp	r3, #1
 8006116:	d106      	bne.n	8006126 <LEDtst+0x18a>
		GPIOB->BSRR |= GPIO_BSRR_BS_14;
 8006118:	4b2d      	ldr	r3, [pc, #180]	; (80061d0 <LEDtst+0x234>)
 800611a:	4a2d      	ldr	r2, [pc, #180]	; (80061d0 <LEDtst+0x234>)
 800611c:	6992      	ldr	r2, [r2, #24]
 800611e:	2180      	movs	r1, #128	; 0x80
 8006120:	01c9      	lsls	r1, r1, #7
 8006122:	430a      	orrs	r2, r1
 8006124:	619a      	str	r2, [r3, #24]
	}
	if (m[7].EN == 1){
 8006126:	4b27      	ldr	r3, [pc, #156]	; (80061c4 <LEDtst+0x228>)
 8006128:	227e      	movs	r2, #126	; 0x7e
 800612a:	5c9b      	ldrb	r3, [r3, r2]
 800612c:	b2db      	uxtb	r3, r3
 800612e:	2b01      	cmp	r3, #1
 8006130:	d106      	bne.n	8006140 <LEDtst+0x1a4>
		GPIOB->BSRR |= GPIO_BSRR_BS_15;
 8006132:	4b27      	ldr	r3, [pc, #156]	; (80061d0 <LEDtst+0x234>)
 8006134:	4a26      	ldr	r2, [pc, #152]	; (80061d0 <LEDtst+0x234>)
 8006136:	6992      	ldr	r2, [r2, #24]
 8006138:	2180      	movs	r1, #128	; 0x80
 800613a:	0209      	lsls	r1, r1, #8
 800613c:	430a      	orrs	r2, r1
 800613e:	619a      	str	r2, [r3, #24]
	}

	delay(1000);
 8006140:	23fa      	movs	r3, #250	; 0xfa
 8006142:	009b      	lsls	r3, r3, #2
 8006144:	0018      	movs	r0, r3
 8006146:	f000 fee7 	bl	8006f18 <delay>
	GPIOA->BSRR |= GPIO_BSRR_BR_15;
 800614a:	2390      	movs	r3, #144	; 0x90
 800614c:	05db      	lsls	r3, r3, #23
 800614e:	2290      	movs	r2, #144	; 0x90
 8006150:	05d2      	lsls	r2, r2, #23
 8006152:	6992      	ldr	r2, [r2, #24]
 8006154:	2180      	movs	r1, #128	; 0x80
 8006156:	0609      	lsls	r1, r1, #24
 8006158:	430a      	orrs	r2, r1
 800615a:	619a      	str	r2, [r3, #24]
	GPIOB->BSRR |= GPIO_BSRR_BR_3;
 800615c:	4b1c      	ldr	r3, [pc, #112]	; (80061d0 <LEDtst+0x234>)
 800615e:	4a1c      	ldr	r2, [pc, #112]	; (80061d0 <LEDtst+0x234>)
 8006160:	6992      	ldr	r2, [r2, #24]
 8006162:	2180      	movs	r1, #128	; 0x80
 8006164:	0309      	lsls	r1, r1, #12
 8006166:	430a      	orrs	r2, r1
 8006168:	619a      	str	r2, [r3, #24]
	GPIOB->BSRR |= GPIO_BSRR_BR_4;
 800616a:	4b19      	ldr	r3, [pc, #100]	; (80061d0 <LEDtst+0x234>)
 800616c:	4a18      	ldr	r2, [pc, #96]	; (80061d0 <LEDtst+0x234>)
 800616e:	6992      	ldr	r2, [r2, #24]
 8006170:	2180      	movs	r1, #128	; 0x80
 8006172:	0349      	lsls	r1, r1, #13
 8006174:	430a      	orrs	r2, r1
 8006176:	619a      	str	r2, [r3, #24]
	GPIOB->BSRR |= GPIO_BSRR_BR_5;
 8006178:	4b15      	ldr	r3, [pc, #84]	; (80061d0 <LEDtst+0x234>)
 800617a:	4a15      	ldr	r2, [pc, #84]	; (80061d0 <LEDtst+0x234>)
 800617c:	6992      	ldr	r2, [r2, #24]
 800617e:	2180      	movs	r1, #128	; 0x80
 8006180:	0389      	lsls	r1, r1, #14
 8006182:	430a      	orrs	r2, r1
 8006184:	619a      	str	r2, [r3, #24]

	GPIOB->BSRR |= GPIO_BSRR_BR_12;
 8006186:	4b12      	ldr	r3, [pc, #72]	; (80061d0 <LEDtst+0x234>)
 8006188:	4a11      	ldr	r2, [pc, #68]	; (80061d0 <LEDtst+0x234>)
 800618a:	6992      	ldr	r2, [r2, #24]
 800618c:	2180      	movs	r1, #128	; 0x80
 800618e:	0549      	lsls	r1, r1, #21
 8006190:	430a      	orrs	r2, r1
 8006192:	619a      	str	r2, [r3, #24]
	GPIOB->BSRR |= GPIO_BSRR_BR_13;
 8006194:	4b0e      	ldr	r3, [pc, #56]	; (80061d0 <LEDtst+0x234>)
 8006196:	4a0e      	ldr	r2, [pc, #56]	; (80061d0 <LEDtst+0x234>)
 8006198:	6992      	ldr	r2, [r2, #24]
 800619a:	2180      	movs	r1, #128	; 0x80
 800619c:	0589      	lsls	r1, r1, #22
 800619e:	430a      	orrs	r2, r1
 80061a0:	619a      	str	r2, [r3, #24]
	GPIOB->BSRR |= GPIO_BSRR_BR_14;
 80061a2:	4b0b      	ldr	r3, [pc, #44]	; (80061d0 <LEDtst+0x234>)
 80061a4:	4a0a      	ldr	r2, [pc, #40]	; (80061d0 <LEDtst+0x234>)
 80061a6:	6992      	ldr	r2, [r2, #24]
 80061a8:	2180      	movs	r1, #128	; 0x80
 80061aa:	05c9      	lsls	r1, r1, #23
 80061ac:	430a      	orrs	r2, r1
 80061ae:	619a      	str	r2, [r3, #24]
	GPIOB->BSRR |= GPIO_BSRR_BR_15;
 80061b0:	4b07      	ldr	r3, [pc, #28]	; (80061d0 <LEDtst+0x234>)
 80061b2:	4a07      	ldr	r2, [pc, #28]	; (80061d0 <LEDtst+0x234>)
 80061b4:	6992      	ldr	r2, [r2, #24]
 80061b6:	2180      	movs	r1, #128	; 0x80
 80061b8:	0609      	lsls	r1, r1, #24
 80061ba:	430a      	orrs	r2, r1
 80061bc:	619a      	str	r2, [r3, #24]


}
 80061be:	46c0      	nop			; (mov r8, r8)
 80061c0:	46bd      	mov	sp, r7
 80061c2:	bd80      	pop	{r7, pc}
 80061c4:	20000e1c 	.word	0x20000e1c
 80061c8:	40012c00 	.word	0x40012c00
 80061cc:	40000400 	.word	0x40000400
 80061d0:	48000400 	.word	0x48000400

080061d4 <GPIO_Init>:
//------------------------------------------------------------------------
//---------------------------   GPIO_Init   ------------------------------
//------------------------------------------------------------------------
void GPIO_Init(void){
 80061d4:	b580      	push	{r7, lr}
 80061d6:	af00      	add	r7, sp, #0
	//RCC->AHBENR |= RCC_AHBENR_GPIOAEN;  //Enable clock PORT A
	//GPIOA->MODER |= GPIO_MODER_MODER6_1; //OutPut mode
	//GPIOA->OTYPER &= ~GPIO_OTYPER_OT_6;
	RCC->AHBENR |= RCC_AHBENR_GPIOAEN;  //Enable clock PORT A
 80061d8:	4b51      	ldr	r3, [pc, #324]	; (8006320 <GPIO_Init+0x14c>)
 80061da:	4a51      	ldr	r2, [pc, #324]	; (8006320 <GPIO_Init+0x14c>)
 80061dc:	6952      	ldr	r2, [r2, #20]
 80061de:	2180      	movs	r1, #128	; 0x80
 80061e0:	0289      	lsls	r1, r1, #10
 80061e2:	430a      	orrs	r2, r1
 80061e4:	615a      	str	r2, [r3, #20]
	RCC->AHBENR |= RCC_AHBENR_GPIOBEN;  //Enable clock PORT B
 80061e6:	4b4e      	ldr	r3, [pc, #312]	; (8006320 <GPIO_Init+0x14c>)
 80061e8:	4a4d      	ldr	r2, [pc, #308]	; (8006320 <GPIO_Init+0x14c>)
 80061ea:	6952      	ldr	r2, [r2, #20]
 80061ec:	2180      	movs	r1, #128	; 0x80
 80061ee:	02c9      	lsls	r1, r1, #11
 80061f0:	430a      	orrs	r2, r1
 80061f2:	615a      	str	r2, [r3, #20]
	RCC->AHBENR |= RCC_AHBENR_GPIOCEN;  //Enable clock PORT C
 80061f4:	4b4a      	ldr	r3, [pc, #296]	; (8006320 <GPIO_Init+0x14c>)
 80061f6:	4a4a      	ldr	r2, [pc, #296]	; (8006320 <GPIO_Init+0x14c>)
 80061f8:	6952      	ldr	r2, [r2, #20]
 80061fa:	2180      	movs	r1, #128	; 0x80
 80061fc:	0309      	lsls	r1, r1, #12
 80061fe:	430a      	orrs	r2, r1
 8006200:	615a      	str	r2, [r3, #20]

	//-----------------   PWM_En   ----------------------------------
	//M1_En
	GPIOA->MODER |= GPIO_MODER_MODER15_0;	//General purpose OutPut mode
 8006202:	2390      	movs	r3, #144	; 0x90
 8006204:	05db      	lsls	r3, r3, #23
 8006206:	2290      	movs	r2, #144	; 0x90
 8006208:	05d2      	lsls	r2, r2, #23
 800620a:	6812      	ldr	r2, [r2, #0]
 800620c:	2180      	movs	r1, #128	; 0x80
 800620e:	05c9      	lsls	r1, r1, #23
 8006210:	430a      	orrs	r2, r1
 8006212:	601a      	str	r2, [r3, #0]
	GPIOA->OTYPER &= ~GPIO_OTYPER_OT_15;	//PUSH PULL
 8006214:	2390      	movs	r3, #144	; 0x90
 8006216:	05db      	lsls	r3, r3, #23
 8006218:	2290      	movs	r2, #144	; 0x90
 800621a:	05d2      	lsls	r2, r2, #23
 800621c:	6852      	ldr	r2, [r2, #4]
 800621e:	4941      	ldr	r1, [pc, #260]	; (8006324 <GPIO_Init+0x150>)
 8006220:	400a      	ands	r2, r1
 8006222:	605a      	str	r2, [r3, #4]
	//M2_En
	GPIOB->MODER |= GPIO_MODER_MODER3_0;	//General purpose OutPut mode
 8006224:	4b40      	ldr	r3, [pc, #256]	; (8006328 <GPIO_Init+0x154>)
 8006226:	4a40      	ldr	r2, [pc, #256]	; (8006328 <GPIO_Init+0x154>)
 8006228:	6812      	ldr	r2, [r2, #0]
 800622a:	2140      	movs	r1, #64	; 0x40
 800622c:	430a      	orrs	r2, r1
 800622e:	601a      	str	r2, [r3, #0]
	GPIOB->OTYPER &= ~GPIO_OTYPER_OT_3;		//PUSH PULL
 8006230:	4b3d      	ldr	r3, [pc, #244]	; (8006328 <GPIO_Init+0x154>)
 8006232:	4a3d      	ldr	r2, [pc, #244]	; (8006328 <GPIO_Init+0x154>)
 8006234:	6852      	ldr	r2, [r2, #4]
 8006236:	2108      	movs	r1, #8
 8006238:	438a      	bics	r2, r1
 800623a:	605a      	str	r2, [r3, #4]
	//M3_En
	GPIOB->MODER |= GPIO_MODER_MODER4_0;	//General purpose OutPut mode
 800623c:	4b3a      	ldr	r3, [pc, #232]	; (8006328 <GPIO_Init+0x154>)
 800623e:	4a3a      	ldr	r2, [pc, #232]	; (8006328 <GPIO_Init+0x154>)
 8006240:	6812      	ldr	r2, [r2, #0]
 8006242:	2180      	movs	r1, #128	; 0x80
 8006244:	0049      	lsls	r1, r1, #1
 8006246:	430a      	orrs	r2, r1
 8006248:	601a      	str	r2, [r3, #0]
	GPIOB->OTYPER &= ~GPIO_OTYPER_OT_3;		//PUSH PULL
 800624a:	4b37      	ldr	r3, [pc, #220]	; (8006328 <GPIO_Init+0x154>)
 800624c:	4a36      	ldr	r2, [pc, #216]	; (8006328 <GPIO_Init+0x154>)
 800624e:	6852      	ldr	r2, [r2, #4]
 8006250:	2108      	movs	r1, #8
 8006252:	438a      	bics	r2, r1
 8006254:	605a      	str	r2, [r3, #4]
	//M4_En
	GPIOB->MODER |= GPIO_MODER_MODER5_0;	//General purpose OutPut mode
 8006256:	4b34      	ldr	r3, [pc, #208]	; (8006328 <GPIO_Init+0x154>)
 8006258:	4a33      	ldr	r2, [pc, #204]	; (8006328 <GPIO_Init+0x154>)
 800625a:	6812      	ldr	r2, [r2, #0]
 800625c:	2180      	movs	r1, #128	; 0x80
 800625e:	00c9      	lsls	r1, r1, #3
 8006260:	430a      	orrs	r2, r1
 8006262:	601a      	str	r2, [r3, #0]
	GPIOB->OTYPER &= ~GPIO_OTYPER_OT_3;		//PUSH PULL
 8006264:	4b30      	ldr	r3, [pc, #192]	; (8006328 <GPIO_Init+0x154>)
 8006266:	4a30      	ldr	r2, [pc, #192]	; (8006328 <GPIO_Init+0x154>)
 8006268:	6852      	ldr	r2, [r2, #4]
 800626a:	2108      	movs	r1, #8
 800626c:	438a      	bics	r2, r1
 800626e:	605a      	str	r2, [r3, #4]
	//M5_En
	GPIOB->MODER |= GPIO_MODER_MODER12_0;	//General purpose OutPut mode
 8006270:	4b2d      	ldr	r3, [pc, #180]	; (8006328 <GPIO_Init+0x154>)
 8006272:	4a2d      	ldr	r2, [pc, #180]	; (8006328 <GPIO_Init+0x154>)
 8006274:	6812      	ldr	r2, [r2, #0]
 8006276:	2180      	movs	r1, #128	; 0x80
 8006278:	0449      	lsls	r1, r1, #17
 800627a:	430a      	orrs	r2, r1
 800627c:	601a      	str	r2, [r3, #0]
	GPIOB->OTYPER &= ~GPIO_OTYPER_OT_12;	//PUSH PULL
 800627e:	4b2a      	ldr	r3, [pc, #168]	; (8006328 <GPIO_Init+0x154>)
 8006280:	4a29      	ldr	r2, [pc, #164]	; (8006328 <GPIO_Init+0x154>)
 8006282:	6852      	ldr	r2, [r2, #4]
 8006284:	4929      	ldr	r1, [pc, #164]	; (800632c <GPIO_Init+0x158>)
 8006286:	400a      	ands	r2, r1
 8006288:	605a      	str	r2, [r3, #4]
	//M6_En
	GPIOB->MODER |= GPIO_MODER_MODER13_0;	//General purpose OutPut mode
 800628a:	4b27      	ldr	r3, [pc, #156]	; (8006328 <GPIO_Init+0x154>)
 800628c:	4a26      	ldr	r2, [pc, #152]	; (8006328 <GPIO_Init+0x154>)
 800628e:	6812      	ldr	r2, [r2, #0]
 8006290:	2180      	movs	r1, #128	; 0x80
 8006292:	04c9      	lsls	r1, r1, #19
 8006294:	430a      	orrs	r2, r1
 8006296:	601a      	str	r2, [r3, #0]
	GPIOB->OTYPER &= ~GPIO_OTYPER_OT_13;	//PUSH PULL
 8006298:	4b23      	ldr	r3, [pc, #140]	; (8006328 <GPIO_Init+0x154>)
 800629a:	4a23      	ldr	r2, [pc, #140]	; (8006328 <GPIO_Init+0x154>)
 800629c:	6852      	ldr	r2, [r2, #4]
 800629e:	4924      	ldr	r1, [pc, #144]	; (8006330 <GPIO_Init+0x15c>)
 80062a0:	400a      	ands	r2, r1
 80062a2:	605a      	str	r2, [r3, #4]
	//M7_En
	GPIOB->MODER |= GPIO_MODER_MODER14_0;	//General purpose OutPut mode
 80062a4:	4b20      	ldr	r3, [pc, #128]	; (8006328 <GPIO_Init+0x154>)
 80062a6:	4a20      	ldr	r2, [pc, #128]	; (8006328 <GPIO_Init+0x154>)
 80062a8:	6812      	ldr	r2, [r2, #0]
 80062aa:	2180      	movs	r1, #128	; 0x80
 80062ac:	0549      	lsls	r1, r1, #21
 80062ae:	430a      	orrs	r2, r1
 80062b0:	601a      	str	r2, [r3, #0]
	GPIOB->OTYPER &= ~GPIO_OTYPER_OT_14;	//PUSH PULL
 80062b2:	4b1d      	ldr	r3, [pc, #116]	; (8006328 <GPIO_Init+0x154>)
 80062b4:	4a1c      	ldr	r2, [pc, #112]	; (8006328 <GPIO_Init+0x154>)
 80062b6:	6852      	ldr	r2, [r2, #4]
 80062b8:	491e      	ldr	r1, [pc, #120]	; (8006334 <GPIO_Init+0x160>)
 80062ba:	400a      	ands	r2, r1
 80062bc:	605a      	str	r2, [r3, #4]
	//M8_En
	GPIOB->MODER |= GPIO_MODER_MODER15_0;	//General purpose OutPut mode
 80062be:	4b1a      	ldr	r3, [pc, #104]	; (8006328 <GPIO_Init+0x154>)
 80062c0:	4a19      	ldr	r2, [pc, #100]	; (8006328 <GPIO_Init+0x154>)
 80062c2:	6812      	ldr	r2, [r2, #0]
 80062c4:	2180      	movs	r1, #128	; 0x80
 80062c6:	05c9      	lsls	r1, r1, #23
 80062c8:	430a      	orrs	r2, r1
 80062ca:	601a      	str	r2, [r3, #0]
	GPIOB->OTYPER &= ~GPIO_OTYPER_OT_15;	//PUSH PULL
 80062cc:	4b16      	ldr	r3, [pc, #88]	; (8006328 <GPIO_Init+0x154>)
 80062ce:	4a16      	ldr	r2, [pc, #88]	; (8006328 <GPIO_Init+0x154>)
 80062d0:	6852      	ldr	r2, [r2, #4]
 80062d2:	4914      	ldr	r1, [pc, #80]	; (8006324 <GPIO_Init+0x150>)
 80062d4:	400a      	ands	r2, r1
 80062d6:	605a      	str	r2, [r3, #4]
	//-------------------   LEDs   -------------------------------------
	//LED1 PB10 (GREEN)
	GPIOB->MODER |= GPIO_MODER_MODER10_0;	//General purpose OutPut mode
 80062d8:	4b13      	ldr	r3, [pc, #76]	; (8006328 <GPIO_Init+0x154>)
 80062da:	4a13      	ldr	r2, [pc, #76]	; (8006328 <GPIO_Init+0x154>)
 80062dc:	6812      	ldr	r2, [r2, #0]
 80062de:	2180      	movs	r1, #128	; 0x80
 80062e0:	0349      	lsls	r1, r1, #13
 80062e2:	430a      	orrs	r2, r1
 80062e4:	601a      	str	r2, [r3, #0]
	GPIOB->OTYPER &= ~GPIO_OTYPER_OT_10;	//PUSH PULL
 80062e6:	4b10      	ldr	r3, [pc, #64]	; (8006328 <GPIO_Init+0x154>)
 80062e8:	4a0f      	ldr	r2, [pc, #60]	; (8006328 <GPIO_Init+0x154>)
 80062ea:	6852      	ldr	r2, [r2, #4]
 80062ec:	4912      	ldr	r1, [pc, #72]	; (8006338 <GPIO_Init+0x164>)
 80062ee:	400a      	ands	r2, r1
 80062f0:	605a      	str	r2, [r3, #4]
	//LED2 PB11 (BLUE)
	GPIOB->MODER |= GPIO_MODER_MODER11_0;	//General purpose OutPut mode
 80062f2:	4b0d      	ldr	r3, [pc, #52]	; (8006328 <GPIO_Init+0x154>)
 80062f4:	4a0c      	ldr	r2, [pc, #48]	; (8006328 <GPIO_Init+0x154>)
 80062f6:	6812      	ldr	r2, [r2, #0]
 80062f8:	2180      	movs	r1, #128	; 0x80
 80062fa:	03c9      	lsls	r1, r1, #15
 80062fc:	430a      	orrs	r2, r1
 80062fe:	601a      	str	r2, [r3, #0]
	GPIOB->OTYPER &= ~GPIO_OTYPER_OT_11;	//PUSH PULL
 8006300:	4b09      	ldr	r3, [pc, #36]	; (8006328 <GPIO_Init+0x154>)
 8006302:	4a09      	ldr	r2, [pc, #36]	; (8006328 <GPIO_Init+0x154>)
 8006304:	6852      	ldr	r2, [r2, #4]
 8006306:	490d      	ldr	r1, [pc, #52]	; (800633c <GPIO_Init+0x168>)
 8006308:	400a      	ands	r2, r1
 800630a:	605a      	str	r2, [r3, #4]
	//----------   Motion Sensor (PB9)   ----------------------------
	GPIOB->MODER &= ~GPIO_MODER_MODER9_Msk; //Input mode
 800630c:	4b06      	ldr	r3, [pc, #24]	; (8006328 <GPIO_Init+0x154>)
 800630e:	4a06      	ldr	r2, [pc, #24]	; (8006328 <GPIO_Init+0x154>)
 8006310:	6812      	ldr	r2, [r2, #0]
 8006312:	490b      	ldr	r1, [pc, #44]	; (8006340 <GPIO_Init+0x16c>)
 8006314:	400a      	ands	r2, r1
 8006316:	601a      	str	r2, [r3, #0]

	//----------   Кнопка   ----------------------------
	//RCC->AHBENR |= RCC_AHBENR_GPIOAEN;  //Enable clock PORT A
	//GPIOA->MODER &= ~GPIO_MODER_MODER0_Msk; //Input mode
	//GPIOA->OTYPER
}
 8006318:	46c0      	nop			; (mov r8, r8)
 800631a:	46bd      	mov	sp, r7
 800631c:	bd80      	pop	{r7, pc}
 800631e:	46c0      	nop			; (mov r8, r8)
 8006320:	40021000 	.word	0x40021000
 8006324:	ffff7fff 	.word	0xffff7fff
 8006328:	48000400 	.word	0x48000400
 800632c:	ffffefff 	.word	0xffffefff
 8006330:	ffffdfff 	.word	0xffffdfff
 8006334:	ffffbfff 	.word	0xffffbfff
 8006338:	fffffbff 	.word	0xfffffbff
 800633c:	fffff7ff 	.word	0xfffff7ff
 8006340:	fff3ffff 	.word	0xfff3ffff

08006344 <PWM_Init>:


//------------------------------------------------------------------------
//---------------------------   PWM_Init   ------------------------------
//------------------------------------------------------------------------
void PWM_Init(void){
 8006344:	b580      	push	{r7, lr}
 8006346:	af00      	add	r7, sp, #0

	//----------------------   TIM3   ------------------------------------
	RCC->AHBENR|= RCC_AHBENR_GPIOAEN;
 8006348:	4bfe      	ldr	r3, [pc, #1016]	; (8006744 <PWM_Init+0x400>)
 800634a:	4afe      	ldr	r2, [pc, #1016]	; (8006744 <PWM_Init+0x400>)
 800634c:	6952      	ldr	r2, [r2, #20]
 800634e:	2180      	movs	r1, #128	; 0x80
 8006350:	0289      	lsls	r1, r1, #10
 8006352:	430a      	orrs	r2, r1
 8006354:	615a      	str	r2, [r3, #20]
	RCC->AHBENR|= RCC_AHBENR_GPIOBEN;
 8006356:	4bfb      	ldr	r3, [pc, #1004]	; (8006744 <PWM_Init+0x400>)
 8006358:	4afa      	ldr	r2, [pc, #1000]	; (8006744 <PWM_Init+0x400>)
 800635a:	6952      	ldr	r2, [r2, #20]
 800635c:	2180      	movs	r1, #128	; 0x80
 800635e:	02c9      	lsls	r1, r1, #11
 8006360:	430a      	orrs	r2, r1
 8006362:	615a      	str	r2, [r3, #20]
	RCC->APB1ENR|= RCC_APB1ENR_TIM3EN;	//Enable Clock TIM3
 8006364:	4bf7      	ldr	r3, [pc, #988]	; (8006744 <PWM_Init+0x400>)
 8006366:	4af7      	ldr	r2, [pc, #988]	; (8006744 <PWM_Init+0x400>)
 8006368:	69d2      	ldr	r2, [r2, #28]
 800636a:	2102      	movs	r1, #2
 800636c:	430a      	orrs	r2, r1
 800636e:	61da      	str	r2, [r3, #28]

	//TIM3_CH1
	GPIOA->MODER &= ~GPIO_MODER_MODER6;			//RESET MODE
 8006370:	2390      	movs	r3, #144	; 0x90
 8006372:	05db      	lsls	r3, r3, #23
 8006374:	2290      	movs	r2, #144	; 0x90
 8006376:	05d2      	lsls	r2, r2, #23
 8006378:	6812      	ldr	r2, [r2, #0]
 800637a:	49f3      	ldr	r1, [pc, #972]	; (8006748 <PWM_Init+0x404>)
 800637c:	400a      	ands	r2, r1
 800637e:	601a      	str	r2, [r3, #0]
	GPIOA->MODER|= GPIO_MODER_MODER6_1; 		//10 ALTERNATIVE FUNCTION
 8006380:	2390      	movs	r3, #144	; 0x90
 8006382:	05db      	lsls	r3, r3, #23
 8006384:	2290      	movs	r2, #144	; 0x90
 8006386:	05d2      	lsls	r2, r2, #23
 8006388:	6812      	ldr	r2, [r2, #0]
 800638a:	2180      	movs	r1, #128	; 0x80
 800638c:	0189      	lsls	r1, r1, #6
 800638e:	430a      	orrs	r2, r1
 8006390:	601a      	str	r2, [r3, #0]
	GPIOA->OTYPER &= ~GPIO_OTYPER_OT_6; 		//PUSH PULL
 8006392:	2390      	movs	r3, #144	; 0x90
 8006394:	05db      	lsls	r3, r3, #23
 8006396:	2290      	movs	r2, #144	; 0x90
 8006398:	05d2      	lsls	r2, r2, #23
 800639a:	6852      	ldr	r2, [r2, #4]
 800639c:	2140      	movs	r1, #64	; 0x40
 800639e:	438a      	bics	r2, r1
 80063a0:	605a      	str	r2, [r3, #4]
	GPIOA->OSPEEDR |=GPIO_OSPEEDER_OSPEEDR6; 	// MAX SPEED
 80063a2:	2390      	movs	r3, #144	; 0x90
 80063a4:	05db      	lsls	r3, r3, #23
 80063a6:	2290      	movs	r2, #144	; 0x90
 80063a8:	05d2      	lsls	r2, r2, #23
 80063aa:	6892      	ldr	r2, [r2, #8]
 80063ac:	21c0      	movs	r1, #192	; 0xc0
 80063ae:	0189      	lsls	r1, r1, #6
 80063b0:	430a      	orrs	r2, r1
 80063b2:	609a      	str	r2, [r3, #8]
	//TIM3_CH2
	GPIOA->MODER &= ~GPIO_MODER_MODER7;			//RESET MODE
 80063b4:	2390      	movs	r3, #144	; 0x90
 80063b6:	05db      	lsls	r3, r3, #23
 80063b8:	2290      	movs	r2, #144	; 0x90
 80063ba:	05d2      	lsls	r2, r2, #23
 80063bc:	6812      	ldr	r2, [r2, #0]
 80063be:	49e3      	ldr	r1, [pc, #908]	; (800674c <PWM_Init+0x408>)
 80063c0:	400a      	ands	r2, r1
 80063c2:	601a      	str	r2, [r3, #0]
	GPIOA->MODER|= GPIO_MODER_MODER7_1; 		//10 ALTERNATIVE FUNCTION
 80063c4:	2390      	movs	r3, #144	; 0x90
 80063c6:	05db      	lsls	r3, r3, #23
 80063c8:	2290      	movs	r2, #144	; 0x90
 80063ca:	05d2      	lsls	r2, r2, #23
 80063cc:	6812      	ldr	r2, [r2, #0]
 80063ce:	2180      	movs	r1, #128	; 0x80
 80063d0:	0209      	lsls	r1, r1, #8
 80063d2:	430a      	orrs	r2, r1
 80063d4:	601a      	str	r2, [r3, #0]
	GPIOA->OTYPER &= ~GPIO_OTYPER_OT_7; 		//PUSH PULL
 80063d6:	2390      	movs	r3, #144	; 0x90
 80063d8:	05db      	lsls	r3, r3, #23
 80063da:	2290      	movs	r2, #144	; 0x90
 80063dc:	05d2      	lsls	r2, r2, #23
 80063de:	6852      	ldr	r2, [r2, #4]
 80063e0:	2180      	movs	r1, #128	; 0x80
 80063e2:	438a      	bics	r2, r1
 80063e4:	605a      	str	r2, [r3, #4]
	GPIOA->OSPEEDR |=GPIO_OSPEEDER_OSPEEDR7; 	// MAX SPEED
 80063e6:	2390      	movs	r3, #144	; 0x90
 80063e8:	05db      	lsls	r3, r3, #23
 80063ea:	2290      	movs	r2, #144	; 0x90
 80063ec:	05d2      	lsls	r2, r2, #23
 80063ee:	6892      	ldr	r2, [r2, #8]
 80063f0:	21c0      	movs	r1, #192	; 0xc0
 80063f2:	0209      	lsls	r1, r1, #8
 80063f4:	430a      	orrs	r2, r1
 80063f6:	609a      	str	r2, [r3, #8]
	//TIM3_CH3
	GPIOB->MODER &= ~GPIO_MODER_MODER0;			//RESET MODE
 80063f8:	4bd5      	ldr	r3, [pc, #852]	; (8006750 <PWM_Init+0x40c>)
 80063fa:	4ad5      	ldr	r2, [pc, #852]	; (8006750 <PWM_Init+0x40c>)
 80063fc:	6812      	ldr	r2, [r2, #0]
 80063fe:	2103      	movs	r1, #3
 8006400:	438a      	bics	r2, r1
 8006402:	601a      	str	r2, [r3, #0]
	GPIOB->MODER|= GPIO_MODER_MODER0_1; 		//10 ALTERNATIVE FUNCTION
 8006404:	4bd2      	ldr	r3, [pc, #840]	; (8006750 <PWM_Init+0x40c>)
 8006406:	4ad2      	ldr	r2, [pc, #840]	; (8006750 <PWM_Init+0x40c>)
 8006408:	6812      	ldr	r2, [r2, #0]
 800640a:	2102      	movs	r1, #2
 800640c:	430a      	orrs	r2, r1
 800640e:	601a      	str	r2, [r3, #0]
	GPIOB->OTYPER &= ~GPIO_OTYPER_OT_0; 		//PUSH PULL
 8006410:	4bcf      	ldr	r3, [pc, #828]	; (8006750 <PWM_Init+0x40c>)
 8006412:	4acf      	ldr	r2, [pc, #828]	; (8006750 <PWM_Init+0x40c>)
 8006414:	6852      	ldr	r2, [r2, #4]
 8006416:	2101      	movs	r1, #1
 8006418:	438a      	bics	r2, r1
 800641a:	605a      	str	r2, [r3, #4]
	GPIOB->OSPEEDR |=GPIO_OSPEEDER_OSPEEDR0; 	// MAX SPEED
 800641c:	4bcc      	ldr	r3, [pc, #816]	; (8006750 <PWM_Init+0x40c>)
 800641e:	4acc      	ldr	r2, [pc, #816]	; (8006750 <PWM_Init+0x40c>)
 8006420:	6892      	ldr	r2, [r2, #8]
 8006422:	2103      	movs	r1, #3
 8006424:	430a      	orrs	r2, r1
 8006426:	609a      	str	r2, [r3, #8]
	//TIM3_CH4
	GPIOB->MODER &= ~GPIO_MODER_MODER1;			//RESET MODE
 8006428:	4bc9      	ldr	r3, [pc, #804]	; (8006750 <PWM_Init+0x40c>)
 800642a:	4ac9      	ldr	r2, [pc, #804]	; (8006750 <PWM_Init+0x40c>)
 800642c:	6812      	ldr	r2, [r2, #0]
 800642e:	210c      	movs	r1, #12
 8006430:	438a      	bics	r2, r1
 8006432:	601a      	str	r2, [r3, #0]
	GPIOB->MODER|= GPIO_MODER_MODER1_1; 		//10 ALTERNATIVE FUNCTION
 8006434:	4bc6      	ldr	r3, [pc, #792]	; (8006750 <PWM_Init+0x40c>)
 8006436:	4ac6      	ldr	r2, [pc, #792]	; (8006750 <PWM_Init+0x40c>)
 8006438:	6812      	ldr	r2, [r2, #0]
 800643a:	2108      	movs	r1, #8
 800643c:	430a      	orrs	r2, r1
 800643e:	601a      	str	r2, [r3, #0]
	GPIOB->OTYPER &= ~GPIO_OTYPER_OT_1; 		//PUSH PULL
 8006440:	4bc3      	ldr	r3, [pc, #780]	; (8006750 <PWM_Init+0x40c>)
 8006442:	4ac3      	ldr	r2, [pc, #780]	; (8006750 <PWM_Init+0x40c>)
 8006444:	6852      	ldr	r2, [r2, #4]
 8006446:	2102      	movs	r1, #2
 8006448:	438a      	bics	r2, r1
 800644a:	605a      	str	r2, [r3, #4]
	GPIOB->OSPEEDR |=GPIO_OSPEEDER_OSPEEDR1; 	// MAX SPEED
 800644c:	4bc0      	ldr	r3, [pc, #768]	; (8006750 <PWM_Init+0x40c>)
 800644e:	4ac0      	ldr	r2, [pc, #768]	; (8006750 <PWM_Init+0x40c>)
 8006450:	6892      	ldr	r2, [r2, #8]
 8006452:	210c      	movs	r1, #12
 8006454:	430a      	orrs	r2, r1
 8006456:	609a      	str	r2, [r3, #8]


	GPIOA->AFR[0] |= _VAL2FLD(GPIO_AFRL_AFSEL6, 1); //GPIOA->AFR[0] |= (0x01<< 6*4);				// PA6 ALTERNATIVE FUNCTION PWM TIM3 CH1
 8006458:	2390      	movs	r3, #144	; 0x90
 800645a:	05db      	lsls	r3, r3, #23
 800645c:	2290      	movs	r2, #144	; 0x90
 800645e:	05d2      	lsls	r2, r2, #23
 8006460:	6a12      	ldr	r2, [r2, #32]
 8006462:	2180      	movs	r1, #128	; 0x80
 8006464:	0449      	lsls	r1, r1, #17
 8006466:	430a      	orrs	r2, r1
 8006468:	621a      	str	r2, [r3, #32]
	GPIOA->AFR[0] |= _VAL2FLD(GPIO_AFRL_AFSEL7, 1); //GPIOA->AFR[0] |= (0x01<< 7*4);				// PA7 ALTERNATIVE FUNCTION PWM TIM3 CH2
 800646a:	2390      	movs	r3, #144	; 0x90
 800646c:	05db      	lsls	r3, r3, #23
 800646e:	2290      	movs	r2, #144	; 0x90
 8006470:	05d2      	lsls	r2, r2, #23
 8006472:	6a12      	ldr	r2, [r2, #32]
 8006474:	2180      	movs	r1, #128	; 0x80
 8006476:	0549      	lsls	r1, r1, #21
 8006478:	430a      	orrs	r2, r1
 800647a:	621a      	str	r2, [r3, #32]

	GPIOB->AFR[0] |= _VAL2FLD(GPIO_AFRL_AFSEL0, 1); //GPIOB->AFR[0] |= (0x01<< 0*4);				// PB0 ALTERNATIVE FUNCTION PWM TIM3 CH3
 800647c:	4bb4      	ldr	r3, [pc, #720]	; (8006750 <PWM_Init+0x40c>)
 800647e:	4ab4      	ldr	r2, [pc, #720]	; (8006750 <PWM_Init+0x40c>)
 8006480:	6a12      	ldr	r2, [r2, #32]
 8006482:	2101      	movs	r1, #1
 8006484:	430a      	orrs	r2, r1
 8006486:	621a      	str	r2, [r3, #32]
	GPIOB->AFR[0] |= _VAL2FLD(GPIO_AFRL_AFSEL1, 1); //GPIOB->AFR[0] |= (0x01 << 1*4);				// PB1 ALTERNATIVE FUNCTION PWM TIM3 CH4
 8006488:	4bb1      	ldr	r3, [pc, #708]	; (8006750 <PWM_Init+0x40c>)
 800648a:	4ab1      	ldr	r2, [pc, #708]	; (8006750 <PWM_Init+0x40c>)
 800648c:	6a12      	ldr	r2, [r2, #32]
 800648e:	2110      	movs	r1, #16
 8006490:	430a      	orrs	r2, r1
 8006492:	621a      	str	r2, [r3, #32]


	TIM3->ARR = 1000;							//Count to 1000
 8006494:	4baf      	ldr	r3, [pc, #700]	; (8006754 <PWM_Init+0x410>)
 8006496:	22fa      	movs	r2, #250	; 0xfa
 8006498:	0092      	lsls	r2, r2, #2
 800649a:	62da      	str	r2, [r3, #44]	; 0x2c
	TIM3->PSC = 48 - 1;							//65535max	Prescaler
 800649c:	4bad      	ldr	r3, [pc, #692]	; (8006754 <PWM_Init+0x410>)
 800649e:	222f      	movs	r2, #47	; 0x2f
 80064a0:	629a      	str	r2, [r3, #40]	; 0x28

	TIM3->CCR1 = 0;								//CH1 filling
 80064a2:	4bac      	ldr	r3, [pc, #688]	; (8006754 <PWM_Init+0x410>)
 80064a4:	2200      	movs	r2, #0
 80064a6:	635a      	str	r2, [r3, #52]	; 0x34
	TIM3->CCR2 = 0;								//CH2 filling
 80064a8:	4baa      	ldr	r3, [pc, #680]	; (8006754 <PWM_Init+0x410>)
 80064aa:	2200      	movs	r2, #0
 80064ac:	639a      	str	r2, [r3, #56]	; 0x38
	TIM3->CCR3 = 0;								//CH3 filling
 80064ae:	4ba9      	ldr	r3, [pc, #676]	; (8006754 <PWM_Init+0x410>)
 80064b0:	2200      	movs	r2, #0
 80064b2:	63da      	str	r2, [r3, #60]	; 0x3c
	TIM3->CCR4 = 0;								//CH4 filling
 80064b4:	4ba7      	ldr	r3, [pc, #668]	; (8006754 <PWM_Init+0x410>)
 80064b6:	2200      	movs	r2, #0
 80064b8:	641a      	str	r2, [r3, #64]	; 0x40

	TIM3->CCMR1|= TIM_CCMR1_OC1M_2 | TIM_CCMR1_OC1M_1; 			//TIM3 CH1 polarity (110 MODE)
 80064ba:	4ba6      	ldr	r3, [pc, #664]	; (8006754 <PWM_Init+0x410>)
 80064bc:	4aa5      	ldr	r2, [pc, #660]	; (8006754 <PWM_Init+0x410>)
 80064be:	6992      	ldr	r2, [r2, #24]
 80064c0:	2160      	movs	r1, #96	; 0x60
 80064c2:	430a      	orrs	r2, r1
 80064c4:	619a      	str	r2, [r3, #24]
	TIM3->CCMR1|= TIM_CCMR1_OC2M_2 | TIM_CCMR1_OC2M_1; 			//TIM3 CH2 polarity (110 MODE)
 80064c6:	4ba3      	ldr	r3, [pc, #652]	; (8006754 <PWM_Init+0x410>)
 80064c8:	4aa2      	ldr	r2, [pc, #648]	; (8006754 <PWM_Init+0x410>)
 80064ca:	6992      	ldr	r2, [r2, #24]
 80064cc:	21c0      	movs	r1, #192	; 0xc0
 80064ce:	01c9      	lsls	r1, r1, #7
 80064d0:	430a      	orrs	r2, r1
 80064d2:	619a      	str	r2, [r3, #24]

	TIM3->CCMR2|= TIM_CCMR2_OC4M_2 | TIM_CCMR2_OC4M_1; 			//TIM3 CH4 polarity (110 MODE)
 80064d4:	4b9f      	ldr	r3, [pc, #636]	; (8006754 <PWM_Init+0x410>)
 80064d6:	4a9f      	ldr	r2, [pc, #636]	; (8006754 <PWM_Init+0x410>)
 80064d8:	69d2      	ldr	r2, [r2, #28]
 80064da:	21c0      	movs	r1, #192	; 0xc0
 80064dc:	01c9      	lsls	r1, r1, #7
 80064de:	430a      	orrs	r2, r1
 80064e0:	61da      	str	r2, [r3, #28]
	TIM3->CCMR2|= TIM_CCMR2_OC3M_2 | TIM_CCMR2_OC3M_1; 			//TIM3 CH3 polarity (110 MODE)
 80064e2:	4b9c      	ldr	r3, [pc, #624]	; (8006754 <PWM_Init+0x410>)
 80064e4:	4a9b      	ldr	r2, [pc, #620]	; (8006754 <PWM_Init+0x410>)
 80064e6:	69d2      	ldr	r2, [r2, #28]
 80064e8:	2160      	movs	r1, #96	; 0x60
 80064ea:	430a      	orrs	r2, r1
 80064ec:	61da      	str	r2, [r3, #28]

	TIM3->CCER |= TIM_CCER_CC1E ; 				//Capture/Compare 1 output enable
 80064ee:	4b99      	ldr	r3, [pc, #612]	; (8006754 <PWM_Init+0x410>)
 80064f0:	4a98      	ldr	r2, [pc, #608]	; (8006754 <PWM_Init+0x410>)
 80064f2:	6a12      	ldr	r2, [r2, #32]
 80064f4:	2101      	movs	r1, #1
 80064f6:	430a      	orrs	r2, r1
 80064f8:	621a      	str	r2, [r3, #32]
	TIM3->CCER |= TIM_CCER_CC2E ; 				//Capture/Compare 2 output enable
 80064fa:	4b96      	ldr	r3, [pc, #600]	; (8006754 <PWM_Init+0x410>)
 80064fc:	4a95      	ldr	r2, [pc, #596]	; (8006754 <PWM_Init+0x410>)
 80064fe:	6a12      	ldr	r2, [r2, #32]
 8006500:	2110      	movs	r1, #16
 8006502:	430a      	orrs	r2, r1
 8006504:	621a      	str	r2, [r3, #32]
	TIM3->CCER |= TIM_CCER_CC3E;				//Capture/Compare 3 output enable
 8006506:	4b93      	ldr	r3, [pc, #588]	; (8006754 <PWM_Init+0x410>)
 8006508:	4a92      	ldr	r2, [pc, #584]	; (8006754 <PWM_Init+0x410>)
 800650a:	6a12      	ldr	r2, [r2, #32]
 800650c:	2180      	movs	r1, #128	; 0x80
 800650e:	0049      	lsls	r1, r1, #1
 8006510:	430a      	orrs	r2, r1
 8006512:	621a      	str	r2, [r3, #32]
	TIM3->CCER |= TIM_CCER_CC4E;				//Capture/Compare 4 output enable
 8006514:	4b8f      	ldr	r3, [pc, #572]	; (8006754 <PWM_Init+0x410>)
 8006516:	4a8f      	ldr	r2, [pc, #572]	; (8006754 <PWM_Init+0x410>)
 8006518:	6a12      	ldr	r2, [r2, #32]
 800651a:	2180      	movs	r1, #128	; 0x80
 800651c:	0149      	lsls	r1, r1, #5
 800651e:	430a      	orrs	r2, r1
 8006520:	621a      	str	r2, [r3, #32]

	TIM3->CCER &= ~TIM_CCER_CC1P; 				//Active polarity
 8006522:	4b8c      	ldr	r3, [pc, #560]	; (8006754 <PWM_Init+0x410>)
 8006524:	4a8b      	ldr	r2, [pc, #556]	; (8006754 <PWM_Init+0x410>)
 8006526:	6a12      	ldr	r2, [r2, #32]
 8006528:	2102      	movs	r1, #2
 800652a:	438a      	bics	r2, r1
 800652c:	621a      	str	r2, [r3, #32]
	TIM3->CCER &= ~TIM_CCER_CC2P; 				//Active polarity
 800652e:	4b89      	ldr	r3, [pc, #548]	; (8006754 <PWM_Init+0x410>)
 8006530:	4a88      	ldr	r2, [pc, #544]	; (8006754 <PWM_Init+0x410>)
 8006532:	6a12      	ldr	r2, [r2, #32]
 8006534:	2120      	movs	r1, #32
 8006536:	438a      	bics	r2, r1
 8006538:	621a      	str	r2, [r3, #32]
	TIM3->CCER &= ~TIM_CCER_CC3P; 				//Active polarity
 800653a:	4b86      	ldr	r3, [pc, #536]	; (8006754 <PWM_Init+0x410>)
 800653c:	4a85      	ldr	r2, [pc, #532]	; (8006754 <PWM_Init+0x410>)
 800653e:	6a12      	ldr	r2, [r2, #32]
 8006540:	4985      	ldr	r1, [pc, #532]	; (8006758 <PWM_Init+0x414>)
 8006542:	400a      	ands	r2, r1
 8006544:	621a      	str	r2, [r3, #32]
	TIM3->CCER &= ~TIM_CCER_CC4P; 				//Active polarity
 8006546:	4b83      	ldr	r3, [pc, #524]	; (8006754 <PWM_Init+0x410>)
 8006548:	4a82      	ldr	r2, [pc, #520]	; (8006754 <PWM_Init+0x410>)
 800654a:	6a12      	ldr	r2, [r2, #32]
 800654c:	4983      	ldr	r1, [pc, #524]	; (800675c <PWM_Init+0x418>)
 800654e:	400a      	ands	r2, r1
 8006550:	621a      	str	r2, [r3, #32]

	TIM3->CR1 &= ~TIM_CR1_DIR;		 			//Count direction.
 8006552:	4b80      	ldr	r3, [pc, #512]	; (8006754 <PWM_Init+0x410>)
 8006554:	4a7f      	ldr	r2, [pc, #508]	; (8006754 <PWM_Init+0x410>)
 8006556:	6812      	ldr	r2, [r2, #0]
 8006558:	2110      	movs	r1, #16
 800655a:	438a      	bics	r2, r1
 800655c:	601a      	str	r2, [r3, #0]
	TIM3->CR1 |= TIM_CR1_CEN;
 800655e:	4b7d      	ldr	r3, [pc, #500]	; (8006754 <PWM_Init+0x410>)
 8006560:	4a7c      	ldr	r2, [pc, #496]	; (8006754 <PWM_Init+0x410>)
 8006562:	6812      	ldr	r2, [r2, #0]
 8006564:	2101      	movs	r1, #1
 8006566:	430a      	orrs	r2, r1
 8006568:	601a      	str	r2, [r3, #0]

	//----------------------   TIM1   ------------------------------------
	RCC->AHBENR|= RCC_AHBENR_GPIOAEN;
 800656a:	4b76      	ldr	r3, [pc, #472]	; (8006744 <PWM_Init+0x400>)
 800656c:	4a75      	ldr	r2, [pc, #468]	; (8006744 <PWM_Init+0x400>)
 800656e:	6952      	ldr	r2, [r2, #20]
 8006570:	2180      	movs	r1, #128	; 0x80
 8006572:	0289      	lsls	r1, r1, #10
 8006574:	430a      	orrs	r2, r1
 8006576:	615a      	str	r2, [r3, #20]
	RCC->APB2ENR|= RCC_APB2ENR_TIM1EN;				//Enable Clock TIM1
 8006578:	4b72      	ldr	r3, [pc, #456]	; (8006744 <PWM_Init+0x400>)
 800657a:	4a72      	ldr	r2, [pc, #456]	; (8006744 <PWM_Init+0x400>)
 800657c:	6992      	ldr	r2, [r2, #24]
 800657e:	2180      	movs	r1, #128	; 0x80
 8006580:	0109      	lsls	r1, r1, #4
 8006582:	430a      	orrs	r2, r1
 8006584:	619a      	str	r2, [r3, #24]

	GPIOA->MODER &= ~GPIO_MODER_MODER8;				//RESET MODE
 8006586:	2390      	movs	r3, #144	; 0x90
 8006588:	05db      	lsls	r3, r3, #23
 800658a:	2290      	movs	r2, #144	; 0x90
 800658c:	05d2      	lsls	r2, r2, #23
 800658e:	6812      	ldr	r2, [r2, #0]
 8006590:	4973      	ldr	r1, [pc, #460]	; (8006760 <PWM_Init+0x41c>)
 8006592:	400a      	ands	r2, r1
 8006594:	601a      	str	r2, [r3, #0]
	GPIOA->MODER|= GPIO_MODER_MODER8_1; 			//10 ALTERNATIVE FUNCTION
 8006596:	2390      	movs	r3, #144	; 0x90
 8006598:	05db      	lsls	r3, r3, #23
 800659a:	2290      	movs	r2, #144	; 0x90
 800659c:	05d2      	lsls	r2, r2, #23
 800659e:	6812      	ldr	r2, [r2, #0]
 80065a0:	2180      	movs	r1, #128	; 0x80
 80065a2:	0289      	lsls	r1, r1, #10
 80065a4:	430a      	orrs	r2, r1
 80065a6:	601a      	str	r2, [r3, #0]
	GPIOA->OTYPER &= ~GPIO_OTYPER_OT_8; 			//PUSH PULL
 80065a8:	2390      	movs	r3, #144	; 0x90
 80065aa:	05db      	lsls	r3, r3, #23
 80065ac:	2290      	movs	r2, #144	; 0x90
 80065ae:	05d2      	lsls	r2, r2, #23
 80065b0:	6852      	ldr	r2, [r2, #4]
 80065b2:	496c      	ldr	r1, [pc, #432]	; (8006764 <PWM_Init+0x420>)
 80065b4:	400a      	ands	r2, r1
 80065b6:	605a      	str	r2, [r3, #4]
	GPIOA->OSPEEDR |=GPIO_OSPEEDER_OSPEEDR8; 		// MAX SPEED
 80065b8:	2390      	movs	r3, #144	; 0x90
 80065ba:	05db      	lsls	r3, r3, #23
 80065bc:	2290      	movs	r2, #144	; 0x90
 80065be:	05d2      	lsls	r2, r2, #23
 80065c0:	6892      	ldr	r2, [r2, #8]
 80065c2:	21c0      	movs	r1, #192	; 0xc0
 80065c4:	0289      	lsls	r1, r1, #10
 80065c6:	430a      	orrs	r2, r1
 80065c8:	609a      	str	r2, [r3, #8]

	GPIOA->MODER &= ~GPIO_MODER_MODER9;				//RESET MODE
 80065ca:	2390      	movs	r3, #144	; 0x90
 80065cc:	05db      	lsls	r3, r3, #23
 80065ce:	2290      	movs	r2, #144	; 0x90
 80065d0:	05d2      	lsls	r2, r2, #23
 80065d2:	6812      	ldr	r2, [r2, #0]
 80065d4:	4964      	ldr	r1, [pc, #400]	; (8006768 <PWM_Init+0x424>)
 80065d6:	400a      	ands	r2, r1
 80065d8:	601a      	str	r2, [r3, #0]
	GPIOA->MODER|= GPIO_MODER_MODER9_1; 			//10 ALTERNATIVE FUNCTION
 80065da:	2390      	movs	r3, #144	; 0x90
 80065dc:	05db      	lsls	r3, r3, #23
 80065de:	2290      	movs	r2, #144	; 0x90
 80065e0:	05d2      	lsls	r2, r2, #23
 80065e2:	6812      	ldr	r2, [r2, #0]
 80065e4:	2180      	movs	r1, #128	; 0x80
 80065e6:	0309      	lsls	r1, r1, #12
 80065e8:	430a      	orrs	r2, r1
 80065ea:	601a      	str	r2, [r3, #0]
	GPIOA->OTYPER &= ~GPIO_OTYPER_OT_9; 			//PUSH PULL
 80065ec:	2390      	movs	r3, #144	; 0x90
 80065ee:	05db      	lsls	r3, r3, #23
 80065f0:	2290      	movs	r2, #144	; 0x90
 80065f2:	05d2      	lsls	r2, r2, #23
 80065f4:	6852      	ldr	r2, [r2, #4]
 80065f6:	4958      	ldr	r1, [pc, #352]	; (8006758 <PWM_Init+0x414>)
 80065f8:	400a      	ands	r2, r1
 80065fa:	605a      	str	r2, [r3, #4]
	GPIOA->OSPEEDR |=GPIO_OSPEEDER_OSPEEDR9; 		// MAX SPEED
 80065fc:	2390      	movs	r3, #144	; 0x90
 80065fe:	05db      	lsls	r3, r3, #23
 8006600:	2290      	movs	r2, #144	; 0x90
 8006602:	05d2      	lsls	r2, r2, #23
 8006604:	6892      	ldr	r2, [r2, #8]
 8006606:	21c0      	movs	r1, #192	; 0xc0
 8006608:	0309      	lsls	r1, r1, #12
 800660a:	430a      	orrs	r2, r1
 800660c:	609a      	str	r2, [r3, #8]

	GPIOA->MODER &= ~GPIO_MODER_MODER10;			//RESET MODE
 800660e:	2390      	movs	r3, #144	; 0x90
 8006610:	05db      	lsls	r3, r3, #23
 8006612:	2290      	movs	r2, #144	; 0x90
 8006614:	05d2      	lsls	r2, r2, #23
 8006616:	6812      	ldr	r2, [r2, #0]
 8006618:	4954      	ldr	r1, [pc, #336]	; (800676c <PWM_Init+0x428>)
 800661a:	400a      	ands	r2, r1
 800661c:	601a      	str	r2, [r3, #0]
	GPIOA->MODER|= GPIO_MODER_MODER10_1; 			//10 ALTERNATIVE FUNCTION
 800661e:	2390      	movs	r3, #144	; 0x90
 8006620:	05db      	lsls	r3, r3, #23
 8006622:	2290      	movs	r2, #144	; 0x90
 8006624:	05d2      	lsls	r2, r2, #23
 8006626:	6812      	ldr	r2, [r2, #0]
 8006628:	2180      	movs	r1, #128	; 0x80
 800662a:	0389      	lsls	r1, r1, #14
 800662c:	430a      	orrs	r2, r1
 800662e:	601a      	str	r2, [r3, #0]
	GPIOA->OTYPER &= ~GPIO_OTYPER_OT_10; 			//PUSH PULL
 8006630:	2390      	movs	r3, #144	; 0x90
 8006632:	05db      	lsls	r3, r3, #23
 8006634:	2290      	movs	r2, #144	; 0x90
 8006636:	05d2      	lsls	r2, r2, #23
 8006638:	6852      	ldr	r2, [r2, #4]
 800663a:	494d      	ldr	r1, [pc, #308]	; (8006770 <PWM_Init+0x42c>)
 800663c:	400a      	ands	r2, r1
 800663e:	605a      	str	r2, [r3, #4]
	GPIOA->OSPEEDR |=GPIO_OSPEEDER_OSPEEDR10; 		// MAX SPEED
 8006640:	2390      	movs	r3, #144	; 0x90
 8006642:	05db      	lsls	r3, r3, #23
 8006644:	2290      	movs	r2, #144	; 0x90
 8006646:	05d2      	lsls	r2, r2, #23
 8006648:	6892      	ldr	r2, [r2, #8]
 800664a:	21c0      	movs	r1, #192	; 0xc0
 800664c:	0389      	lsls	r1, r1, #14
 800664e:	430a      	orrs	r2, r1
 8006650:	609a      	str	r2, [r3, #8]

	GPIOA->MODER &= ~GPIO_MODER_MODER11;			//RESET MODE
 8006652:	2390      	movs	r3, #144	; 0x90
 8006654:	05db      	lsls	r3, r3, #23
 8006656:	2290      	movs	r2, #144	; 0x90
 8006658:	05d2      	lsls	r2, r2, #23
 800665a:	6812      	ldr	r2, [r2, #0]
 800665c:	4945      	ldr	r1, [pc, #276]	; (8006774 <PWM_Init+0x430>)
 800665e:	400a      	ands	r2, r1
 8006660:	601a      	str	r2, [r3, #0]
	GPIOA->MODER|= GPIO_MODER_MODER11_1; 			//10 ALTERNATIVE FUNCTION
 8006662:	2390      	movs	r3, #144	; 0x90
 8006664:	05db      	lsls	r3, r3, #23
 8006666:	2290      	movs	r2, #144	; 0x90
 8006668:	05d2      	lsls	r2, r2, #23
 800666a:	6812      	ldr	r2, [r2, #0]
 800666c:	2180      	movs	r1, #128	; 0x80
 800666e:	0409      	lsls	r1, r1, #16
 8006670:	430a      	orrs	r2, r1
 8006672:	601a      	str	r2, [r3, #0]
	GPIOA->OTYPER &= ~GPIO_OTYPER_OT_11; 			//PUSH PULL
 8006674:	2390      	movs	r3, #144	; 0x90
 8006676:	05db      	lsls	r3, r3, #23
 8006678:	2290      	movs	r2, #144	; 0x90
 800667a:	05d2      	lsls	r2, r2, #23
 800667c:	6852      	ldr	r2, [r2, #4]
 800667e:	493e      	ldr	r1, [pc, #248]	; (8006778 <PWM_Init+0x434>)
 8006680:	400a      	ands	r2, r1
 8006682:	605a      	str	r2, [r3, #4]
	GPIOA->OSPEEDR |=GPIO_OSPEEDER_OSPEEDR11; 		// MAX SPEED
 8006684:	2390      	movs	r3, #144	; 0x90
 8006686:	05db      	lsls	r3, r3, #23
 8006688:	2290      	movs	r2, #144	; 0x90
 800668a:	05d2      	lsls	r2, r2, #23
 800668c:	6892      	ldr	r2, [r2, #8]
 800668e:	21c0      	movs	r1, #192	; 0xc0
 8006690:	0409      	lsls	r1, r1, #16
 8006692:	430a      	orrs	r2, r1
 8006694:	609a      	str	r2, [r3, #8]


	GPIOA->AFR[1] &= ~GPIO_AFRH_AFSEL8;
 8006696:	2390      	movs	r3, #144	; 0x90
 8006698:	05db      	lsls	r3, r3, #23
 800669a:	2290      	movs	r2, #144	; 0x90
 800669c:	05d2      	lsls	r2, r2, #23
 800669e:	6a52      	ldr	r2, [r2, #36]	; 0x24
 80066a0:	210f      	movs	r1, #15
 80066a2:	438a      	bics	r2, r1
 80066a4:	625a      	str	r2, [r3, #36]	; 0x24
	GPIOA->AFR[1] &= ~GPIO_AFRH_AFSEL9;
 80066a6:	2390      	movs	r3, #144	; 0x90
 80066a8:	05db      	lsls	r3, r3, #23
 80066aa:	2290      	movs	r2, #144	; 0x90
 80066ac:	05d2      	lsls	r2, r2, #23
 80066ae:	6a52      	ldr	r2, [r2, #36]	; 0x24
 80066b0:	21f0      	movs	r1, #240	; 0xf0
 80066b2:	438a      	bics	r2, r1
 80066b4:	625a      	str	r2, [r3, #36]	; 0x24
	GPIOA->AFR[1] &= ~GPIO_AFRH_AFSEL10;
 80066b6:	2390      	movs	r3, #144	; 0x90
 80066b8:	05db      	lsls	r3, r3, #23
 80066ba:	2290      	movs	r2, #144	; 0x90
 80066bc:	05d2      	lsls	r2, r2, #23
 80066be:	6a52      	ldr	r2, [r2, #36]	; 0x24
 80066c0:	492e      	ldr	r1, [pc, #184]	; (800677c <PWM_Init+0x438>)
 80066c2:	400a      	ands	r2, r1
 80066c4:	625a      	str	r2, [r3, #36]	; 0x24
	GPIOA->AFR[1] &= ~GPIO_AFRH_AFSEL11;
 80066c6:	2390      	movs	r3, #144	; 0x90
 80066c8:	05db      	lsls	r3, r3, #23
 80066ca:	2290      	movs	r2, #144	; 0x90
 80066cc:	05d2      	lsls	r2, r2, #23
 80066ce:	6a52      	ldr	r2, [r2, #36]	; 0x24
 80066d0:	492b      	ldr	r1, [pc, #172]	; (8006780 <PWM_Init+0x43c>)
 80066d2:	400a      	ands	r2, r1
 80066d4:	625a      	str	r2, [r3, #36]	; 0x24

	GPIOA->AFR[1] |= _VAL2FLD(GPIO_AFRH_AFSEL8, 2);		//GPIOA->AFR[1] |= (0b10 << 0*4);	// PA8 ALTERNATIVE FUNCTION PWM TIM1 CH1
 80066d6:	2390      	movs	r3, #144	; 0x90
 80066d8:	05db      	lsls	r3, r3, #23
 80066da:	2290      	movs	r2, #144	; 0x90
 80066dc:	05d2      	lsls	r2, r2, #23
 80066de:	6a52      	ldr	r2, [r2, #36]	; 0x24
 80066e0:	2102      	movs	r1, #2
 80066e2:	430a      	orrs	r2, r1
 80066e4:	625a      	str	r2, [r3, #36]	; 0x24
	GPIOA->AFR[1] |= _VAL2FLD(GPIO_AFRH_AFSEL9, 2);		//GPIOA->AFR[1] |= (0b10 << 1*4); 	// PA9 ALTERNATIVE FUNCTION PWM TIM1 CH2
 80066e6:	2390      	movs	r3, #144	; 0x90
 80066e8:	05db      	lsls	r3, r3, #23
 80066ea:	2290      	movs	r2, #144	; 0x90
 80066ec:	05d2      	lsls	r2, r2, #23
 80066ee:	6a52      	ldr	r2, [r2, #36]	; 0x24
 80066f0:	2120      	movs	r1, #32
 80066f2:	430a      	orrs	r2, r1
 80066f4:	625a      	str	r2, [r3, #36]	; 0x24
	GPIOA->AFR[1] |= _VAL2FLD(GPIO_AFRH_AFSEL10, 2);	//GPIOA->AFR[1] |= (0b10 << 2*4);	// PA10 ALTERNATIVE FUNCTION PWM TIM1 CH3
 80066f6:	2390      	movs	r3, #144	; 0x90
 80066f8:	05db      	lsls	r3, r3, #23
 80066fa:	2290      	movs	r2, #144	; 0x90
 80066fc:	05d2      	lsls	r2, r2, #23
 80066fe:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8006700:	2180      	movs	r1, #128	; 0x80
 8006702:	0089      	lsls	r1, r1, #2
 8006704:	430a      	orrs	r2, r1
 8006706:	625a      	str	r2, [r3, #36]	; 0x24
	GPIOA->AFR[1] |= _VAL2FLD(GPIO_AFRH_AFSEL11, 2);	//GPIOA->AFR[1] |= (0b10 << 3*4);	// PA11 ALTERNATIVE FUNCTION PWM TIM1 CH4
 8006708:	2390      	movs	r3, #144	; 0x90
 800670a:	05db      	lsls	r3, r3, #23
 800670c:	2290      	movs	r2, #144	; 0x90
 800670e:	05d2      	lsls	r2, r2, #23
 8006710:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8006712:	2180      	movs	r1, #128	; 0x80
 8006714:	0189      	lsls	r1, r1, #6
 8006716:	430a      	orrs	r2, r1
 8006718:	625a      	str	r2, [r3, #36]	; 0x24

	TIM1->ARR = 1000;													//Count to 1000
 800671a:	4b1a      	ldr	r3, [pc, #104]	; (8006784 <PWM_Init+0x440>)
 800671c:	22fa      	movs	r2, #250	; 0xfa
 800671e:	0092      	lsls	r2, r2, #2
 8006720:	62da      	str	r2, [r3, #44]	; 0x2c
	TIM1->PSC = 48 - 1;												//65535max	Prescaler
 8006722:	4b18      	ldr	r3, [pc, #96]	; (8006784 <PWM_Init+0x440>)
 8006724:	222f      	movs	r2, #47	; 0x2f
 8006726:	629a      	str	r2, [r3, #40]	; 0x28
	TIM1->CCR1 = 0;	//CH1 filling
 8006728:	4b16      	ldr	r3, [pc, #88]	; (8006784 <PWM_Init+0x440>)
 800672a:	2200      	movs	r2, #0
 800672c:	635a      	str	r2, [r3, #52]	; 0x34
	TIM1->CCR2 = 0;	//CH2 filling
 800672e:	4b15      	ldr	r3, [pc, #84]	; (8006784 <PWM_Init+0x440>)
 8006730:	2200      	movs	r2, #0
 8006732:	639a      	str	r2, [r3, #56]	; 0x38
	TIM1->CCR3 = 0;	//CH1 filling
 8006734:	4b13      	ldr	r3, [pc, #76]	; (8006784 <PWM_Init+0x440>)
 8006736:	2200      	movs	r2, #0
 8006738:	63da      	str	r2, [r3, #60]	; 0x3c
	TIM1->CCR4 = 0;	//CH2 filling
 800673a:	4b12      	ldr	r3, [pc, #72]	; (8006784 <PWM_Init+0x440>)
 800673c:	2200      	movs	r2, #0
 800673e:	641a      	str	r2, [r3, #64]	; 0x40
 8006740:	e022      	b.n	8006788 <PWM_Init+0x444>
 8006742:	46c0      	nop			; (mov r8, r8)
 8006744:	40021000 	.word	0x40021000
 8006748:	ffffcfff 	.word	0xffffcfff
 800674c:	ffff3fff 	.word	0xffff3fff
 8006750:	48000400 	.word	0x48000400
 8006754:	40000400 	.word	0x40000400
 8006758:	fffffdff 	.word	0xfffffdff
 800675c:	ffffdfff 	.word	0xffffdfff
 8006760:	fffcffff 	.word	0xfffcffff
 8006764:	fffffeff 	.word	0xfffffeff
 8006768:	fff3ffff 	.word	0xfff3ffff
 800676c:	ffcfffff 	.word	0xffcfffff
 8006770:	fffffbff 	.word	0xfffffbff
 8006774:	ff3fffff 	.word	0xff3fffff
 8006778:	fffff7ff 	.word	0xfffff7ff
 800677c:	fffff0ff 	.word	0xfffff0ff
 8006780:	ffff0fff 	.word	0xffff0fff
 8006784:	40012c00 	.word	0x40012c00


	TIM1->CCMR1|= TIM_CCMR1_OC1M_2 | TIM_CCMR1_OC1M_1; 									//TIM1 CH1 polarity (110 MODE)
 8006788:	4b30      	ldr	r3, [pc, #192]	; (800684c <PWM_Init+0x508>)
 800678a:	4a30      	ldr	r2, [pc, #192]	; (800684c <PWM_Init+0x508>)
 800678c:	6992      	ldr	r2, [r2, #24]
 800678e:	2160      	movs	r1, #96	; 0x60
 8006790:	430a      	orrs	r2, r1
 8006792:	619a      	str	r2, [r3, #24]
	TIM1->CCMR1|= TIM_CCMR1_OC2M_2 | TIM_CCMR1_OC2M_1; 									//TIM1 CH2 polarity (110 MODE)
 8006794:	4b2d      	ldr	r3, [pc, #180]	; (800684c <PWM_Init+0x508>)
 8006796:	4a2d      	ldr	r2, [pc, #180]	; (800684c <PWM_Init+0x508>)
 8006798:	6992      	ldr	r2, [r2, #24]
 800679a:	21c0      	movs	r1, #192	; 0xc0
 800679c:	01c9      	lsls	r1, r1, #7
 800679e:	430a      	orrs	r2, r1
 80067a0:	619a      	str	r2, [r3, #24]

	TIM1->CCMR2|= TIM_CCMR2_OC3M_2 | TIM_CCMR2_OC3M_1; 									//TIM1 CH3 polarity (110 MODE)
 80067a2:	4b2a      	ldr	r3, [pc, #168]	; (800684c <PWM_Init+0x508>)
 80067a4:	4a29      	ldr	r2, [pc, #164]	; (800684c <PWM_Init+0x508>)
 80067a6:	69d2      	ldr	r2, [r2, #28]
 80067a8:	2160      	movs	r1, #96	; 0x60
 80067aa:	430a      	orrs	r2, r1
 80067ac:	61da      	str	r2, [r3, #28]
	TIM1->CCMR2|= TIM_CCMR2_OC4M_2 | TIM_CCMR2_OC4M_1; 									//TIM1 CH4 polarity (110 MODE)
 80067ae:	4b27      	ldr	r3, [pc, #156]	; (800684c <PWM_Init+0x508>)
 80067b0:	4a26      	ldr	r2, [pc, #152]	; (800684c <PWM_Init+0x508>)
 80067b2:	69d2      	ldr	r2, [r2, #28]
 80067b4:	21c0      	movs	r1, #192	; 0xc0
 80067b6:	01c9      	lsls	r1, r1, #7
 80067b8:	430a      	orrs	r2, r1
 80067ba:	61da      	str	r2, [r3, #28]


	//TIM1->CCMR1|= TIM_CCMR1_OC1PE;			//Output Compare preload enable
	TIM1->BDTR |= TIM_BDTR_MOE;					//Main output enable
 80067bc:	4b23      	ldr	r3, [pc, #140]	; (800684c <PWM_Init+0x508>)
 80067be:	4a23      	ldr	r2, [pc, #140]	; (800684c <PWM_Init+0x508>)
 80067c0:	6c52      	ldr	r2, [r2, #68]	; 0x44
 80067c2:	2180      	movs	r1, #128	; 0x80
 80067c4:	0209      	lsls	r1, r1, #8
 80067c6:	430a      	orrs	r2, r1
 80067c8:	645a      	str	r2, [r3, #68]	; 0x44

	TIM1->CCER |= TIM_CCER_CC1E;				//Capture/Compare 4 output enable
 80067ca:	4b20      	ldr	r3, [pc, #128]	; (800684c <PWM_Init+0x508>)
 80067cc:	4a1f      	ldr	r2, [pc, #124]	; (800684c <PWM_Init+0x508>)
 80067ce:	6a12      	ldr	r2, [r2, #32]
 80067d0:	2101      	movs	r1, #1
 80067d2:	430a      	orrs	r2, r1
 80067d4:	621a      	str	r2, [r3, #32]
	TIM1->CCER |= TIM_CCER_CC2E;				//Capture/Compare 4 output enable
 80067d6:	4b1d      	ldr	r3, [pc, #116]	; (800684c <PWM_Init+0x508>)
 80067d8:	4a1c      	ldr	r2, [pc, #112]	; (800684c <PWM_Init+0x508>)
 80067da:	6a12      	ldr	r2, [r2, #32]
 80067dc:	2110      	movs	r1, #16
 80067de:	430a      	orrs	r2, r1
 80067e0:	621a      	str	r2, [r3, #32]
	TIM1->CCER |= TIM_CCER_CC3E;				//Capture/Compare 4 output enable
 80067e2:	4b1a      	ldr	r3, [pc, #104]	; (800684c <PWM_Init+0x508>)
 80067e4:	4a19      	ldr	r2, [pc, #100]	; (800684c <PWM_Init+0x508>)
 80067e6:	6a12      	ldr	r2, [r2, #32]
 80067e8:	2180      	movs	r1, #128	; 0x80
 80067ea:	0049      	lsls	r1, r1, #1
 80067ec:	430a      	orrs	r2, r1
 80067ee:	621a      	str	r2, [r3, #32]
	TIM1->CCER |= TIM_CCER_CC4E;				//Capture/Compare 4 output enable
 80067f0:	4b16      	ldr	r3, [pc, #88]	; (800684c <PWM_Init+0x508>)
 80067f2:	4a16      	ldr	r2, [pc, #88]	; (800684c <PWM_Init+0x508>)
 80067f4:	6a12      	ldr	r2, [r2, #32]
 80067f6:	2180      	movs	r1, #128	; 0x80
 80067f8:	0149      	lsls	r1, r1, #5
 80067fa:	430a      	orrs	r2, r1
 80067fc:	621a      	str	r2, [r3, #32]

	TIM1->CCER &= ~TIM_CCER_CC1P; 				//Active polarity
 80067fe:	4b13      	ldr	r3, [pc, #76]	; (800684c <PWM_Init+0x508>)
 8006800:	4a12      	ldr	r2, [pc, #72]	; (800684c <PWM_Init+0x508>)
 8006802:	6a12      	ldr	r2, [r2, #32]
 8006804:	2102      	movs	r1, #2
 8006806:	438a      	bics	r2, r1
 8006808:	621a      	str	r2, [r3, #32]
	TIM1->CCER &= ~TIM_CCER_CC2P; 				//Active polarity
 800680a:	4b10      	ldr	r3, [pc, #64]	; (800684c <PWM_Init+0x508>)
 800680c:	4a0f      	ldr	r2, [pc, #60]	; (800684c <PWM_Init+0x508>)
 800680e:	6a12      	ldr	r2, [r2, #32]
 8006810:	2120      	movs	r1, #32
 8006812:	438a      	bics	r2, r1
 8006814:	621a      	str	r2, [r3, #32]
	TIM1->CCER &= ~TIM_CCER_CC3P; 				//Active polarity
 8006816:	4b0d      	ldr	r3, [pc, #52]	; (800684c <PWM_Init+0x508>)
 8006818:	4a0c      	ldr	r2, [pc, #48]	; (800684c <PWM_Init+0x508>)
 800681a:	6a12      	ldr	r2, [r2, #32]
 800681c:	490c      	ldr	r1, [pc, #48]	; (8006850 <PWM_Init+0x50c>)
 800681e:	400a      	ands	r2, r1
 8006820:	621a      	str	r2, [r3, #32]
	TIM1->CCER &= ~TIM_CCER_CC4P; 				//Active polarity
 8006822:	4b0a      	ldr	r3, [pc, #40]	; (800684c <PWM_Init+0x508>)
 8006824:	4a09      	ldr	r2, [pc, #36]	; (800684c <PWM_Init+0x508>)
 8006826:	6a12      	ldr	r2, [r2, #32]
 8006828:	490a      	ldr	r1, [pc, #40]	; (8006854 <PWM_Init+0x510>)
 800682a:	400a      	ands	r2, r1
 800682c:	621a      	str	r2, [r3, #32]

	TIM1->CR1 &= ~TIM_CR1_DIR;		 						//Count direction.
 800682e:	4b07      	ldr	r3, [pc, #28]	; (800684c <PWM_Init+0x508>)
 8006830:	4a06      	ldr	r2, [pc, #24]	; (800684c <PWM_Init+0x508>)
 8006832:	6812      	ldr	r2, [r2, #0]
 8006834:	2110      	movs	r1, #16
 8006836:	438a      	bics	r2, r1
 8006838:	601a      	str	r2, [r3, #0]
	TIM1->CR1 |= TIM_CR1_CEN;
 800683a:	4b04      	ldr	r3, [pc, #16]	; (800684c <PWM_Init+0x508>)
 800683c:	4a03      	ldr	r2, [pc, #12]	; (800684c <PWM_Init+0x508>)
 800683e:	6812      	ldr	r2, [r2, #0]
 8006840:	2101      	movs	r1, #1
 8006842:	430a      	orrs	r2, r1
 8006844:	601a      	str	r2, [r3, #0]


}
 8006846:	46c0      	nop			; (mov r8, r8)
 8006848:	46bd      	mov	sp, r7
 800684a:	bd80      	pop	{r7, pc}
 800684c:	40012c00 	.word	0x40012c00
 8006850:	fffffdff 	.word	0xfffffdff
 8006854:	ffffdfff 	.word	0xffffdfff

08006858 <main>:

void vTask_MAIN (void *argument);
void vTask_CONTR (void *argument);


int main (void) {
 8006858:	b580      	push	{r7, lr}
 800685a:	b082      	sub	sp, #8
 800685c:	af02      	add	r7, sp, #8
	//SystemInit();  // CMSS function that set the clock frequency

	// По умолчанию считает, что внешний кварц 8МГЦ, но можно добавить
	// в stm32f1xx.h #define HSE_VALUE 12000000U и переназначить кварц.

	RCC_Init();
 800685e:	f7ff fb25 	bl	8005eac <RCC_Init>
	SystemCoreClockUpdate();
 8006862:	f7fa f936 	bl	8000ad2 <SystemCoreClockUpdate>
	Motor_Init();
 8006866:	f7ff fa5b 	bl	8005d20 <Motor_Init>
	GPIO_Init();
 800686a:	f7ff fcb3 	bl	80061d4 <GPIO_Init>
	PWM_Init();
 800686e:	f7ff fd69 	bl	8006344 <PWM_Init>
	MP3_Init();
 8006872:	f7fa f9b3 	bl	8000bdc <MP3_Init>
	delay(500);
 8006876:	23fa      	movs	r3, #250	; 0xfa
 8006878:	005b      	lsls	r3, r3, #1
 800687a:	0018      	movs	r0, r3
 800687c:	f000 fb4c 	bl	8006f18 <delay>
	MP3_SendCmd(MP3_VOLUME, 0, 30); // Volume 0-30
 8006880:	221e      	movs	r2, #30
 8006882:	2100      	movs	r1, #0
 8006884:	2006      	movs	r0, #6
 8006886:	f7fa fa4f 	bl	8000d28 <MP3_SendCmd>
	GPIOB->BSRR |= GPIO_BSRR_BS_10;	//GREEN LED indicator ON
 800688a:	4b13      	ldr	r3, [pc, #76]	; (80068d8 <main+0x80>)
 800688c:	4a12      	ldr	r2, [pc, #72]	; (80068d8 <main+0x80>)
 800688e:	6992      	ldr	r2, [r2, #24]
 8006890:	2180      	movs	r1, #128	; 0x80
 8006892:	00c9      	lsls	r1, r1, #3
 8006894:	430a      	orrs	r2, r1
 8006896:	619a      	str	r2, [r3, #24]
	LEDtst();
 8006898:	f7ff fb80 	bl	8005f9c <LEDtst>
	delay(500);
 800689c:	23fa      	movs	r3, #250	; 0xfa
 800689e:	005b      	lsls	r3, r3, #1
 80068a0:	0018      	movs	r0, r3
 80068a2:	f000 fb39 	bl	8006f18 <delay>

	xTaskCreate(vTask_MAIN,"Main", 128, NULL, 1, NULL);
 80068a6:	490d      	ldr	r1, [pc, #52]	; (80068dc <main+0x84>)
 80068a8:	480d      	ldr	r0, [pc, #52]	; (80068e0 <main+0x88>)
 80068aa:	2300      	movs	r3, #0
 80068ac:	9301      	str	r3, [sp, #4]
 80068ae:	2301      	movs	r3, #1
 80068b0:	9300      	str	r3, [sp, #0]
 80068b2:	2300      	movs	r3, #0
 80068b4:	2280      	movs	r2, #128	; 0x80
 80068b6:	f7fc fea3 	bl	8003600 <xTaskCreate>
	xTaskCreate(vTask_CONTR,"CONTR", 256, NULL, 1, NULL);
 80068ba:	2380      	movs	r3, #128	; 0x80
 80068bc:	005a      	lsls	r2, r3, #1
 80068be:	4909      	ldr	r1, [pc, #36]	; (80068e4 <main+0x8c>)
 80068c0:	4809      	ldr	r0, [pc, #36]	; (80068e8 <main+0x90>)
 80068c2:	2300      	movs	r3, #0
 80068c4:	9301      	str	r3, [sp, #4]
 80068c6:	2301      	movs	r3, #1
 80068c8:	9300      	str	r3, [sp, #0]
 80068ca:	2300      	movs	r3, #0
 80068cc:	f7fc fe98 	bl	8003600 <xTaskCreate>
	vTaskStartScheduler();
 80068d0:	f7fd fb20 	bl	8003f14 <vTaskStartScheduler>

	while(1)
 80068d4:	e7fe      	b.n	80068d4 <main+0x7c>
 80068d6:	46c0      	nop			; (mov r8, r8)
 80068d8:	48000400 	.word	0x48000400
 80068dc:	08007530 	.word	0x08007530
 80068e0:	080068ed 	.word	0x080068ed
 80068e4:	08007538 	.word	0x08007538
 80068e8:	080069e5 	.word	0x080069e5

080068ec <vTask_MAIN>:
	}
}

//------------------------------------------------------------------------

void vTask_MAIN (void *argument){
 80068ec:	b580      	push	{r7, lr}
 80068ee:	b082      	sub	sp, #8
 80068f0:	af00      	add	r7, sp, #0
 80068f2:	6078      	str	r0, [r7, #4]
//===================================================================
//-------------   Main program   -----------------------------------
//===================================================================
//Figure management program

		if ((GPIOB->IDR & GPIO_IDR_9) == 0 ) {
 80068f4:	4b39      	ldr	r3, [pc, #228]	; (80069dc <vTask_MAIN+0xf0>)
 80068f6:	691a      	ldr	r2, [r3, #16]
 80068f8:	2380      	movs	r3, #128	; 0x80
 80068fa:	009b      	lsls	r3, r3, #2
 80068fc:	4013      	ands	r3, r2
 80068fe:	d168      	bne.n	80069d2 <vTask_MAIN+0xe6>

			m[0].Start = 1;
 8006900:	4b37      	ldr	r3, [pc, #220]	; (80069e0 <vTask_MAIN+0xf4>)
 8006902:	2201      	movs	r2, #1
 8006904:	705a      	strb	r2, [r3, #1]
			m[4].Start = 1;
 8006906:	4b36      	ldr	r3, [pc, #216]	; (80069e0 <vTask_MAIN+0xf4>)
 8006908:	2249      	movs	r2, #73	; 0x49
 800690a:	2101      	movs	r1, #1
 800690c:	5499      	strb	r1, [r3, r2]
			MP3_SendCmd(MP3_PLAY_FOLDER_FILE, 1,1);//1 DIR  1st File
 800690e:	2201      	movs	r2, #1
 8006910:	2101      	movs	r1, #1
 8006912:	200f      	movs	r0, #15
 8006914:	f7fa fa08 	bl	8000d28 <MP3_SendCmd>
			vTaskDelay(2000);
 8006918:	23fa      	movs	r3, #250	; 0xfa
 800691a:	00db      	lsls	r3, r3, #3
 800691c:	0018      	movs	r0, r3
 800691e:	f7fd f869 	bl	80039f4 <vTaskDelay>
			m[1].Start = 1;
 8006922:	4b2f      	ldr	r3, [pc, #188]	; (80069e0 <vTask_MAIN+0xf4>)
 8006924:	2201      	movs	r2, #1
 8006926:	74da      	strb	r2, [r3, #19]
			m[5].Start = 1;
 8006928:	4b2d      	ldr	r3, [pc, #180]	; (80069e0 <vTask_MAIN+0xf4>)
 800692a:	225b      	movs	r2, #91	; 0x5b
 800692c:	2101      	movs	r1, #1
 800692e:	5499      	strb	r1, [r3, r2]
			vTaskDelay(1000);
 8006930:	23fa      	movs	r3, #250	; 0xfa
 8006932:	009b      	lsls	r3, r3, #2
 8006934:	0018      	movs	r0, r3
 8006936:	f7fd f85d 	bl	80039f4 <vTaskDelay>
			m[2].Start = 1;
 800693a:	4b29      	ldr	r3, [pc, #164]	; (80069e0 <vTask_MAIN+0xf4>)
 800693c:	2225      	movs	r2, #37	; 0x25
 800693e:	2101      	movs	r1, #1
 8006940:	5499      	strb	r1, [r3, r2]
			m[6].Start = 1;
 8006942:	4b27      	ldr	r3, [pc, #156]	; (80069e0 <vTask_MAIN+0xf4>)
 8006944:	226d      	movs	r2, #109	; 0x6d
 8006946:	2101      	movs	r1, #1
 8006948:	5499      	strb	r1, [r3, r2]
			vTaskDelay(1000);
 800694a:	23fa      	movs	r3, #250	; 0xfa
 800694c:	009b      	lsls	r3, r3, #2
 800694e:	0018      	movs	r0, r3
 8006950:	f7fd f850 	bl	80039f4 <vTaskDelay>
			m[3].Start = 1;
 8006954:	4b22      	ldr	r3, [pc, #136]	; (80069e0 <vTask_MAIN+0xf4>)
 8006956:	2237      	movs	r2, #55	; 0x37
 8006958:	2101      	movs	r1, #1
 800695a:	5499      	strb	r1, [r3, r2]
			m[7].Start = 1;
 800695c:	4b20      	ldr	r3, [pc, #128]	; (80069e0 <vTask_MAIN+0xf4>)
 800695e:	227f      	movs	r2, #127	; 0x7f
 8006960:	2101      	movs	r1, #1
 8006962:	5499      	strb	r1, [r3, r2]
			vTaskDelay(1000);
 8006964:	23fa      	movs	r3, #250	; 0xfa
 8006966:	009b      	lsls	r3, r3, #2
 8006968:	0018      	movs	r0, r3
 800696a:	f7fd f843 	bl	80039f4 <vTaskDelay>
			m[0].Start = 0;
 800696e:	4b1c      	ldr	r3, [pc, #112]	; (80069e0 <vTask_MAIN+0xf4>)
 8006970:	2200      	movs	r2, #0
 8006972:	705a      	strb	r2, [r3, #1]
			m[4].Start = 0;
 8006974:	4b1a      	ldr	r3, [pc, #104]	; (80069e0 <vTask_MAIN+0xf4>)
 8006976:	2249      	movs	r2, #73	; 0x49
 8006978:	2100      	movs	r1, #0
 800697a:	5499      	strb	r1, [r3, r2]
			vTaskDelay(2000);
 800697c:	23fa      	movs	r3, #250	; 0xfa
 800697e:	00db      	lsls	r3, r3, #3
 8006980:	0018      	movs	r0, r3
 8006982:	f7fd f837 	bl	80039f4 <vTaskDelay>
			m[1].Start = 0;
 8006986:	4b16      	ldr	r3, [pc, #88]	; (80069e0 <vTask_MAIN+0xf4>)
 8006988:	2200      	movs	r2, #0
 800698a:	74da      	strb	r2, [r3, #19]
			m[5].Start = 0;
 800698c:	4b14      	ldr	r3, [pc, #80]	; (80069e0 <vTask_MAIN+0xf4>)
 800698e:	225b      	movs	r2, #91	; 0x5b
 8006990:	2100      	movs	r1, #0
 8006992:	5499      	strb	r1, [r3, r2]
			vTaskDelay(2000);
 8006994:	23fa      	movs	r3, #250	; 0xfa
 8006996:	00db      	lsls	r3, r3, #3
 8006998:	0018      	movs	r0, r3
 800699a:	f7fd f82b 	bl	80039f4 <vTaskDelay>
			m[2].Start = 0;
 800699e:	4b10      	ldr	r3, [pc, #64]	; (80069e0 <vTask_MAIN+0xf4>)
 80069a0:	2225      	movs	r2, #37	; 0x25
 80069a2:	2100      	movs	r1, #0
 80069a4:	5499      	strb	r1, [r3, r2]
			m[6].Start = 0;
 80069a6:	4b0e      	ldr	r3, [pc, #56]	; (80069e0 <vTask_MAIN+0xf4>)
 80069a8:	226d      	movs	r2, #109	; 0x6d
 80069aa:	2100      	movs	r1, #0
 80069ac:	5499      	strb	r1, [r3, r2]
			vTaskDelay(2000);
 80069ae:	23fa      	movs	r3, #250	; 0xfa
 80069b0:	00db      	lsls	r3, r3, #3
 80069b2:	0018      	movs	r0, r3
 80069b4:	f7fd f81e 	bl	80039f4 <vTaskDelay>
			m[3].Start = 0;
 80069b8:	4b09      	ldr	r3, [pc, #36]	; (80069e0 <vTask_MAIN+0xf4>)
 80069ba:	2237      	movs	r2, #55	; 0x37
 80069bc:	2100      	movs	r1, #0
 80069be:	5499      	strb	r1, [r3, r2]
			m[7].Start = 0;
 80069c0:	4b07      	ldr	r3, [pc, #28]	; (80069e0 <vTask_MAIN+0xf4>)
 80069c2:	227f      	movs	r2, #127	; 0x7f
 80069c4:	2100      	movs	r1, #0
 80069c6:	5499      	strb	r1, [r3, r2]
			vTaskDelay(2000); //*/
 80069c8:	23fa      	movs	r3, #250	; 0xfa
 80069ca:	00db      	lsls	r3, r3, #3
 80069cc:	0018      	movs	r0, r3
 80069ce:	f7fd f811 	bl	80039f4 <vTaskDelay>
		}
		vTaskDelay(30);
 80069d2:	201e      	movs	r0, #30
 80069d4:	f7fd f80e 	bl	80039f4 <vTaskDelay>
		if ((GPIOB->IDR & GPIO_IDR_9) == 0 ) {
 80069d8:	e78c      	b.n	80068f4 <vTask_MAIN+0x8>
 80069da:	46c0      	nop			; (mov r8, r8)
 80069dc:	48000400 	.word	0x48000400
 80069e0:	20000e1c 	.word	0x20000e1c

080069e4 <vTask_CONTR>:
	}
}
//------------------------------------------------------------------------
//----------   Engine acceleration and braking control   -----------------
//------------------------------------------------------------------------
void vTask_CONTR (void *argument){
 80069e4:	b5b0      	push	{r4, r5, r7, lr}
 80069e6:	b084      	sub	sp, #16
 80069e8:	af00      	add	r7, sp, #0
 80069ea:	6078      	str	r0, [r7, #4]
	while(1){

		for (uint8_t i = 0; i < NUMBER_OF_MOTOR; i++) {
 80069ec:	230f      	movs	r3, #15
 80069ee:	18fb      	adds	r3, r7, r3
 80069f0:	2200      	movs	r2, #0
 80069f2:	701a      	strb	r2, [r3, #0]
 80069f4:	e06b      	b.n	8006ace <vTask_CONTR+0xea>
			if ((m[i].Start) == 1 ) {
 80069f6:	230f      	movs	r3, #15
 80069f8:	18fb      	adds	r3, r7, r3
 80069fa:	781a      	ldrb	r2, [r3, #0]
 80069fc:	49c2      	ldr	r1, [pc, #776]	; (8006d08 <vTask_CONTR+0x324>)
 80069fe:	0013      	movs	r3, r2
 8006a00:	00db      	lsls	r3, r3, #3
 8006a02:	189b      	adds	r3, r3, r2
 8006a04:	005b      	lsls	r3, r3, #1
 8006a06:	18cb      	adds	r3, r1, r3
 8006a08:	3301      	adds	r3, #1
 8006a0a:	781b      	ldrb	r3, [r3, #0]
 8006a0c:	b2db      	uxtb	r3, r3
 8006a0e:	2b01      	cmp	r3, #1
 8006a10:	d131      	bne.n	8006a76 <vTask_CONTR+0x92>
				if (m[i].curStep < (m[i].tAcceleration ) ){
 8006a12:	230f      	movs	r3, #15
 8006a14:	18fb      	adds	r3, r7, r3
 8006a16:	781a      	ldrb	r2, [r3, #0]
 8006a18:	49bb      	ldr	r1, [pc, #748]	; (8006d08 <vTask_CONTR+0x324>)
 8006a1a:	0013      	movs	r3, r2
 8006a1c:	00db      	lsls	r3, r3, #3
 8006a1e:	189b      	adds	r3, r3, r2
 8006a20:	005b      	lsls	r3, r3, #1
 8006a22:	18cb      	adds	r3, r1, r3
 8006a24:	330c      	adds	r3, #12
 8006a26:	881b      	ldrh	r3, [r3, #0]
 8006a28:	b299      	uxth	r1, r3
 8006a2a:	230f      	movs	r3, #15
 8006a2c:	18fb      	adds	r3, r7, r3
 8006a2e:	781a      	ldrb	r2, [r3, #0]
 8006a30:	48b5      	ldr	r0, [pc, #724]	; (8006d08 <vTask_CONTR+0x324>)
 8006a32:	0013      	movs	r3, r2
 8006a34:	00db      	lsls	r3, r3, #3
 8006a36:	189b      	adds	r3, r3, r2
 8006a38:	005b      	lsls	r3, r3, #1
 8006a3a:	18c3      	adds	r3, r0, r3
 8006a3c:	3302      	adds	r3, #2
 8006a3e:	881b      	ldrh	r3, [r3, #0]
 8006a40:	b29b      	uxth	r3, r3
 8006a42:	4299      	cmp	r1, r3
 8006a44:	d23c      	bcs.n	8006ac0 <vTask_CONTR+0xdc>
					m[i].curStep++;
 8006a46:	230f      	movs	r3, #15
 8006a48:	18fb      	adds	r3, r7, r3
 8006a4a:	781a      	ldrb	r2, [r3, #0]
 8006a4c:	49ae      	ldr	r1, [pc, #696]	; (8006d08 <vTask_CONTR+0x324>)
 8006a4e:	0013      	movs	r3, r2
 8006a50:	00db      	lsls	r3, r3, #3
 8006a52:	189b      	adds	r3, r3, r2
 8006a54:	005b      	lsls	r3, r3, #1
 8006a56:	18cb      	adds	r3, r1, r3
 8006a58:	330c      	adds	r3, #12
 8006a5a:	881b      	ldrh	r3, [r3, #0]
 8006a5c:	b29b      	uxth	r3, r3
 8006a5e:	3301      	adds	r3, #1
 8006a60:	b298      	uxth	r0, r3
 8006a62:	49a9      	ldr	r1, [pc, #676]	; (8006d08 <vTask_CONTR+0x324>)
 8006a64:	0013      	movs	r3, r2
 8006a66:	00db      	lsls	r3, r3, #3
 8006a68:	189b      	adds	r3, r3, r2
 8006a6a:	005b      	lsls	r3, r3, #1
 8006a6c:	18cb      	adds	r3, r1, r3
 8006a6e:	330c      	adds	r3, #12
 8006a70:	1c02      	adds	r2, r0, #0
 8006a72:	801a      	strh	r2, [r3, #0]
 8006a74:	e024      	b.n	8006ac0 <vTask_CONTR+0xdc>
				}
			} else{
				if (m[i].curStep > 0) {
 8006a76:	230f      	movs	r3, #15
 8006a78:	18fb      	adds	r3, r7, r3
 8006a7a:	781a      	ldrb	r2, [r3, #0]
 8006a7c:	49a2      	ldr	r1, [pc, #648]	; (8006d08 <vTask_CONTR+0x324>)
 8006a7e:	0013      	movs	r3, r2
 8006a80:	00db      	lsls	r3, r3, #3
 8006a82:	189b      	adds	r3, r3, r2
 8006a84:	005b      	lsls	r3, r3, #1
 8006a86:	18cb      	adds	r3, r1, r3
 8006a88:	330c      	adds	r3, #12
 8006a8a:	881b      	ldrh	r3, [r3, #0]
 8006a8c:	b29b      	uxth	r3, r3
 8006a8e:	2b00      	cmp	r3, #0
 8006a90:	d016      	beq.n	8006ac0 <vTask_CONTR+0xdc>
					m[i].curStep--;
 8006a92:	230f      	movs	r3, #15
 8006a94:	18fb      	adds	r3, r7, r3
 8006a96:	781a      	ldrb	r2, [r3, #0]
 8006a98:	499b      	ldr	r1, [pc, #620]	; (8006d08 <vTask_CONTR+0x324>)
 8006a9a:	0013      	movs	r3, r2
 8006a9c:	00db      	lsls	r3, r3, #3
 8006a9e:	189b      	adds	r3, r3, r2
 8006aa0:	005b      	lsls	r3, r3, #1
 8006aa2:	18cb      	adds	r3, r1, r3
 8006aa4:	330c      	adds	r3, #12
 8006aa6:	881b      	ldrh	r3, [r3, #0]
 8006aa8:	b29b      	uxth	r3, r3
 8006aaa:	3b01      	subs	r3, #1
 8006aac:	b298      	uxth	r0, r3
 8006aae:	4996      	ldr	r1, [pc, #600]	; (8006d08 <vTask_CONTR+0x324>)
 8006ab0:	0013      	movs	r3, r2
 8006ab2:	00db      	lsls	r3, r3, #3
 8006ab4:	189b      	adds	r3, r3, r2
 8006ab6:	005b      	lsls	r3, r3, #1
 8006ab8:	18cb      	adds	r3, r1, r3
 8006aba:	330c      	adds	r3, #12
 8006abc:	1c02      	adds	r2, r0, #0
 8006abe:	801a      	strh	r2, [r3, #0]
		for (uint8_t i = 0; i < NUMBER_OF_MOTOR; i++) {
 8006ac0:	230f      	movs	r3, #15
 8006ac2:	18fb      	adds	r3, r7, r3
 8006ac4:	781a      	ldrb	r2, [r3, #0]
 8006ac6:	230f      	movs	r3, #15
 8006ac8:	18fb      	adds	r3, r7, r3
 8006aca:	3201      	adds	r2, #1
 8006acc:	701a      	strb	r2, [r3, #0]
 8006ace:	230f      	movs	r3, #15
 8006ad0:	18fb      	adds	r3, r7, r3
 8006ad2:	781b      	ldrb	r3, [r3, #0]
 8006ad4:	2b07      	cmp	r3, #7
 8006ad6:	d98e      	bls.n	80069f6 <vTask_CONTR+0x12>
				}
			}
		}

		//----------------   M1   ------------------------------------
		if (m[0].EN == 1){
 8006ad8:	4b8b      	ldr	r3, [pc, #556]	; (8006d08 <vTask_CONTR+0x324>)
 8006ada:	781b      	ldrb	r3, [r3, #0]
 8006adc:	b2db      	uxtb	r3, r3
 8006ade:	2b01      	cmp	r3, #1
 8006ae0:	d139      	bne.n	8006b56 <vTask_CONTR+0x172>
			if ( ((m[0].Start) == 0) & (m[0].curStep == 0) ) {
 8006ae2:	4b89      	ldr	r3, [pc, #548]	; (8006d08 <vTask_CONTR+0x324>)
 8006ae4:	785b      	ldrb	r3, [r3, #1]
 8006ae6:	b2db      	uxtb	r3, r3
 8006ae8:	425a      	negs	r2, r3
 8006aea:	4153      	adcs	r3, r2
 8006aec:	b2db      	uxtb	r3, r3
 8006aee:	4a86      	ldr	r2, [pc, #536]	; (8006d08 <vTask_CONTR+0x324>)
 8006af0:	8992      	ldrh	r2, [r2, #12]
 8006af2:	b292      	uxth	r2, r2
 8006af4:	4251      	negs	r1, r2
 8006af6:	414a      	adcs	r2, r1
 8006af8:	b2d2      	uxtb	r2, r2
 8006afa:	4013      	ands	r3, r2
 8006afc:	b2db      	uxtb	r3, r3
 8006afe:	2b00      	cmp	r3, #0
 8006b00:	d00c      	beq.n	8006b1c <vTask_CONTR+0x138>
				TIM1->CCR1 = 0;
 8006b02:	4b82      	ldr	r3, [pc, #520]	; (8006d0c <vTask_CONTR+0x328>)
 8006b04:	2200      	movs	r2, #0
 8006b06:	635a      	str	r2, [r3, #52]	; 0x34
				GPIOA->BSRR |= GPIO_BSRR_BR_15;
 8006b08:	2390      	movs	r3, #144	; 0x90
 8006b0a:	05db      	lsls	r3, r3, #23
 8006b0c:	2290      	movs	r2, #144	; 0x90
 8006b0e:	05d2      	lsls	r2, r2, #23
 8006b10:	6992      	ldr	r2, [r2, #24]
 8006b12:	2180      	movs	r1, #128	; 0x80
 8006b14:	0609      	lsls	r1, r1, #24
 8006b16:	430a      	orrs	r2, r1
 8006b18:	619a      	str	r2, [r3, #24]
 8006b1a:	e01c      	b.n	8006b56 <vTask_CONTR+0x172>
			} else {
				TIM1->CCR1 = m[0].perStartPWM + ((m[0].curStep * m[0].StepSizeF) /100 );
 8006b1c:	4c7b      	ldr	r4, [pc, #492]	; (8006d0c <vTask_CONTR+0x328>)
 8006b1e:	4b7a      	ldr	r3, [pc, #488]	; (8006d08 <vTask_CONTR+0x324>)
 8006b20:	889b      	ldrh	r3, [r3, #4]
 8006b22:	b29b      	uxth	r3, r3
 8006b24:	001d      	movs	r5, r3
 8006b26:	4b78      	ldr	r3, [pc, #480]	; (8006d08 <vTask_CONTR+0x324>)
 8006b28:	899b      	ldrh	r3, [r3, #12]
 8006b2a:	b29b      	uxth	r3, r3
 8006b2c:	001a      	movs	r2, r3
 8006b2e:	4b76      	ldr	r3, [pc, #472]	; (8006d08 <vTask_CONTR+0x324>)
 8006b30:	895b      	ldrh	r3, [r3, #10]
 8006b32:	b29b      	uxth	r3, r3
 8006b34:	4353      	muls	r3, r2
 8006b36:	2164      	movs	r1, #100	; 0x64
 8006b38:	0018      	movs	r0, r3
 8006b3a:	f000 fb5f 	bl	80071fc <__divsi3>
 8006b3e:	0003      	movs	r3, r0
 8006b40:	18eb      	adds	r3, r5, r3
 8006b42:	6363      	str	r3, [r4, #52]	; 0x34
				GPIOA->BSRR |= GPIO_BSRR_BS_15;
 8006b44:	2390      	movs	r3, #144	; 0x90
 8006b46:	05db      	lsls	r3, r3, #23
 8006b48:	2290      	movs	r2, #144	; 0x90
 8006b4a:	05d2      	lsls	r2, r2, #23
 8006b4c:	6992      	ldr	r2, [r2, #24]
 8006b4e:	2180      	movs	r1, #128	; 0x80
 8006b50:	0209      	lsls	r1, r1, #8
 8006b52:	430a      	orrs	r2, r1
 8006b54:	619a      	str	r2, [r3, #24]
			}
		}
		//----------------   M2   ------------------------------------
		if (m[1].EN == 1){
 8006b56:	4b6c      	ldr	r3, [pc, #432]	; (8006d08 <vTask_CONTR+0x324>)
 8006b58:	7c9b      	ldrb	r3, [r3, #18]
 8006b5a:	b2db      	uxtb	r3, r3
 8006b5c:	2b01      	cmp	r3, #1
 8006b5e:	d134      	bne.n	8006bca <vTask_CONTR+0x1e6>
			if ( ((m[1].Start) == 0) & (m[1].curStep == 0) ) {
 8006b60:	4b69      	ldr	r3, [pc, #420]	; (8006d08 <vTask_CONTR+0x324>)
 8006b62:	7cdb      	ldrb	r3, [r3, #19]
 8006b64:	b2db      	uxtb	r3, r3
 8006b66:	425a      	negs	r2, r3
 8006b68:	4153      	adcs	r3, r2
 8006b6a:	b2db      	uxtb	r3, r3
 8006b6c:	4a66      	ldr	r2, [pc, #408]	; (8006d08 <vTask_CONTR+0x324>)
 8006b6e:	8bd2      	ldrh	r2, [r2, #30]
 8006b70:	b292      	uxth	r2, r2
 8006b72:	4251      	negs	r1, r2
 8006b74:	414a      	adcs	r2, r1
 8006b76:	b2d2      	uxtb	r2, r2
 8006b78:	4013      	ands	r3, r2
 8006b7a:	b2db      	uxtb	r3, r3
 8006b7c:	2b00      	cmp	r3, #0
 8006b7e:	d00a      	beq.n	8006b96 <vTask_CONTR+0x1b2>
				TIM1->CCR2 = 0;
 8006b80:	4b62      	ldr	r3, [pc, #392]	; (8006d0c <vTask_CONTR+0x328>)
 8006b82:	2200      	movs	r2, #0
 8006b84:	639a      	str	r2, [r3, #56]	; 0x38
				GPIOB->BSRR |= GPIO_BSRR_BR_3;
 8006b86:	4b62      	ldr	r3, [pc, #392]	; (8006d10 <vTask_CONTR+0x32c>)
 8006b88:	4a61      	ldr	r2, [pc, #388]	; (8006d10 <vTask_CONTR+0x32c>)
 8006b8a:	6992      	ldr	r2, [r2, #24]
 8006b8c:	2180      	movs	r1, #128	; 0x80
 8006b8e:	0309      	lsls	r1, r1, #12
 8006b90:	430a      	orrs	r2, r1
 8006b92:	619a      	str	r2, [r3, #24]
 8006b94:	e019      	b.n	8006bca <vTask_CONTR+0x1e6>
			} else {
				TIM1->CCR2 = m[1].perStartPWM + ((m[1].curStep * m[1].StepSizeF) /100 );
 8006b96:	4c5d      	ldr	r4, [pc, #372]	; (8006d0c <vTask_CONTR+0x328>)
 8006b98:	4b5b      	ldr	r3, [pc, #364]	; (8006d08 <vTask_CONTR+0x324>)
 8006b9a:	8adb      	ldrh	r3, [r3, #22]
 8006b9c:	b29b      	uxth	r3, r3
 8006b9e:	001d      	movs	r5, r3
 8006ba0:	4b59      	ldr	r3, [pc, #356]	; (8006d08 <vTask_CONTR+0x324>)
 8006ba2:	8bdb      	ldrh	r3, [r3, #30]
 8006ba4:	b29b      	uxth	r3, r3
 8006ba6:	001a      	movs	r2, r3
 8006ba8:	4b57      	ldr	r3, [pc, #348]	; (8006d08 <vTask_CONTR+0x324>)
 8006baa:	8b9b      	ldrh	r3, [r3, #28]
 8006bac:	b29b      	uxth	r3, r3
 8006bae:	4353      	muls	r3, r2
 8006bb0:	2164      	movs	r1, #100	; 0x64
 8006bb2:	0018      	movs	r0, r3
 8006bb4:	f000 fb22 	bl	80071fc <__divsi3>
 8006bb8:	0003      	movs	r3, r0
 8006bba:	18eb      	adds	r3, r5, r3
 8006bbc:	63a3      	str	r3, [r4, #56]	; 0x38
				GPIOB->BSRR |= GPIO_BSRR_BS_3;
 8006bbe:	4b54      	ldr	r3, [pc, #336]	; (8006d10 <vTask_CONTR+0x32c>)
 8006bc0:	4a53      	ldr	r2, [pc, #332]	; (8006d10 <vTask_CONTR+0x32c>)
 8006bc2:	6992      	ldr	r2, [r2, #24]
 8006bc4:	2108      	movs	r1, #8
 8006bc6:	430a      	orrs	r2, r1
 8006bc8:	619a      	str	r2, [r3, #24]
			}
		}
		//----------------   M3   ------------------------------------
		if (m[2].EN == 1){
 8006bca:	4b4f      	ldr	r3, [pc, #316]	; (8006d08 <vTask_CONTR+0x324>)
 8006bcc:	2224      	movs	r2, #36	; 0x24
 8006bce:	5c9b      	ldrb	r3, [r3, r2]
 8006bd0:	b2db      	uxtb	r3, r3
 8006bd2:	2b01      	cmp	r3, #1
 8006bd4:	d135      	bne.n	8006c42 <vTask_CONTR+0x25e>
			if ( ((m[2].Start) == 0) & (m[2].curStep == 0) ) {
 8006bd6:	4b4c      	ldr	r3, [pc, #304]	; (8006d08 <vTask_CONTR+0x324>)
 8006bd8:	2225      	movs	r2, #37	; 0x25
 8006bda:	5c9b      	ldrb	r3, [r3, r2]
 8006bdc:	b2db      	uxtb	r3, r3
 8006bde:	425a      	negs	r2, r3
 8006be0:	4153      	adcs	r3, r2
 8006be2:	b2db      	uxtb	r3, r3
 8006be4:	4a48      	ldr	r2, [pc, #288]	; (8006d08 <vTask_CONTR+0x324>)
 8006be6:	8e12      	ldrh	r2, [r2, #48]	; 0x30
 8006be8:	b292      	uxth	r2, r2
 8006bea:	4251      	negs	r1, r2
 8006bec:	414a      	adcs	r2, r1
 8006bee:	b2d2      	uxtb	r2, r2
 8006bf0:	4013      	ands	r3, r2
 8006bf2:	b2db      	uxtb	r3, r3
 8006bf4:	2b00      	cmp	r3, #0
 8006bf6:	d00a      	beq.n	8006c0e <vTask_CONTR+0x22a>
				TIM1->CCR3 = 0;
 8006bf8:	4b44      	ldr	r3, [pc, #272]	; (8006d0c <vTask_CONTR+0x328>)
 8006bfa:	2200      	movs	r2, #0
 8006bfc:	63da      	str	r2, [r3, #60]	; 0x3c
				GPIOB->BSRR |= GPIO_BSRR_BR_4;
 8006bfe:	4b44      	ldr	r3, [pc, #272]	; (8006d10 <vTask_CONTR+0x32c>)
 8006c00:	4a43      	ldr	r2, [pc, #268]	; (8006d10 <vTask_CONTR+0x32c>)
 8006c02:	6992      	ldr	r2, [r2, #24]
 8006c04:	2180      	movs	r1, #128	; 0x80
 8006c06:	0349      	lsls	r1, r1, #13
 8006c08:	430a      	orrs	r2, r1
 8006c0a:	619a      	str	r2, [r3, #24]
 8006c0c:	e019      	b.n	8006c42 <vTask_CONTR+0x25e>
			} else {
				TIM1->CCR3 = m[2].perStartPWM + ((m[2].curStep * m[2].StepSizeF) /100 );
 8006c0e:	4c3f      	ldr	r4, [pc, #252]	; (8006d0c <vTask_CONTR+0x328>)
 8006c10:	4b3d      	ldr	r3, [pc, #244]	; (8006d08 <vTask_CONTR+0x324>)
 8006c12:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006c14:	b29b      	uxth	r3, r3
 8006c16:	001d      	movs	r5, r3
 8006c18:	4b3b      	ldr	r3, [pc, #236]	; (8006d08 <vTask_CONTR+0x324>)
 8006c1a:	8e1b      	ldrh	r3, [r3, #48]	; 0x30
 8006c1c:	b29b      	uxth	r3, r3
 8006c1e:	001a      	movs	r2, r3
 8006c20:	4b39      	ldr	r3, [pc, #228]	; (8006d08 <vTask_CONTR+0x324>)
 8006c22:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8006c24:	b29b      	uxth	r3, r3
 8006c26:	4353      	muls	r3, r2
 8006c28:	2164      	movs	r1, #100	; 0x64
 8006c2a:	0018      	movs	r0, r3
 8006c2c:	f000 fae6 	bl	80071fc <__divsi3>
 8006c30:	0003      	movs	r3, r0
 8006c32:	18eb      	adds	r3, r5, r3
 8006c34:	63e3      	str	r3, [r4, #60]	; 0x3c
				GPIOB->BSRR |= GPIO_BSRR_BS_4;
 8006c36:	4b36      	ldr	r3, [pc, #216]	; (8006d10 <vTask_CONTR+0x32c>)
 8006c38:	4a35      	ldr	r2, [pc, #212]	; (8006d10 <vTask_CONTR+0x32c>)
 8006c3a:	6992      	ldr	r2, [r2, #24]
 8006c3c:	2110      	movs	r1, #16
 8006c3e:	430a      	orrs	r2, r1
 8006c40:	619a      	str	r2, [r3, #24]
			}
		}
		//----------------   M4   ------------------------------------
		if (m[3].EN == 1){
 8006c42:	4b31      	ldr	r3, [pc, #196]	; (8006d08 <vTask_CONTR+0x324>)
 8006c44:	2236      	movs	r2, #54	; 0x36
 8006c46:	5c9b      	ldrb	r3, [r3, r2]
 8006c48:	b2db      	uxtb	r3, r3
 8006c4a:	2b01      	cmp	r3, #1
 8006c4c:	d138      	bne.n	8006cc0 <vTask_CONTR+0x2dc>
			if ( ((m[3].Start) == 0) & (m[3].curStep == 0) ) {
 8006c4e:	4b2e      	ldr	r3, [pc, #184]	; (8006d08 <vTask_CONTR+0x324>)
 8006c50:	2237      	movs	r2, #55	; 0x37
 8006c52:	5c9b      	ldrb	r3, [r3, r2]
 8006c54:	b2db      	uxtb	r3, r3
 8006c56:	425a      	negs	r2, r3
 8006c58:	4153      	adcs	r3, r2
 8006c5a:	b2db      	uxtb	r3, r3
 8006c5c:	4a2a      	ldr	r2, [pc, #168]	; (8006d08 <vTask_CONTR+0x324>)
 8006c5e:	2142      	movs	r1, #66	; 0x42
 8006c60:	5a52      	ldrh	r2, [r2, r1]
 8006c62:	b292      	uxth	r2, r2
 8006c64:	4251      	negs	r1, r2
 8006c66:	414a      	adcs	r2, r1
 8006c68:	b2d2      	uxtb	r2, r2
 8006c6a:	4013      	ands	r3, r2
 8006c6c:	b2db      	uxtb	r3, r3
 8006c6e:	2b00      	cmp	r3, #0
 8006c70:	d00a      	beq.n	8006c88 <vTask_CONTR+0x2a4>
				TIM1->CCR4 = 0;
 8006c72:	4b26      	ldr	r3, [pc, #152]	; (8006d0c <vTask_CONTR+0x328>)
 8006c74:	2200      	movs	r2, #0
 8006c76:	641a      	str	r2, [r3, #64]	; 0x40
				GPIOB->BSRR |= GPIO_BSRR_BR_5;
 8006c78:	4b25      	ldr	r3, [pc, #148]	; (8006d10 <vTask_CONTR+0x32c>)
 8006c7a:	4a25      	ldr	r2, [pc, #148]	; (8006d10 <vTask_CONTR+0x32c>)
 8006c7c:	6992      	ldr	r2, [r2, #24]
 8006c7e:	2180      	movs	r1, #128	; 0x80
 8006c80:	0389      	lsls	r1, r1, #14
 8006c82:	430a      	orrs	r2, r1
 8006c84:	619a      	str	r2, [r3, #24]
 8006c86:	e01b      	b.n	8006cc0 <vTask_CONTR+0x2dc>
			} else {
				TIM1->CCR4 = m[1].perStartPWM + ((m[3].curStep * m[3].StepSizeF) /100 );
 8006c88:	4c20      	ldr	r4, [pc, #128]	; (8006d0c <vTask_CONTR+0x328>)
 8006c8a:	4b1f      	ldr	r3, [pc, #124]	; (8006d08 <vTask_CONTR+0x324>)
 8006c8c:	8adb      	ldrh	r3, [r3, #22]
 8006c8e:	b29b      	uxth	r3, r3
 8006c90:	001d      	movs	r5, r3
 8006c92:	4b1d      	ldr	r3, [pc, #116]	; (8006d08 <vTask_CONTR+0x324>)
 8006c94:	2242      	movs	r2, #66	; 0x42
 8006c96:	5a9b      	ldrh	r3, [r3, r2]
 8006c98:	b29b      	uxth	r3, r3
 8006c9a:	0019      	movs	r1, r3
 8006c9c:	4b1a      	ldr	r3, [pc, #104]	; (8006d08 <vTask_CONTR+0x324>)
 8006c9e:	2240      	movs	r2, #64	; 0x40
 8006ca0:	5a9b      	ldrh	r3, [r3, r2]
 8006ca2:	b29b      	uxth	r3, r3
 8006ca4:	434b      	muls	r3, r1
 8006ca6:	2164      	movs	r1, #100	; 0x64
 8006ca8:	0018      	movs	r0, r3
 8006caa:	f000 faa7 	bl	80071fc <__divsi3>
 8006cae:	0003      	movs	r3, r0
 8006cb0:	18eb      	adds	r3, r5, r3
 8006cb2:	6423      	str	r3, [r4, #64]	; 0x40
				GPIOB->BSRR |= GPIO_BSRR_BS_5;
 8006cb4:	4b16      	ldr	r3, [pc, #88]	; (8006d10 <vTask_CONTR+0x32c>)
 8006cb6:	4a16      	ldr	r2, [pc, #88]	; (8006d10 <vTask_CONTR+0x32c>)
 8006cb8:	6992      	ldr	r2, [r2, #24]
 8006cba:	2120      	movs	r1, #32
 8006cbc:	430a      	orrs	r2, r1
 8006cbe:	619a      	str	r2, [r3, #24]
			}
		}

		//----------------   M5   ------------------------------------
		if (m[4].EN == 1){
 8006cc0:	4b11      	ldr	r3, [pc, #68]	; (8006d08 <vTask_CONTR+0x324>)
 8006cc2:	2248      	movs	r2, #72	; 0x48
 8006cc4:	5c9b      	ldrb	r3, [r3, r2]
 8006cc6:	b2db      	uxtb	r3, r3
 8006cc8:	2b01      	cmp	r3, #1
 8006cca:	d143      	bne.n	8006d54 <vTask_CONTR+0x370>
			if ( ((m[4].Start) == 0) & (m[4].curStep == 0) ) {
 8006ccc:	4b0e      	ldr	r3, [pc, #56]	; (8006d08 <vTask_CONTR+0x324>)
 8006cce:	2249      	movs	r2, #73	; 0x49
 8006cd0:	5c9b      	ldrb	r3, [r3, r2]
 8006cd2:	b2db      	uxtb	r3, r3
 8006cd4:	425a      	negs	r2, r3
 8006cd6:	4153      	adcs	r3, r2
 8006cd8:	b2db      	uxtb	r3, r3
 8006cda:	4a0b      	ldr	r2, [pc, #44]	; (8006d08 <vTask_CONTR+0x324>)
 8006cdc:	2154      	movs	r1, #84	; 0x54
 8006cde:	5a52      	ldrh	r2, [r2, r1]
 8006ce0:	b292      	uxth	r2, r2
 8006ce2:	4251      	negs	r1, r2
 8006ce4:	414a      	adcs	r2, r1
 8006ce6:	b2d2      	uxtb	r2, r2
 8006ce8:	4013      	ands	r3, r2
 8006cea:	b2db      	uxtb	r3, r3
 8006cec:	2b00      	cmp	r3, #0
 8006cee:	d013      	beq.n	8006d18 <vTask_CONTR+0x334>
				TIM3->CCR1 = 0;
 8006cf0:	4b08      	ldr	r3, [pc, #32]	; (8006d14 <vTask_CONTR+0x330>)
 8006cf2:	2200      	movs	r2, #0
 8006cf4:	635a      	str	r2, [r3, #52]	; 0x34
				GPIOB->BSRR |= GPIO_BSRR_BR_12;
 8006cf6:	4b06      	ldr	r3, [pc, #24]	; (8006d10 <vTask_CONTR+0x32c>)
 8006cf8:	4a05      	ldr	r2, [pc, #20]	; (8006d10 <vTask_CONTR+0x32c>)
 8006cfa:	6992      	ldr	r2, [r2, #24]
 8006cfc:	2180      	movs	r1, #128	; 0x80
 8006cfe:	0549      	lsls	r1, r1, #21
 8006d00:	430a      	orrs	r2, r1
 8006d02:	619a      	str	r2, [r3, #24]
 8006d04:	e026      	b.n	8006d54 <vTask_CONTR+0x370>
 8006d06:	46c0      	nop			; (mov r8, r8)
 8006d08:	20000e1c 	.word	0x20000e1c
 8006d0c:	40012c00 	.word	0x40012c00
 8006d10:	48000400 	.word	0x48000400
 8006d14:	40000400 	.word	0x40000400
			} else {
				TIM3->CCR1 = m[4].perStartPWM + ((m[4].curStep * m[4].StepSizeF) /100 );
 8006d18:	4c7c      	ldr	r4, [pc, #496]	; (8006f0c <vTask_CONTR+0x528>)
 8006d1a:	4b7d      	ldr	r3, [pc, #500]	; (8006f10 <vTask_CONTR+0x52c>)
 8006d1c:	224c      	movs	r2, #76	; 0x4c
 8006d1e:	5a9b      	ldrh	r3, [r3, r2]
 8006d20:	b29b      	uxth	r3, r3
 8006d22:	001d      	movs	r5, r3
 8006d24:	4b7a      	ldr	r3, [pc, #488]	; (8006f10 <vTask_CONTR+0x52c>)
 8006d26:	2254      	movs	r2, #84	; 0x54
 8006d28:	5a9b      	ldrh	r3, [r3, r2]
 8006d2a:	b29b      	uxth	r3, r3
 8006d2c:	0019      	movs	r1, r3
 8006d2e:	4b78      	ldr	r3, [pc, #480]	; (8006f10 <vTask_CONTR+0x52c>)
 8006d30:	2252      	movs	r2, #82	; 0x52
 8006d32:	5a9b      	ldrh	r3, [r3, r2]
 8006d34:	b29b      	uxth	r3, r3
 8006d36:	434b      	muls	r3, r1
 8006d38:	2164      	movs	r1, #100	; 0x64
 8006d3a:	0018      	movs	r0, r3
 8006d3c:	f000 fa5e 	bl	80071fc <__divsi3>
 8006d40:	0003      	movs	r3, r0
 8006d42:	18eb      	adds	r3, r5, r3
 8006d44:	6363      	str	r3, [r4, #52]	; 0x34
				GPIOB->BSRR |= GPIO_BSRR_BS_12;
 8006d46:	4b73      	ldr	r3, [pc, #460]	; (8006f14 <vTask_CONTR+0x530>)
 8006d48:	4a72      	ldr	r2, [pc, #456]	; (8006f14 <vTask_CONTR+0x530>)
 8006d4a:	6992      	ldr	r2, [r2, #24]
 8006d4c:	2180      	movs	r1, #128	; 0x80
 8006d4e:	0149      	lsls	r1, r1, #5
 8006d50:	430a      	orrs	r2, r1
 8006d52:	619a      	str	r2, [r3, #24]
			}
		}
		//----------------   M6   ------------------------------------
		if (m[5].EN == 1){
 8006d54:	4b6e      	ldr	r3, [pc, #440]	; (8006f10 <vTask_CONTR+0x52c>)
 8006d56:	225a      	movs	r2, #90	; 0x5a
 8006d58:	5c9b      	ldrb	r3, [r3, r2]
 8006d5a:	b2db      	uxtb	r3, r3
 8006d5c:	2b01      	cmp	r3, #1
 8006d5e:	d13a      	bne.n	8006dd6 <vTask_CONTR+0x3f2>
			if ( ((m[5].Start) == 0) & (m[5].curStep == 0) ) {
 8006d60:	4b6b      	ldr	r3, [pc, #428]	; (8006f10 <vTask_CONTR+0x52c>)
 8006d62:	225b      	movs	r2, #91	; 0x5b
 8006d64:	5c9b      	ldrb	r3, [r3, r2]
 8006d66:	b2db      	uxtb	r3, r3
 8006d68:	425a      	negs	r2, r3
 8006d6a:	4153      	adcs	r3, r2
 8006d6c:	b2db      	uxtb	r3, r3
 8006d6e:	4a68      	ldr	r2, [pc, #416]	; (8006f10 <vTask_CONTR+0x52c>)
 8006d70:	2166      	movs	r1, #102	; 0x66
 8006d72:	5a52      	ldrh	r2, [r2, r1]
 8006d74:	b292      	uxth	r2, r2
 8006d76:	4251      	negs	r1, r2
 8006d78:	414a      	adcs	r2, r1
 8006d7a:	b2d2      	uxtb	r2, r2
 8006d7c:	4013      	ands	r3, r2
 8006d7e:	b2db      	uxtb	r3, r3
 8006d80:	2b00      	cmp	r3, #0
 8006d82:	d00a      	beq.n	8006d9a <vTask_CONTR+0x3b6>
				TIM3->CCR2 = 0;
 8006d84:	4b61      	ldr	r3, [pc, #388]	; (8006f0c <vTask_CONTR+0x528>)
 8006d86:	2200      	movs	r2, #0
 8006d88:	639a      	str	r2, [r3, #56]	; 0x38
				GPIOB->BSRR |= GPIO_BSRR_BR_13;
 8006d8a:	4b62      	ldr	r3, [pc, #392]	; (8006f14 <vTask_CONTR+0x530>)
 8006d8c:	4a61      	ldr	r2, [pc, #388]	; (8006f14 <vTask_CONTR+0x530>)
 8006d8e:	6992      	ldr	r2, [r2, #24]
 8006d90:	2180      	movs	r1, #128	; 0x80
 8006d92:	0589      	lsls	r1, r1, #22
 8006d94:	430a      	orrs	r2, r1
 8006d96:	619a      	str	r2, [r3, #24]
 8006d98:	e01d      	b.n	8006dd6 <vTask_CONTR+0x3f2>
			} else {
				TIM3->CCR2 = m[5].perStartPWM + ((m[5].curStep * m[5].StepSizeF) /100 );
 8006d9a:	4c5c      	ldr	r4, [pc, #368]	; (8006f0c <vTask_CONTR+0x528>)
 8006d9c:	4b5c      	ldr	r3, [pc, #368]	; (8006f10 <vTask_CONTR+0x52c>)
 8006d9e:	225e      	movs	r2, #94	; 0x5e
 8006da0:	5a9b      	ldrh	r3, [r3, r2]
 8006da2:	b29b      	uxth	r3, r3
 8006da4:	001d      	movs	r5, r3
 8006da6:	4b5a      	ldr	r3, [pc, #360]	; (8006f10 <vTask_CONTR+0x52c>)
 8006da8:	2266      	movs	r2, #102	; 0x66
 8006daa:	5a9b      	ldrh	r3, [r3, r2]
 8006dac:	b29b      	uxth	r3, r3
 8006dae:	0019      	movs	r1, r3
 8006db0:	4b57      	ldr	r3, [pc, #348]	; (8006f10 <vTask_CONTR+0x52c>)
 8006db2:	2264      	movs	r2, #100	; 0x64
 8006db4:	5a9b      	ldrh	r3, [r3, r2]
 8006db6:	b29b      	uxth	r3, r3
 8006db8:	434b      	muls	r3, r1
 8006dba:	2164      	movs	r1, #100	; 0x64
 8006dbc:	0018      	movs	r0, r3
 8006dbe:	f000 fa1d 	bl	80071fc <__divsi3>
 8006dc2:	0003      	movs	r3, r0
 8006dc4:	18eb      	adds	r3, r5, r3
 8006dc6:	63a3      	str	r3, [r4, #56]	; 0x38
				GPIOB->BSRR |= GPIO_BSRR_BS_13;
 8006dc8:	4b52      	ldr	r3, [pc, #328]	; (8006f14 <vTask_CONTR+0x530>)
 8006dca:	4a52      	ldr	r2, [pc, #328]	; (8006f14 <vTask_CONTR+0x530>)
 8006dcc:	6992      	ldr	r2, [r2, #24]
 8006dce:	2180      	movs	r1, #128	; 0x80
 8006dd0:	0189      	lsls	r1, r1, #6
 8006dd2:	430a      	orrs	r2, r1
 8006dd4:	619a      	str	r2, [r3, #24]
			}
		}
		//----------------   M7   ------------------------------------
		if (m[6].EN == 1){
 8006dd6:	4b4e      	ldr	r3, [pc, #312]	; (8006f10 <vTask_CONTR+0x52c>)
 8006dd8:	226c      	movs	r2, #108	; 0x6c
 8006dda:	5c9b      	ldrb	r3, [r3, r2]
 8006ddc:	b2db      	uxtb	r3, r3
 8006dde:	2b01      	cmp	r3, #1
 8006de0:	d13a      	bne.n	8006e58 <vTask_CONTR+0x474>
			if ( ((m[6].Start) == 0) & (m[6].curStep == 0) ) {
 8006de2:	4b4b      	ldr	r3, [pc, #300]	; (8006f10 <vTask_CONTR+0x52c>)
 8006de4:	226d      	movs	r2, #109	; 0x6d
 8006de6:	5c9b      	ldrb	r3, [r3, r2]
 8006de8:	b2db      	uxtb	r3, r3
 8006dea:	425a      	negs	r2, r3
 8006dec:	4153      	adcs	r3, r2
 8006dee:	b2db      	uxtb	r3, r3
 8006df0:	4a47      	ldr	r2, [pc, #284]	; (8006f10 <vTask_CONTR+0x52c>)
 8006df2:	2178      	movs	r1, #120	; 0x78
 8006df4:	5a52      	ldrh	r2, [r2, r1]
 8006df6:	b292      	uxth	r2, r2
 8006df8:	4251      	negs	r1, r2
 8006dfa:	414a      	adcs	r2, r1
 8006dfc:	b2d2      	uxtb	r2, r2
 8006dfe:	4013      	ands	r3, r2
 8006e00:	b2db      	uxtb	r3, r3
 8006e02:	2b00      	cmp	r3, #0
 8006e04:	d00a      	beq.n	8006e1c <vTask_CONTR+0x438>
				TIM3->CCR3 = 0;
 8006e06:	4b41      	ldr	r3, [pc, #260]	; (8006f0c <vTask_CONTR+0x528>)
 8006e08:	2200      	movs	r2, #0
 8006e0a:	63da      	str	r2, [r3, #60]	; 0x3c
				GPIOB->BSRR |= GPIO_BSRR_BR_14;
 8006e0c:	4b41      	ldr	r3, [pc, #260]	; (8006f14 <vTask_CONTR+0x530>)
 8006e0e:	4a41      	ldr	r2, [pc, #260]	; (8006f14 <vTask_CONTR+0x530>)
 8006e10:	6992      	ldr	r2, [r2, #24]
 8006e12:	2180      	movs	r1, #128	; 0x80
 8006e14:	05c9      	lsls	r1, r1, #23
 8006e16:	430a      	orrs	r2, r1
 8006e18:	619a      	str	r2, [r3, #24]
 8006e1a:	e01d      	b.n	8006e58 <vTask_CONTR+0x474>
			} else {
				TIM3->CCR3 = m[6].perStartPWM + ((m[6].curStep * m[6].StepSizeF) /100 );
 8006e1c:	4c3b      	ldr	r4, [pc, #236]	; (8006f0c <vTask_CONTR+0x528>)
 8006e1e:	4b3c      	ldr	r3, [pc, #240]	; (8006f10 <vTask_CONTR+0x52c>)
 8006e20:	2270      	movs	r2, #112	; 0x70
 8006e22:	5a9b      	ldrh	r3, [r3, r2]
 8006e24:	b29b      	uxth	r3, r3
 8006e26:	001d      	movs	r5, r3
 8006e28:	4b39      	ldr	r3, [pc, #228]	; (8006f10 <vTask_CONTR+0x52c>)
 8006e2a:	2278      	movs	r2, #120	; 0x78
 8006e2c:	5a9b      	ldrh	r3, [r3, r2]
 8006e2e:	b29b      	uxth	r3, r3
 8006e30:	0019      	movs	r1, r3
 8006e32:	4b37      	ldr	r3, [pc, #220]	; (8006f10 <vTask_CONTR+0x52c>)
 8006e34:	2276      	movs	r2, #118	; 0x76
 8006e36:	5a9b      	ldrh	r3, [r3, r2]
 8006e38:	b29b      	uxth	r3, r3
 8006e3a:	434b      	muls	r3, r1
 8006e3c:	2164      	movs	r1, #100	; 0x64
 8006e3e:	0018      	movs	r0, r3
 8006e40:	f000 f9dc 	bl	80071fc <__divsi3>
 8006e44:	0003      	movs	r3, r0
 8006e46:	18eb      	adds	r3, r5, r3
 8006e48:	63e3      	str	r3, [r4, #60]	; 0x3c
				GPIOB->BSRR |= GPIO_BSRR_BS_14;
 8006e4a:	4b32      	ldr	r3, [pc, #200]	; (8006f14 <vTask_CONTR+0x530>)
 8006e4c:	4a31      	ldr	r2, [pc, #196]	; (8006f14 <vTask_CONTR+0x530>)
 8006e4e:	6992      	ldr	r2, [r2, #24]
 8006e50:	2180      	movs	r1, #128	; 0x80
 8006e52:	01c9      	lsls	r1, r1, #7
 8006e54:	430a      	orrs	r2, r1
 8006e56:	619a      	str	r2, [r3, #24]
			}
		}
		//----------------   M8   ------------------------------------
		if (m[7].EN == 1){
 8006e58:	4b2d      	ldr	r3, [pc, #180]	; (8006f10 <vTask_CONTR+0x52c>)
 8006e5a:	227e      	movs	r2, #126	; 0x7e
 8006e5c:	5c9b      	ldrb	r3, [r3, r2]
 8006e5e:	b2db      	uxtb	r3, r3
 8006e60:	2b01      	cmp	r3, #1
 8006e62:	d13a      	bne.n	8006eda <vTask_CONTR+0x4f6>
			if ( ((m[7].Start) == 0) & (m[7].curStep == 0) ) {
 8006e64:	4b2a      	ldr	r3, [pc, #168]	; (8006f10 <vTask_CONTR+0x52c>)
 8006e66:	227f      	movs	r2, #127	; 0x7f
 8006e68:	5c9b      	ldrb	r3, [r3, r2]
 8006e6a:	b2db      	uxtb	r3, r3
 8006e6c:	425a      	negs	r2, r3
 8006e6e:	4153      	adcs	r3, r2
 8006e70:	b2db      	uxtb	r3, r3
 8006e72:	4a27      	ldr	r2, [pc, #156]	; (8006f10 <vTask_CONTR+0x52c>)
 8006e74:	218a      	movs	r1, #138	; 0x8a
 8006e76:	5a52      	ldrh	r2, [r2, r1]
 8006e78:	b292      	uxth	r2, r2
 8006e7a:	4251      	negs	r1, r2
 8006e7c:	414a      	adcs	r2, r1
 8006e7e:	b2d2      	uxtb	r2, r2
 8006e80:	4013      	ands	r3, r2
 8006e82:	b2db      	uxtb	r3, r3
 8006e84:	2b00      	cmp	r3, #0
 8006e86:	d00a      	beq.n	8006e9e <vTask_CONTR+0x4ba>
				TIM3->CCR4 = 0;
 8006e88:	4b20      	ldr	r3, [pc, #128]	; (8006f0c <vTask_CONTR+0x528>)
 8006e8a:	2200      	movs	r2, #0
 8006e8c:	641a      	str	r2, [r3, #64]	; 0x40
				GPIOB->BSRR |= GPIO_BSRR_BR_15;
 8006e8e:	4b21      	ldr	r3, [pc, #132]	; (8006f14 <vTask_CONTR+0x530>)
 8006e90:	4a20      	ldr	r2, [pc, #128]	; (8006f14 <vTask_CONTR+0x530>)
 8006e92:	6992      	ldr	r2, [r2, #24]
 8006e94:	2180      	movs	r1, #128	; 0x80
 8006e96:	0609      	lsls	r1, r1, #24
 8006e98:	430a      	orrs	r2, r1
 8006e9a:	619a      	str	r2, [r3, #24]
 8006e9c:	e01d      	b.n	8006eda <vTask_CONTR+0x4f6>
			} else {
				TIM3->CCR4 = m[7].perStartPWM + ((m[7].curStep * m[7].StepSizeF) /100 );
 8006e9e:	4c1b      	ldr	r4, [pc, #108]	; (8006f0c <vTask_CONTR+0x528>)
 8006ea0:	4b1b      	ldr	r3, [pc, #108]	; (8006f10 <vTask_CONTR+0x52c>)
 8006ea2:	2282      	movs	r2, #130	; 0x82
 8006ea4:	5a9b      	ldrh	r3, [r3, r2]
 8006ea6:	b29b      	uxth	r3, r3
 8006ea8:	001d      	movs	r5, r3
 8006eaa:	4b19      	ldr	r3, [pc, #100]	; (8006f10 <vTask_CONTR+0x52c>)
 8006eac:	228a      	movs	r2, #138	; 0x8a
 8006eae:	5a9b      	ldrh	r3, [r3, r2]
 8006eb0:	b29b      	uxth	r3, r3
 8006eb2:	0019      	movs	r1, r3
 8006eb4:	4b16      	ldr	r3, [pc, #88]	; (8006f10 <vTask_CONTR+0x52c>)
 8006eb6:	2288      	movs	r2, #136	; 0x88
 8006eb8:	5a9b      	ldrh	r3, [r3, r2]
 8006eba:	b29b      	uxth	r3, r3
 8006ebc:	434b      	muls	r3, r1
 8006ebe:	2164      	movs	r1, #100	; 0x64
 8006ec0:	0018      	movs	r0, r3
 8006ec2:	f000 f99b 	bl	80071fc <__divsi3>
 8006ec6:	0003      	movs	r3, r0
 8006ec8:	18eb      	adds	r3, r5, r3
 8006eca:	6423      	str	r3, [r4, #64]	; 0x40
				GPIOB->BSRR |= GPIO_BSRR_BS_15;
 8006ecc:	4b11      	ldr	r3, [pc, #68]	; (8006f14 <vTask_CONTR+0x530>)
 8006ece:	4a11      	ldr	r2, [pc, #68]	; (8006f14 <vTask_CONTR+0x530>)
 8006ed0:	6992      	ldr	r2, [r2, #24]
 8006ed2:	2180      	movs	r1, #128	; 0x80
 8006ed4:	0209      	lsls	r1, r1, #8
 8006ed6:	430a      	orrs	r2, r1
 8006ed8:	619a      	str	r2, [r3, #24]
			}
		}
		//--------------   RED INDICATOR   ----------------------------
		//RED LED is ON if Motion Sensor is triggered
		if ((GPIOB->IDR & GPIO_IDR_9) == 0 ) {
 8006eda:	4b0e      	ldr	r3, [pc, #56]	; (8006f14 <vTask_CONTR+0x530>)
 8006edc:	691a      	ldr	r2, [r3, #16]
 8006ede:	2380      	movs	r3, #128	; 0x80
 8006ee0:	009b      	lsls	r3, r3, #2
 8006ee2:	4013      	ands	r3, r2
 8006ee4:	d107      	bne.n	8006ef6 <vTask_CONTR+0x512>
			GPIOB->BSRR |= GPIO_BSRR_BS_11;
 8006ee6:	4b0b      	ldr	r3, [pc, #44]	; (8006f14 <vTask_CONTR+0x530>)
 8006ee8:	4a0a      	ldr	r2, [pc, #40]	; (8006f14 <vTask_CONTR+0x530>)
 8006eea:	6992      	ldr	r2, [r2, #24]
 8006eec:	2180      	movs	r1, #128	; 0x80
 8006eee:	0109      	lsls	r1, r1, #4
 8006ef0:	430a      	orrs	r2, r1
 8006ef2:	619a      	str	r2, [r3, #24]
 8006ef4:	e006      	b.n	8006f04 <vTask_CONTR+0x520>
		} else {
			GPIOB->BSRR |= GPIO_BSRR_BR_11;
 8006ef6:	4b07      	ldr	r3, [pc, #28]	; (8006f14 <vTask_CONTR+0x530>)
 8006ef8:	4a06      	ldr	r2, [pc, #24]	; (8006f14 <vTask_CONTR+0x530>)
 8006efa:	6992      	ldr	r2, [r2, #24]
 8006efc:	2180      	movs	r1, #128	; 0x80
 8006efe:	0509      	lsls	r1, r1, #20
 8006f00:	430a      	orrs	r2, r1
 8006f02:	619a      	str	r2, [r3, #24]
		}



		vTaskDelay(TIME_STEP);
 8006f04:	200a      	movs	r0, #10
 8006f06:	f7fc fd75 	bl	80039f4 <vTaskDelay>
		for (uint8_t i = 0; i < NUMBER_OF_MOTOR; i++) {
 8006f0a:	e56f      	b.n	80069ec <vTask_CONTR+0x8>
 8006f0c:	40000400 	.word	0x40000400
 8006f10:	20000e1c 	.word	0x20000e1c
 8006f14:	48000400 	.word	0x48000400

08006f18 <delay>:
}
//------------------------------------------------------------------------
//---------   Delay function at the initialization stage   ---------------
//------------------------------------------------------------------------
void delay(uint32_t ms)
{
 8006f18:	b580      	push	{r7, lr}
 8006f1a:	b084      	sub	sp, #16
 8006f1c:	af00      	add	r7, sp, #0
 8006f1e:	6078      	str	r0, [r7, #4]
    volatile uint32_t nCount;

	nCount=(SystemCoreClock/10000)*ms;
 8006f20:	4b0a      	ldr	r3, [pc, #40]	; (8006f4c <delay+0x34>)
 8006f22:	681b      	ldr	r3, [r3, #0]
 8006f24:	490a      	ldr	r1, [pc, #40]	; (8006f50 <delay+0x38>)
 8006f26:	0018      	movs	r0, r3
 8006f28:	f000 f8de 	bl	80070e8 <__udivsi3>
 8006f2c:	0003      	movs	r3, r0
 8006f2e:	001a      	movs	r2, r3
 8006f30:	687b      	ldr	r3, [r7, #4]
 8006f32:	4353      	muls	r3, r2
 8006f34:	60fb      	str	r3, [r7, #12]
	for (; nCount!=0; nCount--);
 8006f36:	e002      	b.n	8006f3e <delay+0x26>
 8006f38:	68fb      	ldr	r3, [r7, #12]
 8006f3a:	3b01      	subs	r3, #1
 8006f3c:	60fb      	str	r3, [r7, #12]
 8006f3e:	68fb      	ldr	r3, [r7, #12]
 8006f40:	2b00      	cmp	r3, #0
 8006f42:	d1f9      	bne.n	8006f38 <delay+0x20>
}
 8006f44:	46c0      	nop			; (mov r8, r8)
 8006f46:	46bd      	mov	sp, r7
 8006f48:	b004      	add	sp, #16
 8006f4a:	bd80      	pop	{r7, pc}
 8006f4c:	20000044 	.word	0x20000044
 8006f50:	00002710 	.word	0x00002710

08006f54 <vApplicationIdleHook>:
//------------------------------------------------------------------------
//------------------------------------------------------------------------
//------------------------------------------------------------------------
/*******************************************************************/
void vApplicationIdleHook( void )
{
 8006f54:	b580      	push	{r7, lr}
 8006f56:	af00      	add	r7, sp, #0
}
 8006f58:	46c0      	nop			; (mov r8, r8)
 8006f5a:	46bd      	mov	sp, r7
 8006f5c:	bd80      	pop	{r7, pc}

08006f5e <vApplicationMallocFailedHook>:



/*******************************************************************/
void vApplicationMallocFailedHook( void )
{
 8006f5e:	b580      	push	{r7, lr}
 8006f60:	af00      	add	r7, sp, #0
    for( ;; );
 8006f62:	e7fe      	b.n	8006f62 <vApplicationMallocFailedHook+0x4>

08006f64 <vApplicationStackOverflowHook>:



/*******************************************************************/
void vApplicationStackOverflowHook( xTaskHandle pxTask, signed char *pcTaskName )
{
 8006f64:	b580      	push	{r7, lr}
 8006f66:	b082      	sub	sp, #8
 8006f68:	af00      	add	r7, sp, #0
 8006f6a:	6078      	str	r0, [r7, #4]
 8006f6c:	6039      	str	r1, [r7, #0]
    ( void ) pcTaskName;
    ( void ) pxTask;

    for( ;; );
 8006f6e:	e7fe      	b.n	8006f6e <vApplicationStackOverflowHook+0xa>

08006f70 <vApplicationTickHook>:



/*******************************************************************/
void vApplicationTickHook( void )
{
 8006f70:	b580      	push	{r7, lr}
 8006f72:	af00      	add	r7, sp, #0
}
 8006f74:	46c0      	nop			; (mov r8, r8)
 8006f76:	46bd      	mov	sp, r7
 8006f78:	bd80      	pop	{r7, pc}
 8006f7a:	46c0      	nop			; (mov r8, r8)
 8006f7c:	08007548 	.word	0x08007548
 8006f80:	20000000 	.word	0x20000000
 8006f84:	2000005c 	.word	0x2000005c
 8006f88:	2000005c 	.word	0x2000005c
 8006f8c:	20000eac 	.word	0x20000eac

08006f90 <UART2_Init>:


//------------------------------------------------------------------------
//---------------------------   UART init   -------------------------------
//------------------------------------------------------------------------
void UART2_Init(void){
 8006f90:	b580      	push	{r7, lr}
 8006f92:	af00      	add	r7, sp, #0
	;
}
 8006f94:	46c0      	nop			; (mov r8, r8)
 8006f96:	46bd      	mov	sp, r7
 8006f98:	bd80      	pop	{r7, pc}

08006f9a <UART1_Init>:

void UART1_Init(void){
 8006f9a:	b580      	push	{r7, lr}
 8006f9c:	af00      	add	r7, sp, #0
		RCC->AHBENR|= RCC_AHBENR_GPIOAEN; 		//Clock Enable Port B
 8006f9e:	4b24      	ldr	r3, [pc, #144]	; (8007030 <UART1_Init+0x96>)
 8006fa0:	4a23      	ldr	r2, [pc, #140]	; (8007030 <UART1_Init+0x96>)
 8006fa2:	6952      	ldr	r2, [r2, #20]
 8006fa4:	2180      	movs	r1, #128	; 0x80
 8006fa6:	0289      	lsls	r1, r1, #10
 8006fa8:	430a      	orrs	r2, r1
 8006faa:	615a      	str	r2, [r3, #20]
		RCC->APB2ENR|= RCC_APB2ENR_USART1EN; 	//USART1 clock enable
 8006fac:	4b20      	ldr	r3, [pc, #128]	; (8007030 <UART1_Init+0x96>)
 8006fae:	4a20      	ldr	r2, [pc, #128]	; (8007030 <UART1_Init+0x96>)
 8006fb0:	6992      	ldr	r2, [r2, #24]
 8006fb2:	2180      	movs	r1, #128	; 0x80
 8006fb4:	01c9      	lsls	r1, r1, #7
 8006fb6:	430a      	orrs	r2, r1
 8006fb8:	619a      	str	r2, [r3, #24]

		// INIT TX (PA9) Alternative PUSH PULL
		GPIOA ->MODER |= GPIO_MODER_MODER9_1; 	// Alternative
 8006fba:	2390      	movs	r3, #144	; 0x90
 8006fbc:	05db      	lsls	r3, r3, #23
 8006fbe:	2290      	movs	r2, #144	; 0x90
 8006fc0:	05d2      	lsls	r2, r2, #23
 8006fc2:	6812      	ldr	r2, [r2, #0]
 8006fc4:	2180      	movs	r1, #128	; 0x80
 8006fc6:	0309      	lsls	r1, r1, #12
 8006fc8:	430a      	orrs	r2, r1
 8006fca:	601a      	str	r2, [r3, #0]
		GPIOA ->OTYPER &= ~GPIO_OTYPER_OT_9;  	// PUSH PULL
 8006fcc:	2390      	movs	r3, #144	; 0x90
 8006fce:	05db      	lsls	r3, r3, #23
 8006fd0:	2290      	movs	r2, #144	; 0x90
 8006fd2:	05d2      	lsls	r2, r2, #23
 8006fd4:	6852      	ldr	r2, [r2, #4]
 8006fd6:	4917      	ldr	r1, [pc, #92]	; (8007034 <UART1_Init+0x9a>)
 8006fd8:	400a      	ands	r2, r1
 8006fda:	605a      	str	r2, [r3, #4]

		//GPIOA->AFR[0] |= GPIO_AFRL_AFSEL2_Msk;
		//GPIOA->AFR[0] |= (0x01<< 2*4);

		// INIT RX (PA10) Alternative OPEN DRAIN INPUT
		GPIOA ->MODER |= GPIO_MODER_MODER10_1; //Alternative
 8006fdc:	2390      	movs	r3, #144	; 0x90
 8006fde:	05db      	lsls	r3, r3, #23
 8006fe0:	2290      	movs	r2, #144	; 0x90
 8006fe2:	05d2      	lsls	r2, r2, #23
 8006fe4:	6812      	ldr	r2, [r2, #0]
 8006fe6:	2180      	movs	r1, #128	; 0x80
 8006fe8:	0389      	lsls	r1, r1, #14
 8006fea:	430a      	orrs	r2, r1
 8006fec:	601a      	str	r2, [r3, #0]
		GPIOA ->OTYPER |= GPIO_OTYPER_OT_10; // "RX" - OPEN DRAIN
 8006fee:	2390      	movs	r3, #144	; 0x90
 8006ff0:	05db      	lsls	r3, r3, #23
 8006ff2:	2290      	movs	r2, #144	; 0x90
 8006ff4:	05d2      	lsls	r2, r2, #23
 8006ff6:	6852      	ldr	r2, [r2, #4]
 8006ff8:	2180      	movs	r1, #128	; 0x80
 8006ffa:	00c9      	lsls	r1, r1, #3
 8006ffc:	430a      	orrs	r2, r1
 8006ffe:	605a      	str	r2, [r3, #4]

		//UART_BRR = (Fck + baudrate/2)/baudrate;  Fck - clock AHBENR
		//(8 000 000 + 4800)/9600 = 833 (0x341)
		USART1->BRR = 0x6D4; //Baud rate 9600.
 8007000:	4b0d      	ldr	r3, [pc, #52]	; (8007038 <UART1_Init+0x9e>)
 8007002:	4a0e      	ldr	r2, [pc, #56]	; (800703c <UART1_Init+0xa2>)
 8007004:	60da      	str	r2, [r3, #12]

		USART1->CR1 |= USART_CR1_RE; //Receiver Enable
 8007006:	4b0c      	ldr	r3, [pc, #48]	; (8007038 <UART1_Init+0x9e>)
 8007008:	4a0b      	ldr	r2, [pc, #44]	; (8007038 <UART1_Init+0x9e>)
 800700a:	6812      	ldr	r2, [r2, #0]
 800700c:	2104      	movs	r1, #4
 800700e:	430a      	orrs	r2, r1
 8007010:	601a      	str	r2, [r3, #0]
		USART1->CR1 |= USART_CR1_TE; //Transmitter Enable
 8007012:	4b09      	ldr	r3, [pc, #36]	; (8007038 <UART1_Init+0x9e>)
 8007014:	4a08      	ldr	r2, [pc, #32]	; (8007038 <UART1_Init+0x9e>)
 8007016:	6812      	ldr	r2, [r2, #0]
 8007018:	2108      	movs	r1, #8
 800701a:	430a      	orrs	r2, r1
 800701c:	601a      	str	r2, [r3, #0]
		USART1->CR1 |= USART_CR1_UE; //USART Enable
 800701e:	4b06      	ldr	r3, [pc, #24]	; (8007038 <UART1_Init+0x9e>)
 8007020:	4a05      	ldr	r2, [pc, #20]	; (8007038 <UART1_Init+0x9e>)
 8007022:	6812      	ldr	r2, [r2, #0]
 8007024:	2101      	movs	r1, #1
 8007026:	430a      	orrs	r2, r1
 8007028:	601a      	str	r2, [r3, #0]

}
 800702a:	46c0      	nop			; (mov r8, r8)
 800702c:	46bd      	mov	sp, r7
 800702e:	bd80      	pop	{r7, pc}
 8007030:	40021000 	.word	0x40021000
 8007034:	fffffdff 	.word	0xfffffdff
 8007038:	40013800 	.word	0x40013800
 800703c:	000006d4 	.word	0x000006d4

08007040 <USART2_Send>:

//------------------------------------------------------------------------
void USART2_Send (char chr)
{
 8007040:	b580      	push	{r7, lr}
 8007042:	b082      	sub	sp, #8
 8007044:	af00      	add	r7, sp, #0
 8007046:	0002      	movs	r2, r0
 8007048:	1dfb      	adds	r3, r7, #7
 800704a:	701a      	strb	r2, [r3, #0]
	while(!( USART2->ISR & USART_ISR_TC)); //Wait, until transmit not complete
 800704c:	46c0      	nop			; (mov r8, r8)
 800704e:	4b07      	ldr	r3, [pc, #28]	; (800706c <USART2_Send+0x2c>)
 8007050:	69db      	ldr	r3, [r3, #28]
 8007052:	2240      	movs	r2, #64	; 0x40
 8007054:	4013      	ands	r3, r2
 8007056:	d0fa      	beq.n	800704e <USART2_Send+0xe>
	USART2->TDR = chr;
 8007058:	4a04      	ldr	r2, [pc, #16]	; (800706c <USART2_Send+0x2c>)
 800705a:	1dfb      	adds	r3, r7, #7
 800705c:	781b      	ldrb	r3, [r3, #0]
 800705e:	b29b      	uxth	r3, r3
 8007060:	8513      	strh	r3, [r2, #40]	; 0x28
}
 8007062:	46c0      	nop			; (mov r8, r8)
 8007064:	46bd      	mov	sp, r7
 8007066:	b002      	add	sp, #8
 8007068:	bd80      	pop	{r7, pc}
 800706a:	46c0      	nop			; (mov r8, r8)
 800706c:	40004400 	.word	0x40004400

08007070 <USART1_Send>:
//------------------------------------------------------------------------
void USART1_Send (char chr)
{
 8007070:	b580      	push	{r7, lr}
 8007072:	b082      	sub	sp, #8
 8007074:	af00      	add	r7, sp, #0
 8007076:	0002      	movs	r2, r0
 8007078:	1dfb      	adds	r3, r7, #7
 800707a:	701a      	strb	r2, [r3, #0]
	while(!( USART1->ISR & USART_ISR_TC)); //Wait, until transmit not complete
 800707c:	46c0      	nop			; (mov r8, r8)
 800707e:	4b07      	ldr	r3, [pc, #28]	; (800709c <USART1_Send+0x2c>)
 8007080:	69db      	ldr	r3, [r3, #28]
 8007082:	2240      	movs	r2, #64	; 0x40
 8007084:	4013      	ands	r3, r2
 8007086:	d0fa      	beq.n	800707e <USART1_Send+0xe>
	USART1->TDR = chr;
 8007088:	4a04      	ldr	r2, [pc, #16]	; (800709c <USART1_Send+0x2c>)
 800708a:	1dfb      	adds	r3, r7, #7
 800708c:	781b      	ldrb	r3, [r3, #0]
 800708e:	b29b      	uxth	r3, r3
 8007090:	8513      	strh	r3, [r2, #40]	; 0x28
}
 8007092:	46c0      	nop			; (mov r8, r8)
 8007094:	46bd      	mov	sp, r7
 8007096:	b002      	add	sp, #8
 8007098:	bd80      	pop	{r7, pc}
 800709a:	46c0      	nop			; (mov r8, r8)
 800709c:	40013800 	.word	0x40013800

080070a0 <USART2_Send_Str>:
//------------------------------------------------------------------------
void USART2_Send_Str (char* str)
{
 80070a0:	b580      	push	{r7, lr}
 80070a2:	b084      	sub	sp, #16
 80070a4:	af00      	add	r7, sp, #0
 80070a6:	6078      	str	r0, [r7, #4]
	uint8_t i = 0;
 80070a8:	230f      	movs	r3, #15
 80070aa:	18fb      	adds	r3, r7, r3
 80070ac:	2200      	movs	r2, #0
 80070ae:	701a      	strb	r2, [r3, #0]

	while(str[i])
 80070b0:	e00d      	b.n	80070ce <USART2_Send_Str+0x2e>
	USART2_Send (str[i++]);
 80070b2:	230f      	movs	r3, #15
 80070b4:	18fb      	adds	r3, r7, r3
 80070b6:	781b      	ldrb	r3, [r3, #0]
 80070b8:	220f      	movs	r2, #15
 80070ba:	18ba      	adds	r2, r7, r2
 80070bc:	1c59      	adds	r1, r3, #1
 80070be:	7011      	strb	r1, [r2, #0]
 80070c0:	001a      	movs	r2, r3
 80070c2:	687b      	ldr	r3, [r7, #4]
 80070c4:	189b      	adds	r3, r3, r2
 80070c6:	781b      	ldrb	r3, [r3, #0]
 80070c8:	0018      	movs	r0, r3
 80070ca:	f7ff ffb9 	bl	8007040 <USART2_Send>
	while(str[i])
 80070ce:	230f      	movs	r3, #15
 80070d0:	18fb      	adds	r3, r7, r3
 80070d2:	781b      	ldrb	r3, [r3, #0]
 80070d4:	687a      	ldr	r2, [r7, #4]
 80070d6:	18d3      	adds	r3, r2, r3
 80070d8:	781b      	ldrb	r3, [r3, #0]
 80070da:	2b00      	cmp	r3, #0
 80070dc:	d1e9      	bne.n	80070b2 <USART2_Send_Str+0x12>
}
 80070de:	46c0      	nop			; (mov r8, r8)
 80070e0:	46bd      	mov	sp, r7
 80070e2:	b004      	add	sp, #16
 80070e4:	bd80      	pop	{r7, pc}
 80070e6:	46c0      	nop			; (mov r8, r8)

080070e8 <__udivsi3>:
 80070e8:	2200      	movs	r2, #0
 80070ea:	0843      	lsrs	r3, r0, #1
 80070ec:	428b      	cmp	r3, r1
 80070ee:	d374      	bcc.n	80071da <__udivsi3+0xf2>
 80070f0:	0903      	lsrs	r3, r0, #4
 80070f2:	428b      	cmp	r3, r1
 80070f4:	d35f      	bcc.n	80071b6 <__udivsi3+0xce>
 80070f6:	0a03      	lsrs	r3, r0, #8
 80070f8:	428b      	cmp	r3, r1
 80070fa:	d344      	bcc.n	8007186 <__udivsi3+0x9e>
 80070fc:	0b03      	lsrs	r3, r0, #12
 80070fe:	428b      	cmp	r3, r1
 8007100:	d328      	bcc.n	8007154 <__udivsi3+0x6c>
 8007102:	0c03      	lsrs	r3, r0, #16
 8007104:	428b      	cmp	r3, r1
 8007106:	d30d      	bcc.n	8007124 <__udivsi3+0x3c>
 8007108:	22ff      	movs	r2, #255	; 0xff
 800710a:	0209      	lsls	r1, r1, #8
 800710c:	ba12      	rev	r2, r2
 800710e:	0c03      	lsrs	r3, r0, #16
 8007110:	428b      	cmp	r3, r1
 8007112:	d302      	bcc.n	800711a <__udivsi3+0x32>
 8007114:	1212      	asrs	r2, r2, #8
 8007116:	0209      	lsls	r1, r1, #8
 8007118:	d065      	beq.n	80071e6 <__udivsi3+0xfe>
 800711a:	0b03      	lsrs	r3, r0, #12
 800711c:	428b      	cmp	r3, r1
 800711e:	d319      	bcc.n	8007154 <__udivsi3+0x6c>
 8007120:	e000      	b.n	8007124 <__udivsi3+0x3c>
 8007122:	0a09      	lsrs	r1, r1, #8
 8007124:	0bc3      	lsrs	r3, r0, #15
 8007126:	428b      	cmp	r3, r1
 8007128:	d301      	bcc.n	800712e <__udivsi3+0x46>
 800712a:	03cb      	lsls	r3, r1, #15
 800712c:	1ac0      	subs	r0, r0, r3
 800712e:	4152      	adcs	r2, r2
 8007130:	0b83      	lsrs	r3, r0, #14
 8007132:	428b      	cmp	r3, r1
 8007134:	d301      	bcc.n	800713a <__udivsi3+0x52>
 8007136:	038b      	lsls	r3, r1, #14
 8007138:	1ac0      	subs	r0, r0, r3
 800713a:	4152      	adcs	r2, r2
 800713c:	0b43      	lsrs	r3, r0, #13
 800713e:	428b      	cmp	r3, r1
 8007140:	d301      	bcc.n	8007146 <__udivsi3+0x5e>
 8007142:	034b      	lsls	r3, r1, #13
 8007144:	1ac0      	subs	r0, r0, r3
 8007146:	4152      	adcs	r2, r2
 8007148:	0b03      	lsrs	r3, r0, #12
 800714a:	428b      	cmp	r3, r1
 800714c:	d301      	bcc.n	8007152 <__udivsi3+0x6a>
 800714e:	030b      	lsls	r3, r1, #12
 8007150:	1ac0      	subs	r0, r0, r3
 8007152:	4152      	adcs	r2, r2
 8007154:	0ac3      	lsrs	r3, r0, #11
 8007156:	428b      	cmp	r3, r1
 8007158:	d301      	bcc.n	800715e <__udivsi3+0x76>
 800715a:	02cb      	lsls	r3, r1, #11
 800715c:	1ac0      	subs	r0, r0, r3
 800715e:	4152      	adcs	r2, r2
 8007160:	0a83      	lsrs	r3, r0, #10
 8007162:	428b      	cmp	r3, r1
 8007164:	d301      	bcc.n	800716a <__udivsi3+0x82>
 8007166:	028b      	lsls	r3, r1, #10
 8007168:	1ac0      	subs	r0, r0, r3
 800716a:	4152      	adcs	r2, r2
 800716c:	0a43      	lsrs	r3, r0, #9
 800716e:	428b      	cmp	r3, r1
 8007170:	d301      	bcc.n	8007176 <__udivsi3+0x8e>
 8007172:	024b      	lsls	r3, r1, #9
 8007174:	1ac0      	subs	r0, r0, r3
 8007176:	4152      	adcs	r2, r2
 8007178:	0a03      	lsrs	r3, r0, #8
 800717a:	428b      	cmp	r3, r1
 800717c:	d301      	bcc.n	8007182 <__udivsi3+0x9a>
 800717e:	020b      	lsls	r3, r1, #8
 8007180:	1ac0      	subs	r0, r0, r3
 8007182:	4152      	adcs	r2, r2
 8007184:	d2cd      	bcs.n	8007122 <__udivsi3+0x3a>
 8007186:	09c3      	lsrs	r3, r0, #7
 8007188:	428b      	cmp	r3, r1
 800718a:	d301      	bcc.n	8007190 <__udivsi3+0xa8>
 800718c:	01cb      	lsls	r3, r1, #7
 800718e:	1ac0      	subs	r0, r0, r3
 8007190:	4152      	adcs	r2, r2
 8007192:	0983      	lsrs	r3, r0, #6
 8007194:	428b      	cmp	r3, r1
 8007196:	d301      	bcc.n	800719c <__udivsi3+0xb4>
 8007198:	018b      	lsls	r3, r1, #6
 800719a:	1ac0      	subs	r0, r0, r3
 800719c:	4152      	adcs	r2, r2
 800719e:	0943      	lsrs	r3, r0, #5
 80071a0:	428b      	cmp	r3, r1
 80071a2:	d301      	bcc.n	80071a8 <__udivsi3+0xc0>
 80071a4:	014b      	lsls	r3, r1, #5
 80071a6:	1ac0      	subs	r0, r0, r3
 80071a8:	4152      	adcs	r2, r2
 80071aa:	0903      	lsrs	r3, r0, #4
 80071ac:	428b      	cmp	r3, r1
 80071ae:	d301      	bcc.n	80071b4 <__udivsi3+0xcc>
 80071b0:	010b      	lsls	r3, r1, #4
 80071b2:	1ac0      	subs	r0, r0, r3
 80071b4:	4152      	adcs	r2, r2
 80071b6:	08c3      	lsrs	r3, r0, #3
 80071b8:	428b      	cmp	r3, r1
 80071ba:	d301      	bcc.n	80071c0 <__udivsi3+0xd8>
 80071bc:	00cb      	lsls	r3, r1, #3
 80071be:	1ac0      	subs	r0, r0, r3
 80071c0:	4152      	adcs	r2, r2
 80071c2:	0883      	lsrs	r3, r0, #2
 80071c4:	428b      	cmp	r3, r1
 80071c6:	d301      	bcc.n	80071cc <__udivsi3+0xe4>
 80071c8:	008b      	lsls	r3, r1, #2
 80071ca:	1ac0      	subs	r0, r0, r3
 80071cc:	4152      	adcs	r2, r2
 80071ce:	0843      	lsrs	r3, r0, #1
 80071d0:	428b      	cmp	r3, r1
 80071d2:	d301      	bcc.n	80071d8 <__udivsi3+0xf0>
 80071d4:	004b      	lsls	r3, r1, #1
 80071d6:	1ac0      	subs	r0, r0, r3
 80071d8:	4152      	adcs	r2, r2
 80071da:	1a41      	subs	r1, r0, r1
 80071dc:	d200      	bcs.n	80071e0 <__udivsi3+0xf8>
 80071de:	4601      	mov	r1, r0
 80071e0:	4152      	adcs	r2, r2
 80071e2:	4610      	mov	r0, r2
 80071e4:	4770      	bx	lr
 80071e6:	e7ff      	b.n	80071e8 <__udivsi3+0x100>
 80071e8:	b501      	push	{r0, lr}
 80071ea:	2000      	movs	r0, #0
 80071ec:	f000 f8f0 	bl	80073d0 <__aeabi_idiv0>
 80071f0:	bd02      	pop	{r1, pc}
 80071f2:	46c0      	nop			; (mov r8, r8)

080071f4 <__aeabi_uidivmod>:
 80071f4:	2900      	cmp	r1, #0
 80071f6:	d0f7      	beq.n	80071e8 <__udivsi3+0x100>
 80071f8:	e776      	b.n	80070e8 <__udivsi3>
 80071fa:	4770      	bx	lr

080071fc <__divsi3>:
 80071fc:	4603      	mov	r3, r0
 80071fe:	430b      	orrs	r3, r1
 8007200:	d47f      	bmi.n	8007302 <__divsi3+0x106>
 8007202:	2200      	movs	r2, #0
 8007204:	0843      	lsrs	r3, r0, #1
 8007206:	428b      	cmp	r3, r1
 8007208:	d374      	bcc.n	80072f4 <__divsi3+0xf8>
 800720a:	0903      	lsrs	r3, r0, #4
 800720c:	428b      	cmp	r3, r1
 800720e:	d35f      	bcc.n	80072d0 <__divsi3+0xd4>
 8007210:	0a03      	lsrs	r3, r0, #8
 8007212:	428b      	cmp	r3, r1
 8007214:	d344      	bcc.n	80072a0 <__divsi3+0xa4>
 8007216:	0b03      	lsrs	r3, r0, #12
 8007218:	428b      	cmp	r3, r1
 800721a:	d328      	bcc.n	800726e <__divsi3+0x72>
 800721c:	0c03      	lsrs	r3, r0, #16
 800721e:	428b      	cmp	r3, r1
 8007220:	d30d      	bcc.n	800723e <__divsi3+0x42>
 8007222:	22ff      	movs	r2, #255	; 0xff
 8007224:	0209      	lsls	r1, r1, #8
 8007226:	ba12      	rev	r2, r2
 8007228:	0c03      	lsrs	r3, r0, #16
 800722a:	428b      	cmp	r3, r1
 800722c:	d302      	bcc.n	8007234 <__divsi3+0x38>
 800722e:	1212      	asrs	r2, r2, #8
 8007230:	0209      	lsls	r1, r1, #8
 8007232:	d065      	beq.n	8007300 <__divsi3+0x104>
 8007234:	0b03      	lsrs	r3, r0, #12
 8007236:	428b      	cmp	r3, r1
 8007238:	d319      	bcc.n	800726e <__divsi3+0x72>
 800723a:	e000      	b.n	800723e <__divsi3+0x42>
 800723c:	0a09      	lsrs	r1, r1, #8
 800723e:	0bc3      	lsrs	r3, r0, #15
 8007240:	428b      	cmp	r3, r1
 8007242:	d301      	bcc.n	8007248 <__divsi3+0x4c>
 8007244:	03cb      	lsls	r3, r1, #15
 8007246:	1ac0      	subs	r0, r0, r3
 8007248:	4152      	adcs	r2, r2
 800724a:	0b83      	lsrs	r3, r0, #14
 800724c:	428b      	cmp	r3, r1
 800724e:	d301      	bcc.n	8007254 <__divsi3+0x58>
 8007250:	038b      	lsls	r3, r1, #14
 8007252:	1ac0      	subs	r0, r0, r3
 8007254:	4152      	adcs	r2, r2
 8007256:	0b43      	lsrs	r3, r0, #13
 8007258:	428b      	cmp	r3, r1
 800725a:	d301      	bcc.n	8007260 <__divsi3+0x64>
 800725c:	034b      	lsls	r3, r1, #13
 800725e:	1ac0      	subs	r0, r0, r3
 8007260:	4152      	adcs	r2, r2
 8007262:	0b03      	lsrs	r3, r0, #12
 8007264:	428b      	cmp	r3, r1
 8007266:	d301      	bcc.n	800726c <__divsi3+0x70>
 8007268:	030b      	lsls	r3, r1, #12
 800726a:	1ac0      	subs	r0, r0, r3
 800726c:	4152      	adcs	r2, r2
 800726e:	0ac3      	lsrs	r3, r0, #11
 8007270:	428b      	cmp	r3, r1
 8007272:	d301      	bcc.n	8007278 <__divsi3+0x7c>
 8007274:	02cb      	lsls	r3, r1, #11
 8007276:	1ac0      	subs	r0, r0, r3
 8007278:	4152      	adcs	r2, r2
 800727a:	0a83      	lsrs	r3, r0, #10
 800727c:	428b      	cmp	r3, r1
 800727e:	d301      	bcc.n	8007284 <__divsi3+0x88>
 8007280:	028b      	lsls	r3, r1, #10
 8007282:	1ac0      	subs	r0, r0, r3
 8007284:	4152      	adcs	r2, r2
 8007286:	0a43      	lsrs	r3, r0, #9
 8007288:	428b      	cmp	r3, r1
 800728a:	d301      	bcc.n	8007290 <__divsi3+0x94>
 800728c:	024b      	lsls	r3, r1, #9
 800728e:	1ac0      	subs	r0, r0, r3
 8007290:	4152      	adcs	r2, r2
 8007292:	0a03      	lsrs	r3, r0, #8
 8007294:	428b      	cmp	r3, r1
 8007296:	d301      	bcc.n	800729c <__divsi3+0xa0>
 8007298:	020b      	lsls	r3, r1, #8
 800729a:	1ac0      	subs	r0, r0, r3
 800729c:	4152      	adcs	r2, r2
 800729e:	d2cd      	bcs.n	800723c <__divsi3+0x40>
 80072a0:	09c3      	lsrs	r3, r0, #7
 80072a2:	428b      	cmp	r3, r1
 80072a4:	d301      	bcc.n	80072aa <__divsi3+0xae>
 80072a6:	01cb      	lsls	r3, r1, #7
 80072a8:	1ac0      	subs	r0, r0, r3
 80072aa:	4152      	adcs	r2, r2
 80072ac:	0983      	lsrs	r3, r0, #6
 80072ae:	428b      	cmp	r3, r1
 80072b0:	d301      	bcc.n	80072b6 <__divsi3+0xba>
 80072b2:	018b      	lsls	r3, r1, #6
 80072b4:	1ac0      	subs	r0, r0, r3
 80072b6:	4152      	adcs	r2, r2
 80072b8:	0943      	lsrs	r3, r0, #5
 80072ba:	428b      	cmp	r3, r1
 80072bc:	d301      	bcc.n	80072c2 <__divsi3+0xc6>
 80072be:	014b      	lsls	r3, r1, #5
 80072c0:	1ac0      	subs	r0, r0, r3
 80072c2:	4152      	adcs	r2, r2
 80072c4:	0903      	lsrs	r3, r0, #4
 80072c6:	428b      	cmp	r3, r1
 80072c8:	d301      	bcc.n	80072ce <__divsi3+0xd2>
 80072ca:	010b      	lsls	r3, r1, #4
 80072cc:	1ac0      	subs	r0, r0, r3
 80072ce:	4152      	adcs	r2, r2
 80072d0:	08c3      	lsrs	r3, r0, #3
 80072d2:	428b      	cmp	r3, r1
 80072d4:	d301      	bcc.n	80072da <__divsi3+0xde>
 80072d6:	00cb      	lsls	r3, r1, #3
 80072d8:	1ac0      	subs	r0, r0, r3
 80072da:	4152      	adcs	r2, r2
 80072dc:	0883      	lsrs	r3, r0, #2
 80072de:	428b      	cmp	r3, r1
 80072e0:	d301      	bcc.n	80072e6 <__divsi3+0xea>
 80072e2:	008b      	lsls	r3, r1, #2
 80072e4:	1ac0      	subs	r0, r0, r3
 80072e6:	4152      	adcs	r2, r2
 80072e8:	0843      	lsrs	r3, r0, #1
 80072ea:	428b      	cmp	r3, r1
 80072ec:	d301      	bcc.n	80072f2 <__divsi3+0xf6>
 80072ee:	004b      	lsls	r3, r1, #1
 80072f0:	1ac0      	subs	r0, r0, r3
 80072f2:	4152      	adcs	r2, r2
 80072f4:	1a41      	subs	r1, r0, r1
 80072f6:	d200      	bcs.n	80072fa <__divsi3+0xfe>
 80072f8:	4601      	mov	r1, r0
 80072fa:	4152      	adcs	r2, r2
 80072fc:	4610      	mov	r0, r2
 80072fe:	4770      	bx	lr
 8007300:	e05d      	b.n	80073be <__divsi3+0x1c2>
 8007302:	0fca      	lsrs	r2, r1, #31
 8007304:	d000      	beq.n	8007308 <__divsi3+0x10c>
 8007306:	4249      	negs	r1, r1
 8007308:	1003      	asrs	r3, r0, #32
 800730a:	d300      	bcc.n	800730e <__divsi3+0x112>
 800730c:	4240      	negs	r0, r0
 800730e:	4053      	eors	r3, r2
 8007310:	2200      	movs	r2, #0
 8007312:	469c      	mov	ip, r3
 8007314:	0903      	lsrs	r3, r0, #4
 8007316:	428b      	cmp	r3, r1
 8007318:	d32d      	bcc.n	8007376 <__divsi3+0x17a>
 800731a:	0a03      	lsrs	r3, r0, #8
 800731c:	428b      	cmp	r3, r1
 800731e:	d312      	bcc.n	8007346 <__divsi3+0x14a>
 8007320:	22fc      	movs	r2, #252	; 0xfc
 8007322:	0189      	lsls	r1, r1, #6
 8007324:	ba12      	rev	r2, r2
 8007326:	0a03      	lsrs	r3, r0, #8
 8007328:	428b      	cmp	r3, r1
 800732a:	d30c      	bcc.n	8007346 <__divsi3+0x14a>
 800732c:	0189      	lsls	r1, r1, #6
 800732e:	1192      	asrs	r2, r2, #6
 8007330:	428b      	cmp	r3, r1
 8007332:	d308      	bcc.n	8007346 <__divsi3+0x14a>
 8007334:	0189      	lsls	r1, r1, #6
 8007336:	1192      	asrs	r2, r2, #6
 8007338:	428b      	cmp	r3, r1
 800733a:	d304      	bcc.n	8007346 <__divsi3+0x14a>
 800733c:	0189      	lsls	r1, r1, #6
 800733e:	d03a      	beq.n	80073b6 <__divsi3+0x1ba>
 8007340:	1192      	asrs	r2, r2, #6
 8007342:	e000      	b.n	8007346 <__divsi3+0x14a>
 8007344:	0989      	lsrs	r1, r1, #6
 8007346:	09c3      	lsrs	r3, r0, #7
 8007348:	428b      	cmp	r3, r1
 800734a:	d301      	bcc.n	8007350 <__divsi3+0x154>
 800734c:	01cb      	lsls	r3, r1, #7
 800734e:	1ac0      	subs	r0, r0, r3
 8007350:	4152      	adcs	r2, r2
 8007352:	0983      	lsrs	r3, r0, #6
 8007354:	428b      	cmp	r3, r1
 8007356:	d301      	bcc.n	800735c <__divsi3+0x160>
 8007358:	018b      	lsls	r3, r1, #6
 800735a:	1ac0      	subs	r0, r0, r3
 800735c:	4152      	adcs	r2, r2
 800735e:	0943      	lsrs	r3, r0, #5
 8007360:	428b      	cmp	r3, r1
 8007362:	d301      	bcc.n	8007368 <__divsi3+0x16c>
 8007364:	014b      	lsls	r3, r1, #5
 8007366:	1ac0      	subs	r0, r0, r3
 8007368:	4152      	adcs	r2, r2
 800736a:	0903      	lsrs	r3, r0, #4
 800736c:	428b      	cmp	r3, r1
 800736e:	d301      	bcc.n	8007374 <__divsi3+0x178>
 8007370:	010b      	lsls	r3, r1, #4
 8007372:	1ac0      	subs	r0, r0, r3
 8007374:	4152      	adcs	r2, r2
 8007376:	08c3      	lsrs	r3, r0, #3
 8007378:	428b      	cmp	r3, r1
 800737a:	d301      	bcc.n	8007380 <__divsi3+0x184>
 800737c:	00cb      	lsls	r3, r1, #3
 800737e:	1ac0      	subs	r0, r0, r3
 8007380:	4152      	adcs	r2, r2
 8007382:	0883      	lsrs	r3, r0, #2
 8007384:	428b      	cmp	r3, r1
 8007386:	d301      	bcc.n	800738c <__divsi3+0x190>
 8007388:	008b      	lsls	r3, r1, #2
 800738a:	1ac0      	subs	r0, r0, r3
 800738c:	4152      	adcs	r2, r2
 800738e:	d2d9      	bcs.n	8007344 <__divsi3+0x148>
 8007390:	0843      	lsrs	r3, r0, #1
 8007392:	428b      	cmp	r3, r1
 8007394:	d301      	bcc.n	800739a <__divsi3+0x19e>
 8007396:	004b      	lsls	r3, r1, #1
 8007398:	1ac0      	subs	r0, r0, r3
 800739a:	4152      	adcs	r2, r2
 800739c:	1a41      	subs	r1, r0, r1
 800739e:	d200      	bcs.n	80073a2 <__divsi3+0x1a6>
 80073a0:	4601      	mov	r1, r0
 80073a2:	4663      	mov	r3, ip
 80073a4:	4152      	adcs	r2, r2
 80073a6:	105b      	asrs	r3, r3, #1
 80073a8:	4610      	mov	r0, r2
 80073aa:	d301      	bcc.n	80073b0 <__divsi3+0x1b4>
 80073ac:	4240      	negs	r0, r0
 80073ae:	2b00      	cmp	r3, #0
 80073b0:	d500      	bpl.n	80073b4 <__divsi3+0x1b8>
 80073b2:	4249      	negs	r1, r1
 80073b4:	4770      	bx	lr
 80073b6:	4663      	mov	r3, ip
 80073b8:	105b      	asrs	r3, r3, #1
 80073ba:	d300      	bcc.n	80073be <__divsi3+0x1c2>
 80073bc:	4240      	negs	r0, r0
 80073be:	b501      	push	{r0, lr}
 80073c0:	2000      	movs	r0, #0
 80073c2:	f000 f805 	bl	80073d0 <__aeabi_idiv0>
 80073c6:	bd02      	pop	{r1, pc}

080073c8 <__aeabi_idivmod>:
 80073c8:	2900      	cmp	r1, #0
 80073ca:	d0f8      	beq.n	80073be <__divsi3+0x1c2>
 80073cc:	e716      	b.n	80071fc <__divsi3>
 80073ce:	4770      	bx	lr

080073d0 <__aeabi_idiv0>:
 80073d0:	4770      	bx	lr
 80073d2:	46c0      	nop			; (mov r8, r8)

080073d4 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 80073d4:	480d      	ldr	r0, [pc, #52]	; (800740c <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 80073d6:	4685      	mov	sp, r0

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80073d8:	480d      	ldr	r0, [pc, #52]	; (8007410 <LoopForever+0x6>)
  ldr r1, =_edata
 80073da:	490e      	ldr	r1, [pc, #56]	; (8007414 <LoopForever+0xa>)
  ldr r2, =_sidata
 80073dc:	4a0e      	ldr	r2, [pc, #56]	; (8007418 <LoopForever+0xe>)
  movs r3, #0
 80073de:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80073e0:	e002      	b.n	80073e8 <LoopCopyDataInit>

080073e2 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80073e2:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80073e4:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80073e6:	3304      	adds	r3, #4

080073e8 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80073e8:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80073ea:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80073ec:	d3f9      	bcc.n	80073e2 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80073ee:	4a0b      	ldr	r2, [pc, #44]	; (800741c <LoopForever+0x12>)
  ldr r4, =_ebss
 80073f0:	4c0b      	ldr	r4, [pc, #44]	; (8007420 <LoopForever+0x16>)
  movs r3, #0
 80073f2:	2300      	movs	r3, #0
  b LoopFillZerobss
 80073f4:	e001      	b.n	80073fa <LoopFillZerobss>

080073f6 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80073f6:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80073f8:	3204      	adds	r2, #4

080073fa <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80073fa:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80073fc:	d3fb      	bcc.n	80073f6 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit
 80073fe:	f7f9 fb63 	bl	8000ac8 <SystemInit>
/* Call static constructors */
  bl __libc_init_array
 8007402:	f000 f811 	bl	8007428 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8007406:	f7ff fa27 	bl	8006858 <main>

0800740a <LoopForever>:

LoopForever:
    b LoopForever
 800740a:	e7fe      	b.n	800740a <LoopForever>
  ldr   r0, =_estack
 800740c:	20002000 	.word	0x20002000
  ldr r0, =_sdata
 8007410:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8007414:	2000005c 	.word	0x2000005c
  ldr r2, =_sidata
 8007418:	08007548 	.word	0x08007548
  ldr r2, =_sbss
 800741c:	2000005c 	.word	0x2000005c
  ldr r4, =_ebss
 8007420:	20000eac 	.word	0x20000eac

08007424 <ADC1_COMP_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8007424:	e7fe      	b.n	8007424 <ADC1_COMP_IRQHandler>
	...

08007428 <__libc_init_array>:
 8007428:	b570      	push	{r4, r5, r6, lr}
 800742a:	2600      	movs	r6, #0
 800742c:	4d0c      	ldr	r5, [pc, #48]	; (8007460 <__libc_init_array+0x38>)
 800742e:	4c0d      	ldr	r4, [pc, #52]	; (8007464 <__libc_init_array+0x3c>)
 8007430:	1b64      	subs	r4, r4, r5
 8007432:	10a4      	asrs	r4, r4, #2
 8007434:	42a6      	cmp	r6, r4
 8007436:	d109      	bne.n	800744c <__libc_init_array+0x24>
 8007438:	2600      	movs	r6, #0
 800743a:	f000 f82d 	bl	8007498 <_init>
 800743e:	4d0a      	ldr	r5, [pc, #40]	; (8007468 <__libc_init_array+0x40>)
 8007440:	4c0a      	ldr	r4, [pc, #40]	; (800746c <__libc_init_array+0x44>)
 8007442:	1b64      	subs	r4, r4, r5
 8007444:	10a4      	asrs	r4, r4, #2
 8007446:	42a6      	cmp	r6, r4
 8007448:	d105      	bne.n	8007456 <__libc_init_array+0x2e>
 800744a:	bd70      	pop	{r4, r5, r6, pc}
 800744c:	00b3      	lsls	r3, r6, #2
 800744e:	58eb      	ldr	r3, [r5, r3]
 8007450:	4798      	blx	r3
 8007452:	3601      	adds	r6, #1
 8007454:	e7ee      	b.n	8007434 <__libc_init_array+0xc>
 8007456:	00b3      	lsls	r3, r6, #2
 8007458:	58eb      	ldr	r3, [r5, r3]
 800745a:	4798      	blx	r3
 800745c:	3601      	adds	r6, #1
 800745e:	e7f2      	b.n	8007446 <__libc_init_array+0x1e>
 8007460:	08007540 	.word	0x08007540
 8007464:	08007540 	.word	0x08007540
 8007468:	08007540 	.word	0x08007540
 800746c:	08007544 	.word	0x08007544

08007470 <memcpy>:
 8007470:	2300      	movs	r3, #0
 8007472:	b510      	push	{r4, lr}
 8007474:	429a      	cmp	r2, r3
 8007476:	d100      	bne.n	800747a <memcpy+0xa>
 8007478:	bd10      	pop	{r4, pc}
 800747a:	5ccc      	ldrb	r4, [r1, r3]
 800747c:	54c4      	strb	r4, [r0, r3]
 800747e:	3301      	adds	r3, #1
 8007480:	e7f8      	b.n	8007474 <memcpy+0x4>

08007482 <memset>:
 8007482:	0003      	movs	r3, r0
 8007484:	1882      	adds	r2, r0, r2
 8007486:	4293      	cmp	r3, r2
 8007488:	d100      	bne.n	800748c <memset+0xa>
 800748a:	4770      	bx	lr
 800748c:	7019      	strb	r1, [r3, #0]
 800748e:	3301      	adds	r3, #1
 8007490:	e7f9      	b.n	8007486 <memset+0x4>
	...

08007494 <__EH_FRAME_BEGIN__>:
 8007494:	0000 0000                                   ....

08007498 <_init>:
 8007498:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800749a:	46c0      	nop			; (mov r8, r8)
 800749c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800749e:	bc08      	pop	{r3}
 80074a0:	469e      	mov	lr, r3
 80074a2:	4770      	bx	lr

080074a4 <_fini>:
 80074a4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80074a6:	46c0      	nop			; (mov r8, r8)
 80074a8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80074aa:	bc08      	pop	{r3}
 80074ac:	469e      	mov	lr, r3
 80074ae:	4770      	bx	lr
